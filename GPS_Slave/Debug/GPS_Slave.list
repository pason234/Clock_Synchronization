
GPS_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006544  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006740  08006740  00016740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006910  08006910  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006918  08006918  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000007c  0800699c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  0800699c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc67  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002391  00000000  00000000  0002fd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  000320b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00032c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028683  00000000  00000000  00033720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6d4  00000000  00000000  0005bda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000febff  00000000  00000000  00069477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168076  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000331c  00000000  00000000  001680cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000007c 	.word	0x2000007c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006724 	.word	0x08006724

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000080 	.word	0x20000080
 8000234:	08006724 	.word	0x08006724

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b980 	b.w	8000ed8 <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	4688      	mov	r8, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8084 	bne.w	8000d08 <__udivmoddi4+0x118>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d943      	bls.n	8000c8e <__udivmoddi4+0x9e>
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	b142      	cbz	r2, 8000c1e <__udivmoddi4+0x2e>
 8000c0c:	f1c2 0020 	rsb	r0, r2, #32
 8000c10:	4091      	lsls	r1, r2
 8000c12:	4097      	lsls	r7, r2
 8000c14:	fa24 f000 	lsr.w	r0, r4, r0
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea40 0801 	orr.w	r8, r0, r1
 8000c1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fa1f fe87 	uxth.w	lr, r7
 8000c28:	fbb8 f6fc 	udiv	r6, r8, ip
 8000c2c:	fb0c 8116 	mls	r1, ip, r6, r8
 8000c30:	fb06 f00e 	mul.w	r0, r6, lr
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	4298      	cmp	r0, r3
 8000c3a:	d907      	bls.n	8000c4c <__udivmoddi4+0x5c>
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	f106 31ff 	add.w	r1, r6, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x5a>
 8000c44:	4298      	cmp	r0, r3
 8000c46:	f200 8131 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000c4a:	460e      	mov	r6, r1
 8000c4c:	1a19      	subs	r1, r3, r0
 8000c4e:	b2a3      	uxth	r3, r4
 8000c50:	fbb1 f0fc 	udiv	r0, r1, ip
 8000c54:	fb0c 1110 	mls	r1, ip, r0, r1
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d907      	bls.n	8000c74 <__udivmoddi4+0x84>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x82>
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	f200 811a 	bhi.w	8000ea6 <__udivmoddi4+0x2b6>
 8000c72:	4618      	mov	r0, r3
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0x98>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xa2>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d152      	bne.n	8000d40 <__udivmoddi4+0x150>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	0c21      	lsrs	r1, r4, #16
 8000ca8:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cac:	fb0e 301c 	mls	r0, lr, ip, r3
 8000cb0:	fb08 f90c 	mul.w	r9, r8, ip
 8000cb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb8:	4589      	cmp	r9, r1
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000cc2:	bf2c      	ite	cs
 8000cc4:	2001      	movcs	r0, #1
 8000cc6:	2000      	movcc	r0, #0
 8000cc8:	4589      	cmp	r9, r1
 8000cca:	d902      	bls.n	8000cd2 <__udivmoddi4+0xe2>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	f000 80f0 	beq.w	8000eb2 <__udivmoddi4+0x2c2>
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	eba1 0109 	sub.w	r1, r1, r9
 8000cd8:	b2a3      	uxth	r3, r4
 8000cda:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cde:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce2:	fb08 f800 	mul.w	r8, r8, r0
 8000ce6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cea:	45a0      	cmp	r8, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x10e>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x10c>
 8000cf6:	45a0      	cmp	r8, r4
 8000cf8:	f200 80d2 	bhi.w	8000ea0 <__udivmoddi4+0x2b0>
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	eba4 0408 	sub.w	r4, r4, r8
 8000d02:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d06:	e7ba      	b.n	8000c7e <__udivmoddi4+0x8e>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d909      	bls.n	8000d20 <__udivmoddi4+0x130>
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	f000 80be 	beq.w	8000e8e <__udivmoddi4+0x29e>
 8000d12:	2600      	movs	r6, #0
 8000d14:	e9c5 0100 	strd	r0, r1, [r5]
 8000d18:	4630      	mov	r0, r6
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d20:	fab3 f683 	clz	r6, r3
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d14d      	bne.n	8000dc4 <__udivmoddi4+0x1d4>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f0c0 80b3 	bcc.w	8000e94 <__udivmoddi4+0x2a4>
 8000d2e:	4282      	cmp	r2, r0
 8000d30:	f240 80b0 	bls.w	8000e94 <__udivmoddi4+0x2a4>
 8000d34:	4630      	mov	r0, r6
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0a6      	beq.n	8000c88 <__udivmoddi4+0x98>
 8000d3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d3e:	e7a3      	b.n	8000c88 <__udivmoddi4+0x98>
 8000d40:	4097      	lsls	r7, r2
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	fa24 f303 	lsr.w	r3, r4, r3
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d60:	0c1e      	lsrs	r6, r3, #16
 8000d62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d66:	fb00 fc08 	mul.w	ip, r0, r8
 8000d6a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000d6e:	458c      	cmp	ip, r1
 8000d70:	d90e      	bls.n	8000d90 <__udivmoddi4+0x1a0>
 8000d72:	1879      	adds	r1, r7, r1
 8000d74:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d78:	bf2c      	ite	cs
 8000d7a:	f04f 0901 	movcs.w	r9, #1
 8000d7e:	f04f 0900 	movcc.w	r9, #0
 8000d82:	458c      	cmp	ip, r1
 8000d84:	d903      	bls.n	8000d8e <__udivmoddi4+0x19e>
 8000d86:	f1b9 0f00 	cmp.w	r9, #0
 8000d8a:	f000 8096 	beq.w	8000eba <__udivmoddi4+0x2ca>
 8000d8e:	4630      	mov	r0, r6
 8000d90:	eba1 010c 	sub.w	r1, r1, ip
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d9a:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d9e:	fb06 fc08 	mul.w	ip, r6, r8
 8000da2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000da6:	458c      	cmp	ip, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1ca>
 8000daa:	1879      	adds	r1, r7, r1
 8000dac:	f106 33ff 	add.w	r3, r6, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x1c8>
 8000db2:	458c      	cmp	ip, r1
 8000db4:	f200 8088 	bhi.w	8000ec8 <__udivmoddi4+0x2d8>
 8000db8:	461e      	mov	r6, r3
 8000dba:	eba1 030c 	sub.w	r3, r1, ip
 8000dbe:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc2:	e770      	b.n	8000ca6 <__udivmoddi4+0xb6>
 8000dc4:	f1c6 0720 	rsb	r7, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa02 fc06 	lsl.w	ip, r2, r6
 8000dd0:	fa01 fe06 	lsl.w	lr, r1, r6
 8000dd4:	40fa      	lsrs	r2, r7
 8000dd6:	fa20 f807 	lsr.w	r8, r0, r7
 8000dda:	40f9      	lsrs	r1, r7
 8000ddc:	fa00 f306 	lsl.w	r3, r0, r6
 8000de0:	4322      	orrs	r2, r4
 8000de2:	ea48 040e 	orr.w	r4, r8, lr
 8000de6:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa1f f982 	uxth.w	r9, r2
 8000df2:	fbb1 faf8 	udiv	sl, r1, r8
 8000df6:	fb08 111a 	mls	r1, r8, sl, r1
 8000dfa:	fb0a f009 	mul.w	r0, sl, r9
 8000dfe:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000e02:	4570      	cmp	r0, lr
 8000e04:	d90e      	bls.n	8000e24 <__udivmoddi4+0x234>
 8000e06:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e0a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e0e:	bf2c      	ite	cs
 8000e10:	f04f 0b01 	movcs.w	fp, #1
 8000e14:	f04f 0b00 	movcc.w	fp, #0
 8000e18:	4570      	cmp	r0, lr
 8000e1a:	d902      	bls.n	8000e22 <__udivmoddi4+0x232>
 8000e1c:	f1bb 0f00 	cmp.w	fp, #0
 8000e20:	d04e      	beq.n	8000ec0 <__udivmoddi4+0x2d0>
 8000e22:	468a      	mov	sl, r1
 8000e24:	ebae 0e00 	sub.w	lr, lr, r0
 8000e28:	b2a4      	uxth	r4, r4
 8000e2a:	fbbe f0f8 	udiv	r0, lr, r8
 8000e2e:	fb08 ee10 	mls	lr, r8, r0, lr
 8000e32:	fb00 f909 	mul.w	r9, r0, r9
 8000e36:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8000e3a:	45f1      	cmp	r9, lr
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x25e>
 8000e3e:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e46:	d201      	bcs.n	8000e4c <__udivmoddi4+0x25c>
 8000e48:	45f1      	cmp	r9, lr
 8000e4a:	d840      	bhi.n	8000ece <__udivmoddi4+0x2de>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000e52:	ebae 0e09 	sub.w	lr, lr, r9
 8000e56:	fba0 890c 	umull	r8, r9, r0, ip
 8000e5a:	45ce      	cmp	lr, r9
 8000e5c:	4641      	mov	r1, r8
 8000e5e:	464c      	mov	r4, r9
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x278>
 8000e62:	d106      	bne.n	8000e72 <__udivmoddi4+0x282>
 8000e64:	4543      	cmp	r3, r8
 8000e66:	d204      	bcs.n	8000e72 <__udivmoddi4+0x282>
 8000e68:	3801      	subs	r0, #1
 8000e6a:	ebb8 010c 	subs.w	r1, r8, ip
 8000e6e:	eb69 0402 	sbc.w	r4, r9, r2
 8000e72:	b37d      	cbz	r5, 8000ed4 <__udivmoddi4+0x2e4>
 8000e74:	1a5a      	subs	r2, r3, r1
 8000e76:	eb6e 0e04 	sbc.w	lr, lr, r4
 8000e7a:	40f2      	lsrs	r2, r6
 8000e7c:	fa0e f707 	lsl.w	r7, lr, r7
 8000e80:	fa2e f306 	lsr.w	r3, lr, r6
 8000e84:	2600      	movs	r6, #0
 8000e86:	4317      	orrs	r7, r2
 8000e88:	e9c5 7300 	strd	r7, r3, [r5]
 8000e8c:	e6fc      	b.n	8000c88 <__udivmoddi4+0x98>
 8000e8e:	462e      	mov	r6, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	e6f9      	b.n	8000c88 <__udivmoddi4+0x98>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	4688      	mov	r8, r1
 8000e9e:	e74a      	b.n	8000d36 <__udivmoddi4+0x146>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	443c      	add	r4, r7
 8000ea4:	e72b      	b.n	8000cfe <__udivmoddi4+0x10e>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x84>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	443b      	add	r3, r7
 8000eb0:	e6cc      	b.n	8000c4c <__udivmoddi4+0x5c>
 8000eb2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb6:	4439      	add	r1, r7
 8000eb8:	e70c      	b.n	8000cd4 <__udivmoddi4+0xe4>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	4439      	add	r1, r7
 8000ebe:	e767      	b.n	8000d90 <__udivmoddi4+0x1a0>
 8000ec0:	f1aa 0a02 	sub.w	sl, sl, #2
 8000ec4:	4496      	add	lr, r2
 8000ec6:	e7ad      	b.n	8000e24 <__udivmoddi4+0x234>
 8000ec8:	3e02      	subs	r6, #2
 8000eca:	4439      	add	r1, r7
 8000ecc:	e775      	b.n	8000dba <__udivmoddi4+0x1ca>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4496      	add	lr, r2
 8000ed2:	e7bc      	b.n	8000e4e <__udivmoddi4+0x25e>
 8000ed4:	462e      	mov	r6, r5
 8000ed6:	e6d7      	b.n	8000c88 <__udivmoddi4+0x98>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000ee0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ee4:	b08c      	sub	sp, #48	; 0x30
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000eec:	4b5b      	ldr	r3, [pc, #364]	; (800105c <decodeGGA+0x17c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000ef6:	e004      	b.n	8000f02 <decodeGGA+0x22>
 8000ef8:	4b58      	ldr	r3, [pc, #352]	; (800105c <decodeGGA+0x17c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a57      	ldr	r2, [pc, #348]	; (800105c <decodeGGA+0x17c>)
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b56      	ldr	r3, [pc, #344]	; (800105c <decodeGGA+0x17c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b2c      	cmp	r3, #44	; 0x2c
 8000f10:	d1f2      	bne.n	8000ef8 <decodeGGA+0x18>
	inx++;
 8000f12:	4b52      	ldr	r3, [pc, #328]	; (800105c <decodeGGA+0x17c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a50      	ldr	r2, [pc, #320]	; (800105c <decodeGGA+0x17c>)
 8000f1a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000f1c:	e004      	b.n	8000f28 <decodeGGA+0x48>
 8000f1e:	4b4f      	ldr	r3, [pc, #316]	; (800105c <decodeGGA+0x17c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	4a4d      	ldr	r2, [pc, #308]	; (800105c <decodeGGA+0x17c>)
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b4c      	ldr	r3, [pc, #304]	; (800105c <decodeGGA+0x17c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b2c      	cmp	r3, #44	; 0x2c
 8000f36:	d1f2      	bne.n	8000f1e <decodeGGA+0x3e>
	inx++;
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <decodeGGA+0x17c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a47      	ldr	r2, [pc, #284]	; (800105c <decodeGGA+0x17c>)
 8000f40:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000f42:	e004      	b.n	8000f4e <decodeGGA+0x6e>
 8000f44:	4b45      	ldr	r3, [pc, #276]	; (800105c <decodeGGA+0x17c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	4a44      	ldr	r2, [pc, #272]	; (800105c <decodeGGA+0x17c>)
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <decodeGGA+0x17c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f5c:	d1f2      	bne.n	8000f44 <decodeGGA+0x64>
	inx++;
 8000f5e:	4b3f      	ldr	r3, [pc, #252]	; (800105c <decodeGGA+0x17c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a3d      	ldr	r2, [pc, #244]	; (800105c <decodeGGA+0x17c>)
 8000f66:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000f68:	e004      	b.n	8000f74 <decodeGGA+0x94>
 8000f6a:	4b3c      	ldr	r3, [pc, #240]	; (800105c <decodeGGA+0x17c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4a3a      	ldr	r2, [pc, #232]	; (800105c <decodeGGA+0x17c>)
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b39      	ldr	r3, [pc, #228]	; (800105c <decodeGGA+0x17c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b2c      	cmp	r3, #44	; 0x2c
 8000f82:	d1f2      	bne.n	8000f6a <decodeGGA+0x8a>
	inx++;
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <decodeGGA+0x17c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4a34      	ldr	r2, [pc, #208]	; (800105c <decodeGGA+0x17c>)
 8000f8c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000f8e:	e004      	b.n	8000f9a <decodeGGA+0xba>
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <decodeGGA+0x17c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a31      	ldr	r2, [pc, #196]	; (800105c <decodeGGA+0x17c>)
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b30      	ldr	r3, [pc, #192]	; (800105c <decodeGGA+0x17c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b2c      	cmp	r3, #44	; 0x2c
 8000fa8:	d1f2      	bne.n	8000f90 <decodeGGA+0xb0>
	inx++;
 8000faa:	4b2c      	ldr	r3, [pc, #176]	; (800105c <decodeGGA+0x17c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	; (800105c <decodeGGA+0x17c>)
 8000fb2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000fb4:	e004      	b.n	8000fc0 <decodeGGA+0xe0>
 8000fb6:	4b29      	ldr	r3, [pc, #164]	; (800105c <decodeGGA+0x17c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a27      	ldr	r2, [pc, #156]	; (800105c <decodeGGA+0x17c>)
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <decodeGGA+0x17c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b2c      	cmp	r3, #44	; 0x2c
 8000fce:	d1f2      	bne.n	8000fb6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <decodeGGA+0x17c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4a21      	ldr	r2, [pc, #132]	; (800105c <decodeGGA+0x17c>)
 8000fd8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <decodeGGA+0x17c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b31      	cmp	r3, #49	; 0x31
 8000fe8:	d00f      	beq.n	800100a <decodeGGA+0x12a>
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <decodeGGA+0x17c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b32      	cmp	r3, #50	; 0x32
 8000ff8:	d007      	beq.n	800100a <decodeGGA+0x12a>
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <decodeGGA+0x17c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b36      	cmp	r3, #54	; 0x36
 8001008:	d106      	bne.n	8001018 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2201      	movs	r2, #1
 800100e:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <decodeGGA+0x17c>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001016:	e009      	b.n	800102c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800101e:	2301      	movs	r3, #1
 8001020:	e2fd      	b.n	800161e <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <decodeGGA+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <decodeGGA+0x17c>)
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <decodeGGA+0x17c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b2c      	cmp	r3, #44	; 0x2c
 800103a:	d1f2      	bne.n	8001022 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <decodeGGA+0x17c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <decodeGGA+0x17c>)
 8001044:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	220c      	movs	r2, #12
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fb18 	bl	8005684 <memset>
	i=0;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001058:	e016      	b.n	8001088 <decodeGGA+0x1a8>
 800105a:	bf00      	nop
 800105c:	20000098 	.word	0x20000098
	{
		buffer[i] = GGAbuffer[inx];
 8001060:	4bab      	ldr	r3, [pc, #684]	; (8001310 <decodeGGA+0x430>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	7819      	ldrb	r1, [r3, #0]
 800106c:	f107 020c 	add.w	r2, r7, #12
 8001070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001072:	4413      	add	r3, r2
 8001074:	460a      	mov	r2, r1
 8001076:	701a      	strb	r2, [r3, #0]
		i++;
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	3301      	adds	r3, #1
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800107e:	4ba4      	ldr	r3, [pc, #656]	; (8001310 <decodeGGA+0x430>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	4aa2      	ldr	r2, [pc, #648]	; (8001310 <decodeGGA+0x430>)
 8001086:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001088:	4ba1      	ldr	r3, [pc, #644]	; (8001310 <decodeGGA+0x430>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b2c      	cmp	r3, #44	; 0x2c
 8001096:	d1e3      	bne.n	8001060 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4618      	mov	r0, r3
 800109e:	f004 fac3 	bl	8005628 <atoi>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a9b      	ldr	r2, [pc, #620]	; (8001314 <decodeGGA+0x434>)
 80010a6:	fb82 1203 	smull	r1, r2, r2, r3
 80010aa:	1312      	asrs	r2, r2, #12
 80010ac:	17db      	asrs	r3, r3, #31
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	4b99      	ldr	r3, [pc, #612]	; (8001318 <decodeGGA+0x438>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4999      	ldr	r1, [pc, #612]	; (800131c <decodeGGA+0x43c>)
 80010b6:	fb81 0103 	smull	r0, r1, r1, r3
 80010ba:	1149      	asrs	r1, r1, #5
 80010bc:	17db      	asrs	r3, r3, #31
 80010be:	1acb      	subs	r3, r1, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	4a97      	ldr	r2, [pc, #604]	; (8001320 <decodeGGA+0x440>)
 80010c4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 faac 	bl	8005628 <atoi>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a92      	ldr	r2, [pc, #584]	; (800131c <decodeGGA+0x43c>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1152      	asrs	r2, r2, #5
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	4a8f      	ldr	r2, [pc, #572]	; (800131c <decodeGGA+0x43c>)
 80010e0:	fb82 1203 	smull	r1, r2, r2, r3
 80010e4:	1151      	asrs	r1, r2, #5
 80010e6:	17da      	asrs	r2, r3, #31
 80010e8:	1a8a      	subs	r2, r1, r2
 80010ea:	2164      	movs	r1, #100	; 0x64
 80010ec:	fb01 f202 	mul.w	r2, r1, r2
 80010f0:	1a9a      	subs	r2, r3, r2
 80010f2:	4b89      	ldr	r3, [pc, #548]	; (8001318 <decodeGGA+0x438>)
 80010f4:	6819      	ldr	r1, [r3, #0]
 80010f6:	4b89      	ldr	r3, [pc, #548]	; (800131c <decodeGGA+0x43c>)
 80010f8:	fb83 0301 	smull	r0, r3, r3, r1
 80010fc:	1158      	asrs	r0, r3, #5
 80010fe:	17cb      	asrs	r3, r1, #31
 8001100:	1ac3      	subs	r3, r0, r3
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	fb00 f303 	mul.w	r3, r0, r3
 8001108:	1acb      	subs	r3, r1, r3
 800110a:	4413      	add	r3, r2
 800110c:	4a85      	ldr	r2, [pc, #532]	; (8001324 <decodeGGA+0x444>)
 800110e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001110:	4b84      	ldr	r3, [pc, #528]	; (8001324 <decodeGGA+0x444>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b3b      	cmp	r3, #59	; 0x3b
 8001116:	dd09      	ble.n	800112c <decodeGGA+0x24c>
	{
		min = min-60;
 8001118:	4b82      	ldr	r3, [pc, #520]	; (8001324 <decodeGGA+0x444>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3b3c      	subs	r3, #60	; 0x3c
 800111e:	4a81      	ldr	r2, [pc, #516]	; (8001324 <decodeGGA+0x444>)
 8001120:	6013      	str	r3, [r2, #0]
		hr++;
 8001122:	4b7f      	ldr	r3, [pc, #508]	; (8001320 <decodeGGA+0x440>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a7d      	ldr	r2, [pc, #500]	; (8001320 <decodeGGA+0x440>)
 800112a:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 800112c:	4b7c      	ldr	r3, [pc, #496]	; (8001320 <decodeGGA+0x440>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	da09      	bge.n	8001148 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001134:	4b7a      	ldr	r3, [pc, #488]	; (8001320 <decodeGGA+0x440>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3318      	adds	r3, #24
 800113a:	4a79      	ldr	r2, [pc, #484]	; (8001320 <decodeGGA+0x440>)
 800113c:	6013      	str	r3, [r2, #0]
		daychange--;
 800113e:	4b7a      	ldr	r3, [pc, #488]	; (8001328 <decodeGGA+0x448>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3b01      	subs	r3, #1
 8001144:	4a78      	ldr	r2, [pc, #480]	; (8001328 <decodeGGA+0x448>)
 8001146:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001148:	4b75      	ldr	r3, [pc, #468]	; (8001320 <decodeGGA+0x440>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b17      	cmp	r3, #23
 800114e:	dd09      	ble.n	8001164 <decodeGGA+0x284>
	{
		hr=hr-24;
 8001150:	4b73      	ldr	r3, [pc, #460]	; (8001320 <decodeGGA+0x440>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b18      	subs	r3, #24
 8001156:	4a72      	ldr	r2, [pc, #456]	; (8001320 <decodeGGA+0x440>)
 8001158:	6013      	str	r3, [r2, #0]
		daychange++;
 800115a:	4b73      	ldr	r3, [pc, #460]	; (8001328 <decodeGGA+0x448>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a71      	ldr	r2, [pc, #452]	; (8001328 <decodeGGA+0x448>)
 8001162:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001164:	4b6e      	ldr	r3, [pc, #440]	; (8001320 <decodeGGA+0x440>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 800116c:	4b6d      	ldr	r3, [pc, #436]	; (8001324 <decodeGGA+0x444>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fa55 	bl	8005628 <atoi>
 800117e:	4602      	mov	r2, r0
 8001180:	4b66      	ldr	r3, [pc, #408]	; (800131c <decodeGGA+0x43c>)
 8001182:	fb83 1302 	smull	r1, r3, r3, r2
 8001186:	1159      	asrs	r1, r3, #5
 8001188:	17d3      	asrs	r3, r2, #31
 800118a:	1acb      	subs	r3, r1, r3
 800118c:	2164      	movs	r1, #100	; 0x64
 800118e:	fb01 f303 	mul.w	r3, r1, r3
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001198:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <decodeGGA+0x430>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a5c      	ldr	r2, [pc, #368]	; (8001310 <decodeGGA+0x430>)
 80011a0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	220c      	movs	r2, #12
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 fa6a 	bl	8005684 <memset>
	i=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80011b4:	e013      	b.n	80011de <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <decodeGGA+0x430>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	7819      	ldrb	r1, [r3, #0]
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c8:	4413      	add	r3, r2
 80011ca:	460a      	mov	r2, r1
 80011cc:	701a      	strb	r2, [r3, #0]
		i++;
 80011ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d0:	3301      	adds	r3, #1
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80011d4:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <decodeGGA+0x430>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a4d      	ldr	r2, [pc, #308]	; (8001310 <decodeGGA+0x430>)
 80011dc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80011de:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <decodeGGA+0x430>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b2c      	cmp	r3, #44	; 0x2c
 80011ec:	d1e3      	bne.n	80011b6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f820 	bl	8000238 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d801      	bhi.n	8001202 <decodeGGA+0x322>
 80011fe:	2302      	movs	r3, #2
 8001200:	e20d      	b.n	800161e <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fa0e 	bl	8005628 <atoi>
 800120c:	4603      	mov	r3, r0
 800120e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001214:	e002      	b.n	800121c <decodeGGA+0x33c>
 8001216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001218:	3301      	adds	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
 800121c:	f107 020c 	add.w	r2, r7, #12
 8001220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b2e      	cmp	r3, #46	; 0x2e
 8001228:	d1f5      	bne.n	8001216 <decodeGGA+0x336>
	j++;
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	3301      	adds	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4618      	mov	r0, r3
 8001236:	f7fe ffff 	bl	8000238 <strlen>
 800123a:	4602      	mov	r2, r0
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	f107 020c 	add.w	r2, r7, #12
 8001248:	4413      	add	r3, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f004 f9ec 	bl	8005628 <atoi>
 8001250:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001252:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f948 	bl	80004ec <__aeabi_i2d>
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <decodeGGA+0x44c>)
 8001262:	f7ff fad7 	bl	8000814 <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4690      	mov	r8, r2
 800126c:	4699      	mov	r9, r3
 800126e:	69f8      	ldr	r0, [r7, #28]
 8001270:	f7ff f93c 	bl	80004ec <__aeabi_i2d>
 8001274:	4604      	mov	r4, r0
 8001276:	460d      	mov	r5, r1
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	3302      	adds	r3, #2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f935 	bl	80004ec <__aeabi_i2d>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	ec43 2b11 	vmov	d1, r2, r3
 800128a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001308 <decodeGGA+0x428>
 800128e:	f004 fa8d 	bl	80057ac <pow>
 8001292:	ec53 2b10 	vmov	r2, r3, d0
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7ff fabb 	bl	8000814 <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4640      	mov	r0, r8
 80012a4:	4649      	mov	r1, r9
 80012a6:	f7fe ffd5 	bl	8000254 <__adddf3>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fc35 	bl	8000b20 <__aeabi_d2f>
 80012b6:	4603      	mov	r3, r0
 80012b8:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	601a      	str	r2, [r3, #0]
	inx++;  
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <decodeGGA+0x430>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <decodeGGA+0x430>)
 80012c8:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <decodeGGA+0x430>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <decodeGGA+0x430>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <decodeGGA+0x430>)
 80012e2:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <decodeGGA+0x430>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <decodeGGA+0x430>)
 80012ec:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	220c      	movs	r2, #12
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 f9c4 	bl	8005684 <memset>
	i=0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001300:	e02a      	b.n	8001358 <decodeGGA+0x478>
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	00000000 	.word	0x00000000
 800130c:	40240000 	.word	0x40240000
 8001310:	20000098 	.word	0x20000098
 8001314:	68db8bad 	.word	0x68db8bad
 8001318:	20000000 	.word	0x20000000
 800131c:	51eb851f 	.word	0x51eb851f
 8001320:	2000009c 	.word	0x2000009c
 8001324:	200000a0 	.word	0x200000a0
 8001328:	200000b0 	.word	0x200000b0
 800132c:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001330:	4b8b      	ldr	r3, [pc, #556]	; (8001560 <decodeGGA+0x680>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	7819      	ldrb	r1, [r3, #0]
 800133c:	f107 020c 	add.w	r2, r7, #12
 8001340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001342:	4413      	add	r3, r2
 8001344:	460a      	mov	r2, r1
 8001346:	701a      	strb	r2, [r3, #0]
		i++;
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	3301      	adds	r3, #1
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800134e:	4b84      	ldr	r3, [pc, #528]	; (8001560 <decodeGGA+0x680>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	4a82      	ldr	r2, [pc, #520]	; (8001560 <decodeGGA+0x680>)
 8001356:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001358:	4b81      	ldr	r3, [pc, #516]	; (8001560 <decodeGGA+0x680>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b2c      	cmp	r3, #44	; 0x2c
 8001366:	d1e3      	bne.n	8001330 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4618      	mov	r0, r3
 800136e:	f004 f95b 	bl	8005628 <atoi>
 8001372:	4603      	mov	r3, r0
 8001374:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 800137a:	e002      	b.n	8001382 <decodeGGA+0x4a2>
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	3301      	adds	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b2e      	cmp	r3, #46	; 0x2e
 800138e:	d1f5      	bne.n	800137c <decodeGGA+0x49c>
	j++;
 8001390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001392:	3301      	adds	r3, #1
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	4618      	mov	r0, r3
 800139c:	f7fe ff4c 	bl	8000238 <strlen>
 80013a0:	4602      	mov	r2, r0
 80013a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013aa:	f107 020c 	add.w	r2, r7, #12
 80013ae:	4413      	add	r3, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 f939 	bl	8005628 <atoi>
 80013b6:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80013b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f895 	bl	80004ec <__aeabi_i2d>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b67      	ldr	r3, [pc, #412]	; (8001564 <decodeGGA+0x684>)
 80013c8:	f7ff fa24 	bl	8000814 <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4690      	mov	r8, r2
 80013d2:	4699      	mov	r9, r3
 80013d4:	69f8      	ldr	r0, [r7, #28]
 80013d6:	f7ff f889 	bl	80004ec <__aeabi_i2d>
 80013da:	4604      	mov	r4, r0
 80013dc:	460d      	mov	r5, r1
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	3302      	adds	r3, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f882 	bl	80004ec <__aeabi_i2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	ec43 2b11 	vmov	d1, r2, r3
 80013f0:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8001558 <decodeGGA+0x678>
 80013f4:	f004 f9da 	bl	80057ac <pow>
 80013f8:	ec53 2b10 	vmov	r2, r3, d0
 80013fc:	4620      	mov	r0, r4
 80013fe:	4629      	mov	r1, r5
 8001400:	f7ff fa08 	bl	8000814 <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4640      	mov	r0, r8
 800140a:	4649      	mov	r1, r9
 800140c:	f7fe ff22 	bl	8000254 <__adddf3>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fb82 	bl	8000b20 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	609a      	str	r2, [r3, #8]
	inx++;
 8001426:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <decodeGGA+0x680>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a4c      	ldr	r2, [pc, #304]	; (8001560 <decodeGGA+0x680>)
 800142e:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001430:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <decodeGGA+0x680>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001440:	4b47      	ldr	r3, [pc, #284]	; (8001560 <decodeGGA+0x680>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a46      	ldr	r2, [pc, #280]	; (8001560 <decodeGGA+0x680>)
 8001448:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800144a:	4b45      	ldr	r3, [pc, #276]	; (8001560 <decodeGGA+0x680>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	4a43      	ldr	r2, [pc, #268]	; (8001560 <decodeGGA+0x680>)
 8001452:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8001454:	4b42      	ldr	r3, [pc, #264]	; (8001560 <decodeGGA+0x680>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a41      	ldr	r2, [pc, #260]	; (8001560 <decodeGGA+0x680>)
 800145c:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 800145e:	4b40      	ldr	r3, [pc, #256]	; (8001560 <decodeGGA+0x680>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	4a3e      	ldr	r2, [pc, #248]	; (8001560 <decodeGGA+0x680>)
 8001466:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	220c      	movs	r2, #12
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f004 f907 	bl	8005684 <memset>
	i=0;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800147a:	e013      	b.n	80014a4 <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <decodeGGA+0x680>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	7819      	ldrb	r1, [r3, #0]
 8001488:	f107 020c 	add.w	r2, r7, #12
 800148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148e:	4413      	add	r3, r2
 8001490:	460a      	mov	r2, r1
 8001492:	701a      	strb	r2, [r3, #0]
		i++;
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	3301      	adds	r3, #1
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <decodeGGA+0x680>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <decodeGGA+0x680>)
 80014a2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <decodeGGA+0x680>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b2c      	cmp	r3, #44	; 0x2c
 80014b2:	d1e3      	bne.n	800147c <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 f8b5 	bl	8005628 <atoi>
 80014be:	4602      	mov	r2, r0
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <decodeGGA+0x680>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a25      	ldr	r2, [pc, #148]	; (8001560 <decodeGGA+0x680>)
 80014cc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80014ce:	e004      	b.n	80014da <decodeGGA+0x5fa>
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <decodeGGA+0x680>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a22      	ldr	r2, [pc, #136]	; (8001560 <decodeGGA+0x680>)
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <decodeGGA+0x680>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b2c      	cmp	r3, #44	; 0x2c
 80014e8:	d1f2      	bne.n	80014d0 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <decodeGGA+0x680>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <decodeGGA+0x680>)
 80014f2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	220c      	movs	r2, #12
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 f8c1 	bl	8005684 <memset>
	i=0;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001506:	e013      	b.n	8001530 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <decodeGGA+0x680>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	7819      	ldrb	r1, [r3, #0]
 8001514:	f107 020c 	add.w	r2, r7, #12
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	4413      	add	r3, r2
 800151c:	460a      	mov	r2, r1
 800151e:	701a      	strb	r2, [r3, #0]
		i++;
 8001520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001522:	3301      	adds	r3, #1
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <decodeGGA+0x680>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <decodeGGA+0x680>)
 800152e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <decodeGGA+0x680>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b2c      	cmp	r3, #44	; 0x2c
 800153e:	d1e3      	bne.n	8001508 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4618      	mov	r0, r3
 8001546:	f004 f86f 	bl	8005628 <atoi>
 800154a:	4603      	mov	r3, r0
 800154c:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8001552:	e00c      	b.n	800156e <decodeGGA+0x68e>
 8001554:	f3af 8000 	nop.w
 8001558:	00000000 	.word	0x00000000
 800155c:	40240000 	.word	0x40240000
 8001560:	20000098 	.word	0x20000098
 8001564:	40590000 	.word	0x40590000
 8001568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156a:	3301      	adds	r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
 800156e:	f107 020c 	add.w	r2, r7, #12
 8001572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b2e      	cmp	r3, #46	; 0x2e
 800157a:	d1f5      	bne.n	8001568 <decodeGGA+0x688>
	j++;
 800157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157e:	3301      	adds	r3, #1
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe56 	bl	8000238 <strlen>
 800158c:	4602      	mov	r2, r0
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	f107 020c 	add.w	r2, r7, #12
 800159a:	4413      	add	r3, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f004 f843 	bl	8005628 <atoi>
 80015a2:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80015a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff9f 	bl	80004ec <__aeabi_i2d>
 80015ae:	4604      	mov	r4, r0
 80015b0:	460d      	mov	r5, r1
 80015b2:	69f8      	ldr	r0, [r7, #28]
 80015b4:	f7fe ff9a 	bl	80004ec <__aeabi_i2d>
 80015b8:	4680      	mov	r8, r0
 80015ba:	4689      	mov	r9, r1
 80015bc:	6a38      	ldr	r0, [r7, #32]
 80015be:	f7fe ff95 	bl	80004ec <__aeabi_i2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	ec43 2b11 	vmov	d1, r2, r3
 80015ca:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001628 <decodeGGA+0x748>
 80015ce:	f004 f8ed 	bl	80057ac <pow>
 80015d2:	ec53 2b10 	vmov	r2, r3, d0
 80015d6:	4640      	mov	r0, r8
 80015d8:	4649      	mov	r1, r9
 80015da:	f7ff f91b 	bl	8000814 <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7fe fe35 	bl	8000254 <__adddf3>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fa95 	bl	8000b20 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	621a      	str	r2, [r3, #32]

	inx++;
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <decodeGGA+0x750>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <decodeGGA+0x750>)
 8001608:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <decodeGGA+0x750>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 800161c:	2300      	movs	r3, #0

}
 800161e:	4618      	mov	r0, r3
 8001620:	3730      	adds	r7, #48	; 0x30
 8001622:	46bd      	mov	sp, r7
 8001624:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001628:	00000000 	.word	0x00000000
 800162c:	40240000 	.word	0x40240000
 8001630:	20000098 	.word	0x20000098
 8001634:	00000000 	.word	0x00000000

08001638 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800163c:	b090      	sub	sp, #64	; 0x40
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001644:	4b94      	ldr	r3, [pc, #592]	; (8001898 <decodeRMC+0x260>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800164e:	e004      	b.n	800165a <decodeRMC+0x22>
 8001650:	4b91      	ldr	r3, [pc, #580]	; (8001898 <decodeRMC+0x260>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	4a90      	ldr	r2, [pc, #576]	; (8001898 <decodeRMC+0x260>)
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b8f      	ldr	r3, [pc, #572]	; (8001898 <decodeRMC+0x260>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b2c      	cmp	r3, #44	; 0x2c
 8001668:	d1f2      	bne.n	8001650 <decodeRMC+0x18>
	inx++;
 800166a:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <decodeRMC+0x260>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a89      	ldr	r2, [pc, #548]	; (8001898 <decodeRMC+0x260>)
 8001672:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001674:	e004      	b.n	8001680 <decodeRMC+0x48>
 8001676:	4b88      	ldr	r3, [pc, #544]	; (8001898 <decodeRMC+0x260>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a86      	ldr	r2, [pc, #536]	; (8001898 <decodeRMC+0x260>)
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b85      	ldr	r3, [pc, #532]	; (8001898 <decodeRMC+0x260>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b2c      	cmp	r3, #44	; 0x2c
 800168e:	d1f2      	bne.n	8001676 <decodeRMC+0x3e>
	inx++;
 8001690:	4b81      	ldr	r3, [pc, #516]	; (8001898 <decodeRMC+0x260>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	4a80      	ldr	r2, [pc, #512]	; (8001898 <decodeRMC+0x260>)
 8001698:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 800169a:	4b7f      	ldr	r3, [pc, #508]	; (8001898 <decodeRMC+0x260>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b41      	cmp	r3, #65	; 0x41
 80016a8:	d10d      	bne.n	80016c6 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2201      	movs	r2, #1
 80016ae:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80016b0:	4b79      	ldr	r3, [pc, #484]	; (8001898 <decodeRMC+0x260>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4a78      	ldr	r2, [pc, #480]	; (8001898 <decodeRMC+0x260>)
 80016b8:	6013      	str	r3, [r2, #0]
	inx++;
 80016ba:	4b77      	ldr	r3, [pc, #476]	; (8001898 <decodeRMC+0x260>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a75      	ldr	r2, [pc, #468]	; (8001898 <decodeRMC+0x260>)
 80016c2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80016c4:	e009      	b.n	80016da <decodeRMC+0xa2>
		rmc->isValid =0;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
		return 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e1d8      	b.n	8001a82 <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80016d0:	4b71      	ldr	r3, [pc, #452]	; (8001898 <decodeRMC+0x260>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a70      	ldr	r2, [pc, #448]	; (8001898 <decodeRMC+0x260>)
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b6f      	ldr	r3, [pc, #444]	; (8001898 <decodeRMC+0x260>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b2c      	cmp	r3, #44	; 0x2c
 80016e8:	d1f2      	bne.n	80016d0 <decodeRMC+0x98>
	inx++;
 80016ea:	4b6b      	ldr	r3, [pc, #428]	; (8001898 <decodeRMC+0x260>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	4a69      	ldr	r2, [pc, #420]	; (8001898 <decodeRMC+0x260>)
 80016f2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80016f4:	e004      	b.n	8001700 <decodeRMC+0xc8>
 80016f6:	4b68      	ldr	r3, [pc, #416]	; (8001898 <decodeRMC+0x260>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a66      	ldr	r2, [pc, #408]	; (8001898 <decodeRMC+0x260>)
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b65      	ldr	r3, [pc, #404]	; (8001898 <decodeRMC+0x260>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b2c      	cmp	r3, #44	; 0x2c
 800170e:	d1f2      	bne.n	80016f6 <decodeRMC+0xbe>
	inx++;
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <decodeRMC+0x260>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a60      	ldr	r2, [pc, #384]	; (8001898 <decodeRMC+0x260>)
 8001718:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 800171a:	e004      	b.n	8001726 <decodeRMC+0xee>
 800171c:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <decodeRMC+0x260>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	4a5d      	ldr	r2, [pc, #372]	; (8001898 <decodeRMC+0x260>)
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b5c      	ldr	r3, [pc, #368]	; (8001898 <decodeRMC+0x260>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b2c      	cmp	r3, #44	; 0x2c
 8001734:	d1f2      	bne.n	800171c <decodeRMC+0xe4>
	inx++;
 8001736:	4b58      	ldr	r3, [pc, #352]	; (8001898 <decodeRMC+0x260>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	4a56      	ldr	r2, [pc, #344]	; (8001898 <decodeRMC+0x260>)
 800173e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001740:	e004      	b.n	800174c <decodeRMC+0x114>
 8001742:	4b55      	ldr	r3, [pc, #340]	; (8001898 <decodeRMC+0x260>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a53      	ldr	r2, [pc, #332]	; (8001898 <decodeRMC+0x260>)
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b52      	ldr	r3, [pc, #328]	; (8001898 <decodeRMC+0x260>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b2c      	cmp	r3, #44	; 0x2c
 800175a:	d1f2      	bne.n	8001742 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 800175c:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <decodeRMC+0x260>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4a4d      	ldr	r2, [pc, #308]	; (8001898 <decodeRMC+0x260>)
 8001764:	6013      	str	r3, [r2, #0]
	i=0;
 8001766:	2300      	movs	r3, #0
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	220c      	movs	r2, #12
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f003 ff86 	bl	8005684 <memset>
	while (RMCbuffer[inx] != ',')
 8001778:	e013      	b.n	80017a2 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 800177a:	4b47      	ldr	r3, [pc, #284]	; (8001898 <decodeRMC+0x260>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	7819      	ldrb	r1, [r3, #0]
 8001786:	f107 0208 	add.w	r2, r7, #8
 800178a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178c:	4413      	add	r3, r2
 800178e:	460a      	mov	r2, r1
 8001790:	701a      	strb	r2, [r3, #0]
		i++;
 8001792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001794:	3301      	adds	r3, #1
 8001796:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <decodeRMC+0x260>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a3e      	ldr	r2, [pc, #248]	; (8001898 <decodeRMC+0x260>)
 80017a0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <decodeRMC+0x260>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b2c      	cmp	r3, #44	; 0x2c
 80017b0:	d1e3      	bne.n	800177a <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d056      	beq.n	800186a <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 ff31 	bl	8005628 <atoi>
 80017c6:	4603      	mov	r3, r0
 80017c8:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80017ce:	e002      	b.n	80017d6 <decodeRMC+0x19e>
 80017d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d2:	3301      	adds	r3, #1
 80017d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80017d6:	f107 0208 	add.w	r2, r7, #8
 80017da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b2e      	cmp	r3, #46	; 0x2e
 80017e2:	d1f5      	bne.n	80017d0 <decodeRMC+0x198>
		j++;
 80017e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e6:	3301      	adds	r3, #1
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fd22 	bl	8000238 <strlen>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80017fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017fe:	f107 0208 	add.w	r2, r7, #8
 8001802:	4413      	add	r3, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f003 ff0f 	bl	8005628 <atoi>
 800180a:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 800180c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe6b 	bl	80004ec <__aeabi_i2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800181c:	f7fe fe66 	bl	80004ec <__aeabi_i2d>
 8001820:	4680      	mov	r8, r0
 8001822:	4689      	mov	r9, r1
 8001824:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001826:	f7fe fe61 	bl	80004ec <__aeabi_i2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	ec43 2b11 	vmov	d1, r2, r3
 8001832:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001890 <decodeRMC+0x258>
 8001836:	f003 ffb9 	bl	80057ac <pow>
 800183a:	ec53 2b10 	vmov	r2, r3, d0
 800183e:	4640      	mov	r0, r8
 8001840:	4649      	mov	r1, r9
 8001842:	f7fe ffe7 	bl	8000814 <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4620      	mov	r0, r4
 800184c:	4629      	mov	r1, r5
 800184e:	f7fe fd01 	bl	8000254 <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f961 	bl	8000b20 <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	e003      	b.n	8001872 <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <decodeRMC+0x260>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <decodeRMC+0x260>)
 800187a:	6013      	str	r3, [r2, #0]
	i=0;
 800187c:	2300      	movs	r3, #0
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	220c      	movs	r2, #12
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fefb 	bl	8005684 <memset>
	while (RMCbuffer[inx] != ',')
 800188e:	e019      	b.n	80018c4 <decodeRMC+0x28c>
 8001890:	00000000 	.word	0x00000000
 8001894:	40240000 	.word	0x40240000
 8001898:	20000098 	.word	0x20000098
	{
		buffer[i] = RMCbuffer[inx];
 800189c:	4b7e      	ldr	r3, [pc, #504]	; (8001a98 <decodeRMC+0x460>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	7819      	ldrb	r1, [r3, #0]
 80018a8:	f107 0208 	add.w	r2, r7, #8
 80018ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ae:	4413      	add	r3, r2
 80018b0:	460a      	mov	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
		i++;
 80018b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b6:	3301      	adds	r3, #1
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80018ba:	4b77      	ldr	r3, [pc, #476]	; (8001a98 <decodeRMC+0x460>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a75      	ldr	r2, [pc, #468]	; (8001a98 <decodeRMC+0x460>)
 80018c2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80018c4:	4b74      	ldr	r3, [pc, #464]	; (8001a98 <decodeRMC+0x460>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b2c      	cmp	r3, #44	; 0x2c
 80018d2:	d1e3      	bne.n	800189c <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d056      	beq.n	800198c <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fea0 	bl	8005628 <atoi>
 80018e8:	4603      	mov	r3, r0
 80018ea:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80018f0:	e002      	b.n	80018f8 <decodeRMC+0x2c0>
 80018f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f4:	3301      	adds	r3, #1
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
 80018f8:	f107 0208 	add.w	r2, r7, #8
 80018fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b2e      	cmp	r3, #46	; 0x2e
 8001904:	d1f5      	bne.n	80018f2 <decodeRMC+0x2ba>
		j++;
 8001906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001908:	3301      	adds	r3, #1
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fc91 	bl	8000238 <strlen>
 8001916:	4602      	mov	r2, r0
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 800191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001920:	f107 0208 	add.w	r2, r7, #8
 8001924:	4413      	add	r3, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f003 fe7e 	bl	8005628 <atoi>
 800192c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 800192e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fdda 	bl	80004ec <__aeabi_i2d>
 8001938:	4604      	mov	r4, r0
 800193a:	460d      	mov	r5, r1
 800193c:	69b8      	ldr	r0, [r7, #24]
 800193e:	f7fe fdd5 	bl	80004ec <__aeabi_i2d>
 8001942:	4680      	mov	r8, r0
 8001944:	4689      	mov	r9, r1
 8001946:	69f8      	ldr	r0, [r7, #28]
 8001948:	f7fe fdd0 	bl	80004ec <__aeabi_i2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	ec43 2b11 	vmov	d1, r2, r3
 8001954:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8001a90 <decodeRMC+0x458>
 8001958:	f003 ff28 	bl	80057ac <pow>
 800195c:	ec53 2b10 	vmov	r2, r3, d0
 8001960:	4640      	mov	r0, r8
 8001962:	4649      	mov	r1, r9
 8001964:	f7fe ff56 	bl	8000814 <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4620      	mov	r0, r4
 800196e:	4629      	mov	r1, r5
 8001970:	f7fe fc70 	bl	8000254 <__adddf3>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f8d0 	bl	8000b20 <__aeabi_d2f>
 8001980:	4603      	mov	r3, r0
 8001982:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	e003      	b.n	8001994 <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8001994:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <decodeRMC+0x460>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <decodeRMC+0x460>)
 800199c:	6013      	str	r3, [r2, #0]
	i=0;
 800199e:	2300      	movs	r3, #0
 80019a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	220c      	movs	r2, #12
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 fe6a 	bl	8005684 <memset>
	while (RMCbuffer[inx] != ',')
 80019b0:	e013      	b.n	80019da <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <decodeRMC+0x460>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	7819      	ldrb	r1, [r3, #0]
 80019be:	f107 0208 	add.w	r2, r7, #8
 80019c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c4:	4413      	add	r3, r2
 80019c6:	460a      	mov	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
		i++;
 80019ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019cc:	3301      	adds	r3, #1
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80019d0:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <decodeRMC+0x460>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a30      	ldr	r2, [pc, #192]	; (8001a98 <decodeRMC+0x460>)
 80019d8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <decodeRMC+0x460>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b2c      	cmp	r3, #44	; 0x2c
 80019e8:	d1e3      	bne.n	80019b2 <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fe1a 	bl	8005628 <atoi>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <decodeRMC+0x464>)
 80019f8:	fb82 1203 	smull	r1, r2, r2, r3
 80019fc:	1312      	asrs	r2, r2, #12
 80019fe:	17db      	asrs	r3, r3, #31
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <decodeRMC+0x468>)
 8001a04:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 fe0c 	bl	8005628 <atoi>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <decodeRMC+0x46c>)
 8001a14:	fb82 1203 	smull	r1, r2, r2, r3
 8001a18:	1152      	asrs	r2, r2, #5
 8001a1a:	17db      	asrs	r3, r3, #31
 8001a1c:	1ad2      	subs	r2, r2, r3
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <decodeRMC+0x46c>)
 8001a20:	fb83 1302 	smull	r1, r3, r3, r2
 8001a24:	1159      	asrs	r1, r3, #5
 8001a26:	17d3      	asrs	r3, r2, #31
 8001a28:	1acb      	subs	r3, r1, r3
 8001a2a:	2164      	movs	r1, #100	; 0x64
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <decodeRMC+0x470>)
 8001a34:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fdf4 	bl	8005628 <atoi>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <decodeRMC+0x46c>)
 8001a44:	fb83 1302 	smull	r1, r3, r3, r2
 8001a48:	1159      	asrs	r1, r3, #5
 8001a4a:	17d3      	asrs	r3, r2, #31
 8001a4c:	1acb      	subs	r3, r1, r3
 8001a4e:	2164      	movs	r1, #100	; 0x64
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <decodeRMC+0x474>)
 8001a58:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <decodeRMC+0x468>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <decodeRMC+0x478>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <decodeRMC+0x468>)
 8001a66:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <decodeRMC+0x468>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <decodeRMC+0x470>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <decodeRMC+0x474>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]

	return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3740      	adds	r7, #64	; 0x40
 8001a86:	46bd      	mov	sp, r7
 8001a88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a8c:	f3af 8000 	nop.w
 8001a90:	00000000 	.word	0x00000000
 8001a94:	40240000 	.word	0x40240000
 8001a98:	20000098 	.word	0x20000098
 8001a9c:	68db8bad 	.word	0x68db8bad
 8001aa0:	200000a4 	.word	0x200000a4
 8001aa4:	51eb851f 	.word	0x51eb851f
 8001aa8:	200000a8 	.word	0x200000a8
 8001aac:	200000ac 	.word	0x200000ac
 8001ab0:	200000b0 	.word	0x200000b0

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab8:	f000 fc21 	bl	80022fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abc:	f000 f852 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac0:	f000 f8e2 	bl	8001c88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ac4:	f000 f894 	bl	8001bf0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Wait_for("GGA") == 1){
 8001ac8:	481c      	ldr	r0, [pc, #112]	; (8001b3c <main+0x88>)
 8001aca:	f000 fb67 	bl	800219c <Wait_for>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d115      	bne.n	8001b00 <main+0x4c>

	 	  		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <main+0x8c>)
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	601a      	str	r2, [r3, #0]

	 	  		  Copy_upto("*", GGA);
 8001adc:	4919      	ldr	r1, [pc, #100]	; (8001b44 <main+0x90>)
 8001ade:	481a      	ldr	r0, [pc, #104]	; (8001b48 <main+0x94>)
 8001ae0:	f000 fadc 	bl	800209c <Copy_upto>
	 	  		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8001ae4:	4919      	ldr	r1, [pc, #100]	; (8001b4c <main+0x98>)
 8001ae6:	4817      	ldr	r0, [pc, #92]	; (8001b44 <main+0x90>)
 8001ae8:	f7ff f9fa 	bl	8000ee0 <decodeGGA>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <main+0x46>
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <main+0x9c>)
 8001af4:	2202      	movs	r2, #2
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e002      	b.n	8001b00 <main+0x4c>
	 	  		  else flagGGA = 1;  // 1 indicates the data is invalid
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <main+0x9c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
	   }

	  if (Wait_for("RMC") == 1){
 8001b00:	4814      	ldr	r0, [pc, #80]	; (8001b54 <main+0xa0>)
 8001b02:	f000 fb4b 	bl	800219c <Wait_for>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d1dd      	bne.n	8001ac8 <main+0x14>

	 	  		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <main+0x8c>)
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	601a      	str	r2, [r3, #0]

	 	  		  Copy_upto("*", RMC);
 8001b14:	4910      	ldr	r1, [pc, #64]	; (8001b58 <main+0xa4>)
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <main+0x94>)
 8001b18:	f000 fac0 	bl	800209c <Copy_upto>
	 	  		  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 8001b1c:	490f      	ldr	r1, [pc, #60]	; (8001b5c <main+0xa8>)
 8001b1e:	480e      	ldr	r0, [pc, #56]	; (8001b58 <main+0xa4>)
 8001b20:	f7ff fd8a 	bl	8001638 <decodeRMC>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d103      	bne.n	8001b32 <main+0x7e>
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <main+0xac>)
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e7ca      	b.n	8001ac8 <main+0x14>
	 	  		  else flagRMC = 1;  // 1 indicates the data is invalid
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <main+0xac>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
	  if (Wait_for("GGA") == 1){
 8001b38:	e7c6      	b.n	8001ac8 <main+0x14>
 8001b3a:	bf00      	nop
 8001b3c:	08006740 	.word	0x08006740
 8001b40:	20000004 	.word	0x20000004
 8001b44:	20000120 	.word	0x20000120
 8001b48:	08006744 	.word	0x08006744
 8001b4c:	20000184 	.word	0x20000184
 8001b50:	200000b4 	.word	0x200000b4
 8001b54:	08006748 	.word	0x08006748
 8001b58:	200000bc 	.word	0x200000bc
 8001b5c:	200001b0 	.word	0x200001b0
 8001b60:	200000b8 	.word	0x200000b8

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b098      	sub	sp, #96	; 0x60
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0318 	add.w	r3, r7, #24
 8001b6e:	2248      	movs	r2, #72	; 0x48
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fd86 	bl	8005684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001b86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b8a:	f000 ff87 	bl	8002a9c <HAL_PWREx_ControlVoltageScaling>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b94:	f000 f890 	bl	8001cb8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b98:	2310      	movs	r3, #16
 8001b9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ba4:	2360      	movs	r3, #96	; 0x60
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f001 f803 	bl	8002bbc <HAL_RCC_OscConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001bbc:	f000 f87c 	bl	8001cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fcd1 	bl	8003580 <HAL_RCC_ClockConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001be4:	f000 f868 	bl	8001cb8 <Error_Handler>
  }
}
 8001be8:	bf00      	nop
 8001bea:	3760      	adds	r7, #96	; 0x60
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001bf6:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <MX_USART2_UART_Init+0x94>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001bfc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c38:	4811      	ldr	r0, [pc, #68]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c3a:	f002 fc93 	bl	8004564 <HAL_UART_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c44:	f000 f838 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	480d      	ldr	r0, [pc, #52]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c4c:	f003 fc22 	bl	8005494 <HAL_UARTEx_SetTxFifoThreshold>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c56:	f000 f82f 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4808      	ldr	r0, [pc, #32]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c5e:	f003 fc57 	bl	8005510 <HAL_UARTEx_SetRxFifoThreshold>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c68:	f000 f826 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <MX_USART2_UART_Init+0x90>)
 8001c6e:	f003 fbd8 	bl	8005422 <HAL_UARTEx_DisableFifoMode>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c78:	f000 f81e 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200001c8 	.word	0x200001c8
 8001c84:	40004400 	.word	0x40004400

08001c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_GPIO_Init+0x2c>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <MX_GPIO_Init+0x2c>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_GPIO_Init+0x2c>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <Error_Handler+0x8>
	...

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_MspInit+0x44>)
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cce:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <HAL_MspInit+0x44>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_MspInit+0x44>)
 8001cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_MspInit+0x44>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_MspInit+0x44>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6593      	str	r3, [r2, #88]	; 0x58
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_MspInit+0x44>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cfa:	f000 ff2b 	bl	8002b54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0ae      	sub	sp, #184	; 0xb8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	2294      	movs	r2, #148	; 0x94
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fca9 	bl	8005684 <memset>
  if(huart->Instance==USART2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <HAL_UART_MspInit+0xc0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d142      	bne.n	8001dc2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fef5 	bl	8003b38 <HAL_RCCEx_PeriphCLKConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d54:	f7ff ffb0 	bl	8001cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_UART_MspInit+0xc4>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <HAL_UART_MspInit+0xc4>)
 8001d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d62:	6593      	str	r3, [r2, #88]	; 0x58
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_UART_MspInit+0xc4>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_UART_MspInit+0xc4>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_UART_MspInit+0xc4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_UART_MspInit+0xc4>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d88:	230c      	movs	r3, #12
 8001d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001da0:	2307      	movs	r3, #7
 8001da2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <HAL_UART_MspInit+0xc8>)
 8001dae:	f000 fce7 	bl	8002780 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	203e      	movs	r0, #62	; 0x3e
 8001db8:	f000 fbf3 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dbc:	203e      	movs	r0, #62	; 0x3e
 8001dbe:	f000 fc0a 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	37b8      	adds	r7, #184	; 0xb8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40004400 	.word	0x40004400
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	42020000 	.word	0x42020000

08001dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <NMI_Handler+0x4>

08001dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <MemManage_Handler+0x4>

08001dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <BusFault_Handler+0x4>

08001df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <UsageFault_Handler+0x4>

08001df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <SysTick_Handler+0x20>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <SysTick_Handler+0x18>
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Handler+0x20>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <SysTick_Handler+0x20>)
 8001e36:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e38:	f000 fab8 	bl	80023ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000260 	.word	0x20000260

08001e44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <USART2_IRQHandler+0x10>)
 8001e4a:	f002 fbdb 	bl	8004604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200001c8 	.word	0x200001c8

08001e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001e82:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <SystemCoreClockUpdate+0x144>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <SystemCoreClockUpdate+0x144>)
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e005      	b.n	8001eaa <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001e9e:	4b48      	ldr	r3, [pc, #288]	; (8001fc0 <SystemCoreClockUpdate+0x144>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001eaa:	4a46      	ldr	r2, [pc, #280]	; (8001fc4 <SystemCoreClockUpdate+0x148>)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb4:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <SystemCoreClockUpdate+0x144>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d866      	bhi.n	8001f8e <SystemCoreClockUpdate+0x112>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <SystemCoreClockUpdate+0x4c>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001efd 	.word	0x08001efd
 8001ecc:	08001f8f 	.word	0x08001f8f
 8001ed0:	08001f8f 	.word	0x08001f8f
 8001ed4:	08001f8f 	.word	0x08001f8f
 8001ed8:	08001f05 	.word	0x08001f05
 8001edc:	08001f8f 	.word	0x08001f8f
 8001ee0:	08001f8f 	.word	0x08001f8f
 8001ee4:	08001f8f 	.word	0x08001f8f
 8001ee8:	08001f0d 	.word	0x08001f0d
 8001eec:	08001f8f 	.word	0x08001f8f
 8001ef0:	08001f8f 	.word	0x08001f8f
 8001ef4:	08001f8f 	.word	0x08001f8f
 8001ef8:	08001f15 	.word	0x08001f15
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001efc:	4a32      	ldr	r2, [pc, #200]	; (8001fc8 <SystemCoreClockUpdate+0x14c>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	6013      	str	r3, [r2, #0]
      break;
 8001f02:	e048      	b.n	8001f96 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001f04:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <SystemCoreClockUpdate+0x14c>)
 8001f06:	4a31      	ldr	r2, [pc, #196]	; (8001fcc <SystemCoreClockUpdate+0x150>)
 8001f08:	601a      	str	r2, [r3, #0]
      break;
 8001f0a:	e044      	b.n	8001f96 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <SystemCoreClockUpdate+0x14c>)
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <SystemCoreClockUpdate+0x150>)
 8001f10:	601a      	str	r2, [r3, #0]
      break;
 8001f12:	e040      	b.n	8001f96 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <SystemCoreClockUpdate+0x144>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <SystemCoreClockUpdate+0x144>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d003      	beq.n	8001f3a <SystemCoreClockUpdate+0xbe>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d006      	beq.n	8001f46 <SystemCoreClockUpdate+0xca>
 8001f38:	e00b      	b.n	8001f52 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001f3a:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <SystemCoreClockUpdate+0x150>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	613b      	str	r3, [r7, #16]
          break;
 8001f44:	e00b      	b.n	8001f5e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001f46:	4a21      	ldr	r2, [pc, #132]	; (8001fcc <SystemCoreClockUpdate+0x150>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	613b      	str	r3, [r7, #16]
          break;
 8001f50:	e005      	b.n	8001f5e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	613b      	str	r3, [r7, #16]
          break;
 8001f5c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <SystemCoreClockUpdate+0x144>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <SystemCoreClockUpdate+0x144>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0e5b      	lsrs	r3, r3, #25
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	4a0f      	ldr	r2, [pc, #60]	; (8001fc8 <SystemCoreClockUpdate+0x14c>)
 8001f8a:	6013      	str	r3, [r2, #0]
      break;
 8001f8c:	e003      	b.n	8001f96 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001f8e:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <SystemCoreClockUpdate+0x14c>)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	6013      	str	r3, [r2, #0]
      break;
 8001f94:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <SystemCoreClockUpdate+0x144>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <SystemCoreClockUpdate+0x154>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <SystemCoreClockUpdate+0x14c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <SystemCoreClockUpdate+0x14c>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08006764 	.word	0x08006764
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	0800674c 	.word	0x0800674c

08001fd4 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <Uart_read+0x54>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <Uart_read+0x54>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d102      	bne.n	8001ff4 <Uart_read+0x20>
  {
    return -1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	e013      	b.n	800201c <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <Uart_read+0x54>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <Uart_read+0x54>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <Uart_read+0x54>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <Uart_read+0x54>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002016:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 800201a:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	2000025c 	.word	0x2000025c

0800202c <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <IsDataAvailable+0x30>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002038:	b29a      	uxth	r2, r3
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <IsDataAvailable+0x30>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002042:	b29b      	uxth	r3, r3
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	b29b      	uxth	r3, r3
 8002048:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800204c:	b29b      	uxth	r3, r3
 800204e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	2000025c 	.word	0x2000025c

08002060 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <Uart_peek+0x38>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <Uart_peek+0x38>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002074:	429a      	cmp	r2, r3
 8002076:	d102      	bne.n	800207e <Uart_peek+0x1e>
  {
    return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	e006      	b.n	800208c <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <Uart_peek+0x38>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <Uart_peek+0x38>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800208a:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	2000025c 	.word	0x2000025c

0800209c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe f8c4 	bl	8000238 <strlen>
 80020b0:	4603      	mov	r3, r0
 80020b2:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80020b8:	e01e      	b.n	80020f8 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80020ba:	4b36      	ldr	r3, [pc, #216]	; (8002194 <Copy_upto+0xf8>)
 80020bc:	6819      	ldr	r1, [r3, #0]
 80020be:	4b35      	ldr	r3, [pc, #212]	; (8002194 <Copy_upto+0xf8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	6838      	ldr	r0, [r7, #0]
 80020ca:	4403      	add	r3, r0
 80020cc:	5c8a      	ldrb	r2, [r1, r2]
 80020ce:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80020d0:	4b30      	ldr	r3, [pc, #192]	; (8002194 <Copy_upto+0xf8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <Copy_upto+0xf8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3301      	adds	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80020ec:	bf00      	nop
 80020ee:	f7ff ff9d 	bl	800202c <IsDataAvailable>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0fa      	beq.n	80020ee <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80020f8:	f7ff ffb2 	bl	8002060 <Uart_peek>
 80020fc:	4601      	mov	r1, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4299      	cmp	r1, r3
 8002108:	d1d7      	bne.n	80020ba <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 800210a:	e027      	b.n	800215c <Copy_upto+0xc0>
	{
		so_far++;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002112:	f7ff ff5f 	bl	8001fd4 <Uart_read>
 8002116:	4601      	mov	r1, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	613a      	str	r2, [r7, #16]
 800211e:	461a      	mov	r2, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	b2ca      	uxtb	r2, r1
 8002126:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d101      	bne.n	8002134 <Copy_upto+0x98>
 8002130:	2301      	movs	r3, #1
 8002132:	e02a      	b.n	800218a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <Copy_upto+0xfc>)
 8002136:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800213a:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800213c:	bf00      	nop
 800213e:	f7ff ff75 	bl	800202c <IsDataAvailable>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d103      	bne.n	8002150 <Copy_upto+0xb4>
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <Copy_upto+0xfc>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f6      	bne.n	800213e <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <Copy_upto+0xfc>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <Copy_upto+0xc0>
 8002158:	2300      	movs	r3, #0
 800215a:	e016      	b.n	800218a <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 800215c:	f7ff ff80 	bl	8002060 <Uart_peek>
 8002160:	4601      	mov	r1, r0
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4299      	cmp	r1, r3
 800216c:	d0ce      	beq.n	800210c <Copy_upto+0x70>
	}

	if (so_far != len)
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	429a      	cmp	r2, r3
 8002174:	d002      	beq.n	800217c <Copy_upto+0xe0>
	{
		so_far = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
		goto again;
 800217a:	e79d      	b.n	80020b8 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d101      	bne.n	8002188 <Copy_upto+0xec>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <Copy_upto+0xee>
	else return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2000025c 	.word	0x2000025c
 8002198:	20000260 	.word	0x20000260

0800219c <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe f845 	bl	8000238 <strlen>
 80021ae:	4603      	mov	r3, r0
 80021b0:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80021b2:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <Wait_for+0x108>)
 80021b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021b8:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80021ba:	bf00      	nop
 80021bc:	f7ff ff36 	bl	800202c <IsDataAvailable>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <Wait_for+0x32>
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <Wait_for+0x108>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f6      	bne.n	80021bc <Wait_for+0x20>
	if (timeout == 0) return 0;
 80021ce:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <Wait_for+0x108>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d119      	bne.n	800220a <Wait_for+0x6e>
 80021d6:	2300      	movs	r3, #0
 80021d8:	e060      	b.n	800229c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <Wait_for+0x10c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021e2:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <Wait_for+0x10c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d00b      	beq.n	8002206 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80021ee:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <Wait_for+0x10c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <Wait_for+0x10c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002200:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002204:	e001      	b.n	800220a <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002206:	2300      	movs	r3, #0
 8002208:	e048      	b.n	800229c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800220a:	f7ff ff29 	bl	8002060 <Uart_peek>
 800220e:	4601      	mov	r1, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4299      	cmp	r1, r3
 800221a:	d1de      	bne.n	80021da <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800221c:	e027      	b.n	800226e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002224:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <Wait_for+0x10c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <Wait_for+0x10c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002236:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	429a      	cmp	r2, r3
 8002240:	d101      	bne.n	8002246 <Wait_for+0xaa>
 8002242:	2301      	movs	r3, #1
 8002244:	e02a      	b.n	800229c <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <Wait_for+0x108>)
 8002248:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800224c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800224e:	bf00      	nop
 8002250:	f7ff feec 	bl	800202c <IsDataAvailable>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <Wait_for+0xc6>
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <Wait_for+0x108>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f6      	bne.n	8002250 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <Wait_for+0x108>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <Wait_for+0xd2>
 800226a:	2300      	movs	r3, #0
 800226c:	e016      	b.n	800229c <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800226e:	f7ff fef7 	bl	8002060 <Uart_peek>
 8002272:	4601      	mov	r1, r0
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4299      	cmp	r1, r3
 800227e:	d0ce      	beq.n	800221e <Wait_for+0x82>
	}

	if (so_far != len)
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	d002      	beq.n	800228e <Wait_for+0xf2>
	{
		so_far = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
		goto again;
 800228c:	e791      	b.n	80021b2 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	d101      	bne.n	800229a <Wait_for+0xfe>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <Wait_for+0x100>
	else return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000260 	.word	0x20000260
 80022a8:	2000025c 	.word	0x2000025c

080022ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022b0:	f7ff fdd2 	bl	8001e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022b6:	e003      	b.n	80022c0 <LoopCopyDataInit>

080022b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022be:	3104      	adds	r1, #4

080022c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022c0:	480a      	ldr	r0, [pc, #40]	; (80022ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022c8:	d3f6      	bcc.n	80022b8 <CopyDataInit>
	ldr	r2, =_sbss
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80022cc:	e002      	b.n	80022d4 <LoopFillZerobss>

080022ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022d0:	f842 3b04 	str.w	r3, [r2], #4

080022d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <LoopForever+0x16>)
	cmp	r2, r3
 80022d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022d8:	d3f9      	bcc.n	80022ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022da:	f003 f9af 	bl	800563c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022de:	f7ff fbe9 	bl	8001ab4 <main>

080022e2 <LoopForever>:

LoopForever:
    b LoopForever
 80022e2:	e7fe      	b.n	80022e2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80022e4:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 80022e8:	08006920 	.word	0x08006920
	ldr	r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022f0:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80022f4:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80022f8:	20000268 	.word	0x20000268

080022fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC1_2_IRQHandler>

080022fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002308:	2004      	movs	r0, #4
 800230a:	f000 f93f 	bl	800258c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800230e:	f7ff fdb5 	bl	8001e7c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002312:	2007      	movs	r0, #7
 8002314:	f000 f80e 	bl	8002334 <HAL_InitTick>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	e001      	b.n	8002328 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002324:	f7ff fcce 	bl	8001cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002328:	79fb      	ldrb	r3, [r7, #7]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_InitTick+0x6c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d023      	beq.n	8002390 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_InitTick+0x70>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_InitTick+0x6c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f947 	bl	80025f2 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b07      	cmp	r3, #7
 800236e:	d809      	bhi.n	8002384 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002370:	2200      	movs	r2, #0
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f000 f913 	bl	80025a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_InitTick+0x74>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e007      	b.n	8002394 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e004      	b.n	8002394 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e001      	b.n	8002394 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000010 	.word	0x20000010
 80023a4:	20000008 	.word	0x20000008
 80023a8:	2000000c 	.word	0x2000000c

080023ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_IncTick+0x20>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x24>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <HAL_IncTick+0x24>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000010 	.word	0x20000010
 80023d0:	20000264 	.word	0x20000264

080023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_GetTick+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000264 	.word	0x20000264

080023ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0b      	blt.n	800247a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <__NVIC_EnableIRQ+0x38>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db0a      	blt.n	80024b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	490c      	ldr	r1, [pc, #48]	; (80024d8 <__NVIC_SetPriority+0x4c>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	0152      	lsls	r2, r2, #5
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	440b      	add	r3, r1
 80024b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b4:	e00a      	b.n	80024cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <__NVIC_SetPriority+0x50>)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	3b04      	subs	r3, #4
 80024c4:	0152      	lsls	r2, r2, #5
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	440b      	add	r3, r1
 80024ca:	761a      	strb	r2, [r3, #24]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f1c3 0307 	rsb	r3, r3, #7
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	bf28      	it	cs
 80024fe:	2303      	movcs	r3, #3
 8002500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3303      	adds	r3, #3
 8002506:	2b06      	cmp	r3, #6
 8002508:	d902      	bls.n	8002510 <NVIC_EncodePriority+0x30>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3b04      	subs	r3, #4
 800250e:	e000      	b.n	8002512 <NVIC_EncodePriority+0x32>
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002528:	f04f 31ff 	mov.w	r1, #4294967295
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43d9      	mvns	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	4313      	orrs	r3, r2
         );
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002558:	d301      	bcc.n	800255e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <SysTick_Config+0x40>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002566:	2107      	movs	r1, #7
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f7ff ff8e 	bl	800248c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SysTick_Config+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SysTick_Config+0x40>)
 8002578:	2207      	movs	r2, #7
 800257a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010

0800258c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ff29 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff40 	bl	8002434 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff90 	bl	80024e0 <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5f 	bl	800248c <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff33 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa4 	bl	8002548 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d008      	beq.n	8002634 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2204      	movs	r2, #4
 8002626:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e040      	b.n	80026b6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 020e 	bic.w	r2, r2, #14
 8002642:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002652:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	f003 021c 	and.w	r2, r3, #28
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002680:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002698:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80026a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d005      	beq.n	80026e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2204      	movs	r2, #4
 80026de:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e047      	b.n	8002776 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 020e 	bic.w	r2, r2, #14
 80026f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002714:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	f003 021c 	and.w	r2, r3, #28
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002732:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00c      	beq.n	8002756 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800274a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002754:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
    }
  }
  return status;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800278e:	e158      	b.n	8002a42 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 814a 	beq.w	8002a3c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d00b      	beq.n	80027c8 <HAL_GPIO_Init+0x48>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d007      	beq.n	80027c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027bc:	2b11      	cmp	r3, #17
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b12      	cmp	r3, #18
 80027c6:	d130      	bne.n	800282a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027fe:	2201      	movs	r2, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 0201 	and.w	r2, r3, #1
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0xea>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b12      	cmp	r3, #18
 8002868:	d123      	bne.n	80028b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	6939      	ldr	r1, [r7, #16]
 80028ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0203 	and.w	r2, r3, #3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80a4 	beq.w	8002a3c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80028f4:	4a5a      	ldr	r2, [pc, #360]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3318      	adds	r3, #24
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	220f      	movs	r2, #15
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x2e4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d025      	beq.n	800296c <HAL_GPIO_Init+0x1ec>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_GPIO_Init+0x2e8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d01f      	beq.n	8002968 <HAL_GPIO_Init+0x1e8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_GPIO_Init+0x2ec>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d019      	beq.n	8002964 <HAL_GPIO_Init+0x1e4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x2f0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_GPIO_Init+0x1e0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x2f4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00d      	beq.n	800295c <HAL_GPIO_Init+0x1dc>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a4d      	ldr	r2, [pc, #308]	; (8002a78 <HAL_GPIO_Init+0x2f8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <HAL_GPIO_Init+0x1d8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_GPIO_Init+0x2fc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_GPIO_Init+0x1d4>
 8002950:	2306      	movs	r3, #6
 8002952:	e00c      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 8002954:	2307      	movs	r3, #7
 8002956:	e00a      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 8002958:	2305      	movs	r3, #5
 800295a:	e008      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 800295c:	2304      	movs	r3, #4
 800295e:	e006      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 8002960:	2303      	movs	r3, #3
 8002962:	e004      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 8002964:	2302      	movs	r3, #2
 8002966:	e002      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 800296c:	2300      	movs	r3, #0
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	f002 0203 	and.w	r2, r2, #3
 8002974:	00d2      	lsls	r2, r2, #3
 8002976:	4093      	lsls	r3, r2
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800297e:	4938      	ldr	r1, [pc, #224]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	3318      	adds	r3, #24
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 800298e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029b2:	4a2b      	ldr	r2, [pc, #172]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 80029bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029e0:	4a1f      	ldr	r2, [pc, #124]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_GPIO_Init+0x2e0>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f ae9f 	bne.w	8002790 <HAL_GPIO_Init+0x10>
  }
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	4002f400 	.word	0x4002f400
 8002a64:	42020000 	.word	0x42020000
 8002a68:	42020400 	.word	0x42020400
 8002a6c:	42020800 	.word	0x42020800
 8002a70:	42020c00 	.word	0x42020c00
 8002a74:	42021000 	.word	0x42021000
 8002a78:	42021400 	.word	0x42021400
 8002a7c:	42021800 	.word	0x42021800

08002a80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40007000 	.word	0x40007000

08002a9c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aac:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002aae:	f000 f861 	bl	8002b74 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab8:	d101      	bne.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e03e      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aca:	d101      	bne.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e035      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d101      	bne.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e02f      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002ae4:	4917      	ldr	r1, [pc, #92]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	09db      	lsrs	r3, r3, #7
 8002afa:	2232      	movs	r2, #50	; 0x32
 8002afc:	fb02 f303 	mul.w	r3, r2, r3
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	08db      	lsrs	r3, r3, #3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0c:	e002      	b.n	8002b14 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b20:	d102      	bne.n	8002b28 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f2      	bne.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b34:	d101      	bne.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e000      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40007000 	.word	0x40007000
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002b50:	cccccccd 	.word	0xcccccccd

08002b54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b62:	6093      	str	r3, [r2, #8]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40007000 	.word	0x40007000

08002b74 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	e00a      	b.n	8002ba8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	e001      	b.n	8002ba8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002ba8:	687b      	ldr	r3, [r7, #4]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40007000 	.word	0x40007000

08002bbc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f000 bcd0 	b.w	8003570 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd0:	4ba3      	ldr	r3, [pc, #652]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bda:	4ba1      	ldr	r3, [pc, #644]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80e9 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <HAL_RCC_OscConfig+0x4a>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	f040 8083 	bne.w	8002d06 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d17f      	bne.n	8002d06 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c06:	4b96      	ldr	r3, [pc, #600]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d006      	beq.n	8002c20 <HAL_RCC_OscConfig+0x64>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f000 bca8 	b.w	8003570 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c24:	4b8e      	ldr	r3, [pc, #568]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <HAL_RCC_OscConfig+0x7e>
 8002c30:	4b8b      	ldr	r3, [pc, #556]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c38:	e005      	b.n	8002c46 <HAL_RCC_OscConfig+0x8a>
 8002c3a:	4b89      	ldr	r3, [pc, #548]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d224      	bcs.n	8002c94 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fe96 	bl	8003980 <RCC_SetFlashLatencyFromMSIRange>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f000 bc88 	b.w	8003570 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c60:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7e      	ldr	r2, [pc, #504]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b7c      	ldr	r3, [pc, #496]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	4979      	ldr	r1, [pc, #484]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c7e:	4b78      	ldr	r3, [pc, #480]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	4974      	ldr	r1, [pc, #464]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
 8002c92:	e026      	b.n	8002ce2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c94:	4b72      	ldr	r3, [pc, #456]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a71      	ldr	r2, [pc, #452]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	496c      	ldr	r1, [pc, #432]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cb2:	4b6b      	ldr	r3, [pc, #428]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	4967      	ldr	r1, [pc, #412]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fe55 	bl	8003980 <RCC_SetFlashLatencyFromMSIRange>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f000 bc47 	b.w	8003570 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ce2:	f000 fe11 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a5e      	ldr	r2, [pc, #376]	; (8002e64 <HAL_RCC_OscConfig+0x2a8>)
 8002cea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fb1f 	bl	8002334 <HAL_InitTick>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d060      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	f000 bc35 	b.w	8003570 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d039      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d0e:	4b54      	ldr	r3, [pc, #336]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d1a:	f7ff fb5b 	bl	80023d4 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d20:	e00f      	b.n	8002d42 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d22:	f7ff fb57 	bl	80023d4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d908      	bls.n	8002d42 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d30:	4b4b      	ldr	r3, [pc, #300]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	f000 bc17 	b.w	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0e9      	beq.n	8002d22 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d4e:	4b44      	ldr	r3, [pc, #272]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a43      	ldr	r2, [pc, #268]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d54:	f043 0308 	orr.w	r3, r3, #8
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	493e      	ldr	r1, [pc, #248]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	4939      	ldr	r1, [pc, #228]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
 8002d80:	e020      	b.n	8002dc4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d82:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a36      	ldr	r2, [pc, #216]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d8e:	f7ff fb21 	bl	80023d4 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d94:	e00e      	b.n	8002db4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d96:	f7ff fb1d 	bl	80023d4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d907      	bls.n	8002db4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002da4:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e3dd      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002db4:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ea      	bne.n	8002d96 <HAL_RCC_OscConfig+0x1da>
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d07e      	beq.n	8002ece <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d005      	beq.n	8002de2 <HAL_RCC_OscConfig+0x226>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d10e      	bne.n	8002dfa <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d06e      	beq.n	8002ecc <HAL_RCC_OscConfig+0x310>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d16a      	bne.n	8002ecc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e3ba      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x256>
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	e01d      	b.n	8002e4e <HAL_RCC_OscConfig+0x292>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCC_OscConfig+0x27a>
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e00b      	b.n	8002e4e <HAL_RCC_OscConfig+0x292>
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <HAL_RCC_OscConfig+0x2a4>)
 8002e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d020      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7ff fabd 	bl	80023d4 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x2ce>
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	20000008 	.word	0x20000008
 8002e68:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7ff fab2 	bl	80023d4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d907      	bls.n	8002e8a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e7a:	4b9f      	ldr	r3, [pc, #636]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e372      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8a:	4b9b      	ldr	r3, [pc, #620]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ea      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2b0>
 8002e96:	e01a      	b.n	8002ece <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7ff fa9c 	bl	80023d4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e9e:	e00e      	b.n	8002ebe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7ff fa98 	bl	80023d4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d907      	bls.n	8002ebe <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eae:	4b92      	ldr	r3, [pc, #584]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e358      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ebe:	4b8e      	ldr	r3, [pc, #568]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1ea      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2e4>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d06c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_OscConfig+0x330>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d119      	bne.n	8002f1a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d116      	bne.n	8002f1a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eec:	4b82      	ldr	r3, [pc, #520]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_OscConfig+0x348>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e335      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b7c      	ldr	r3, [pc, #496]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	4979      	ldr	r1, [pc, #484]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f18:	e04c      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d029      	beq.n	8002f76 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f22:	4b75      	ldr	r3, [pc, #468]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a74      	ldr	r2, [pc, #464]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7ff fa51 	bl	80023d4 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f34:	e00e      	b.n	8002f54 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f36:	f7ff fa4d 	bl	80023d4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d907      	bls.n	8002f54 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f44:	4b6c      	ldr	r3, [pc, #432]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e30d      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ea      	beq.n	8002f36 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	4962      	ldr	r1, [pc, #392]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	e01e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b60      	ldr	r3, [pc, #384]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5f      	ldr	r2, [pc, #380]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7ff fa27 	bl	80023d4 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7ff fa23 	bl	80023d4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d907      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f98:	4b57      	ldr	r3, [pc, #348]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e2e3      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ea      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d05f      	beq.n	8003080 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d038      	beq.n	800303a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d108      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002fd0:	4b49      	ldr	r3, [pc, #292]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	4a48      	ldr	r2, [pc, #288]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002fd8:	f023 0310 	bic.w	r3, r3, #16
 8002fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002fe0:	e007      	b.n	8002ff2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002fe2:	4b45      	ldr	r3, [pc, #276]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe8:	4a43      	ldr	r2, [pc, #268]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002fea:	f043 0310 	orr.w	r3, r3, #16
 8002fee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff8:	4a3f      	ldr	r2, [pc, #252]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003002:	f7ff f9e7 	bl	80023d4 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003008:	e00f      	b.n	800302a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300a:	f7ff f9e3 	bl	80023d4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b07      	cmp	r3, #7
 8003016:	d908      	bls.n	800302a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003018:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e2a2      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800302a:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0e8      	beq.n	800300a <HAL_RCC_OscConfig+0x44e>
 8003038:	e022      	b.n	8003080 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303a:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 800303c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003040:	4a2d      	ldr	r2, [pc, #180]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304a:	f7ff f9c3 	bl	80023d4 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003050:	e00f      	b.n	8003072 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003052:	f7ff f9bf 	bl	80023d4 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b07      	cmp	r3, #7
 800305e:	d908      	bls.n	8003072 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e27e      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8003074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e8      	bne.n	8003052 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8131 	beq.w	80032f0 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10d      	bne.n	80030ba <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6593      	str	r3, [r2, #88]	; 0x58
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_RCC_OscConfig+0x53c>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_RCC_OscConfig+0x540>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d122      	bne.n	800310c <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <HAL_RCC_OscConfig+0x540>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <HAL_RCC_OscConfig+0x540>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7ff f97f 	bl	80023d4 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d8:	e012      	b.n	8003100 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7ff f97b 	bl	80023d4 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d90b      	bls.n	8003100 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <HAL_RCC_OscConfig+0x540>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e23b      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003100:	4bb8      	ldr	r3, [pc, #736]	; (80033e4 <HAL_RCC_OscConfig+0x828>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0e6      	beq.n	80030da <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01f      	beq.n	8003158 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003124:	4bb0      	ldr	r3, [pc, #704]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	4aaf      	ldr	r2, [pc, #700]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003134:	4bac      	ldr	r3, [pc, #688]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	4aab      	ldr	r2, [pc, #684]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003144:	e018      	b.n	8003178 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003146:	4ba8      	ldr	r3, [pc, #672]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	4aa6      	ldr	r2, [pc, #664]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003156:	e00f      	b.n	8003178 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003158:	4ba3      	ldr	r3, [pc, #652]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	4aa2      	ldr	r2, [pc, #648]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003168:	4b9f      	ldr	r3, [pc, #636]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	4a9e      	ldr	r2, [pc, #632]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d068      	beq.n	8003252 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7ff f928 	bl	80023d4 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003186:	e011      	b.n	80031ac <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7ff f924 	bl	80023d4 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d908      	bls.n	80031ac <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319a:	4b93      	ldr	r3, [pc, #588]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e1e1      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ac:	4b8e      	ldr	r3, [pc, #568]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0e6      	beq.n	8003188 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d022      	beq.n	800320c <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031c6:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	4a86      	ldr	r2, [pc, #536]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80031ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031d6:	e011      	b.n	80031fc <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7ff f8fc 	bl	80023d4 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d908      	bls.n	80031fc <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031ea:	4b7f      	ldr	r3, [pc, #508]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1b9      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031fc:	4b7a      	ldr	r3, [pc, #488]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0e6      	beq.n	80031d8 <HAL_RCC_OscConfig+0x61c>
 800320a:	e068      	b.n	80032de <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800320c:	4b76      	ldr	r3, [pc, #472]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	4a75      	ldr	r2, [pc, #468]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800321c:	e011      	b.n	8003242 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7ff f8d9 	bl	80023d4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f241 3288 	movw	r2, #5000	; 0x1388
 800322c:	4293      	cmp	r3, r2
 800322e:	d908      	bls.n	8003242 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003230:	4b6d      	ldr	r3, [pc, #436]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e196      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003242:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e6      	bne.n	800321e <HAL_RCC_OscConfig+0x662>
 8003250:	e045      	b.n	80032de <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7ff f8bf 	bl	80023d4 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003258:	e011      	b.n	800327e <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7ff f8bb 	bl	80023d4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d908      	bls.n	800327e <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800326c:	4b5e      	ldr	r3, [pc, #376]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e178      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800327e:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e6      	bne.n	800325a <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800328c:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d021      	beq.n	80032de <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800329a:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	4a51      	ldr	r2, [pc, #324]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80032a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032aa:	e011      	b.n	80032d0 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7ff f892 	bl	80023d4 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d908      	bls.n	80032d0 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032be:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e14f      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032d0:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e6      	bne.n	80032ac <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032de:	7ffb      	ldrb	r3, [r7, #31]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e4:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	4a3f      	ldr	r2, [pc, #252]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80032ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d04a      	beq.n	8003392 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	d023      	beq.n	800334c <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003304:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800330a:	4a37      	ldr	r2, [pc, #220]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7ff f85e 	bl	80023d4 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800331a:	e00f      	b.n	800333c <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800331c:	f7ff f85a 	bl	80023d4 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d908      	bls.n	800333c <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800332c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e119      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800333e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0e8      	beq.n	800331c <HAL_RCC_OscConfig+0x760>
 800334a:	e022      	b.n	8003392 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800334c:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800334e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003352:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335c:	f7ff f83a 	bl	80023d4 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003362:	e00f      	b.n	8003384 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003364:	f7ff f836 	bl	80023d4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d908      	bls.n	8003384 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0f5      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003384:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e8      	bne.n	8003364 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80e9 	beq.w	800356e <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b0c      	cmp	r3, #12
 80033a6:	f000 80a3 	beq.w	80034f0 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d16a      	bne.n	8003488 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a0c      	ldr	r2, [pc, #48]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80033b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7ff f809 	bl	80023d4 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c4:	e012      	b.n	80033ec <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7ff f805 	bl	80023d4 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d90b      	bls.n	80033ec <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <HAL_RCC_OscConfig+0x82c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e0c5      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
 80033e4:	40007000 	.word	0x40007000
 80033e8:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ec:	4b62      	ldr	r3, [pc, #392]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e6      	bne.n	80033c6 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f8:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	4b5f      	ldr	r3, [pc, #380]	; (800357c <HAL_RCC_OscConfig+0x9c0>)
 80033fe:	4013      	ands	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003408:	3a01      	subs	r2, #1
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	4311      	orrs	r1, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003412:	0212      	lsls	r2, r2, #8
 8003414:	4311      	orrs	r1, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800341a:	0852      	lsrs	r2, r2, #1
 800341c:	3a01      	subs	r2, #1
 800341e:	0552      	lsls	r2, r2, #21
 8003420:	4311      	orrs	r1, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003426:	0852      	lsrs	r2, r2, #1
 8003428:	3a01      	subs	r2, #1
 800342a:	0652      	lsls	r2, r2, #25
 800342c:	4311      	orrs	r1, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003432:	06d2      	lsls	r2, r2, #27
 8003434:	430a      	orrs	r2, r1
 8003436:	4950      	ldr	r1, [pc, #320]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800343c:	4b4e      	ldr	r3, [pc, #312]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a4d      	ldr	r2, [pc, #308]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003446:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003448:	4b4b      	ldr	r3, [pc, #300]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a4a      	ldr	r2, [pc, #296]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 800344e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003452:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe ffbe 	bl	80023d4 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345a:	e00e      	b.n	800347a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe ffba 	bl	80023d4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d907      	bls.n	800347a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346a:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e07a      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0ea      	beq.n	800345c <HAL_RCC_OscConfig+0x8a0>
 8003486:	e072      	b.n	800356e <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 800348e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003492:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003494:	4b38      	ldr	r3, [pc, #224]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034a0:	4b35      	ldr	r3, [pc, #212]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a34      	ldr	r2, [pc, #208]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034ac:	4b32      	ldr	r3, [pc, #200]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a31      	ldr	r2, [pc, #196]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 80034b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe ff8a 	bl	80023d4 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c2:	e00e      	b.n	80034e2 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fe ff86 	bl	80023d4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d907      	bls.n	80034e2 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d2:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e046      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e2:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ea      	bne.n	80034c4 <HAL_RCC_OscConfig+0x908>
 80034ee:	e03e      	b.n	800356e <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e039      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80034fc:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <HAL_RCC_OscConfig+0x9bc>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	429a      	cmp	r2, r3
 800350e:	d12c      	bne.n	800356a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	3b01      	subs	r3, #1
 800351c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d123      	bne.n	800356a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d11b      	bne.n	800356a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d113      	bne.n	800356a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d109      	bne.n	800356a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	019f800c 	.word	0x019f800c

08003580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e10d      	b.n	80037b4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b88      	ldr	r3, [pc, #544]	; (80037bc <HAL_RCC_ClockConfig+0x23c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d910      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b85      	ldr	r3, [pc, #532]	; (80037bc <HAL_RCC_ClockConfig+0x23c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 020f 	bic.w	r2, r3, #15
 80035ae:	4983      	ldr	r1, [pc, #524]	; (80037bc <HAL_RCC_ClockConfig+0x23c>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b81      	ldr	r3, [pc, #516]	; (80037bc <HAL_RCC_ClockConfig+0x23c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0f5      	b.n	80037b4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8094 	beq.w	80036fe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d134      	bne.n	8003648 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035de:	4b78      	ldr	r3, [pc, #480]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0e2      	b.n	80037b4 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035ee:	f000 fa2b 	bl	8003a48 <RCC_GetSysClockFreqFromPLLSource>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4a73      	ldr	r2, [pc, #460]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d956      	bls.n	80036aa <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035fc:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003608:	4b6d      	ldr	r3, [pc, #436]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003610:	4a6b      	ldr	r2, [pc, #428]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 8003612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003616:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e045      	b.n	80036aa <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d03f      	beq.n	80036aa <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800362e:	2b00      	cmp	r3, #0
 8003630:	d13b      	bne.n	80036aa <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363a:	4a61      	ldr	r2, [pc, #388]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800363c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003640:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e030      	b.n	80036aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d107      	bne.n	8003660 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003650:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d115      	bne.n	8003688 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0a9      	b.n	80037b4 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003668:	4b55      	ldr	r3, [pc, #340]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e09d      	b.n	80037b4 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003678:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e095      	b.n	80037b4 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003688:	f000 f8a2 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 800368c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4a4c      	ldr	r2, [pc, #304]	; (80037c4 <HAL_RCC_ClockConfig+0x244>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d909      	bls.n	80036aa <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800369e:	4a48      	ldr	r2, [pc, #288]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80036a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036aa:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 0203 	bic.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4942      	ldr	r1, [pc, #264]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fe fe8a 	bl	80023d4 <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	e013      	b.n	80036ec <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c4:	f7fe fe86 	bl	80023d4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d90a      	bls.n	80036ec <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b3a      	ldr	r3, [pc, #232]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e063      	b.n	80037b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ec:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 020c 	and.w	r2, r3, #12
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d1e2      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	492a      	ldr	r1, [pc, #168]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]
 800371c:	e008      	b.n	8003730 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d105      	bne.n	8003730 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003724:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800372a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372e:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCC_ClockConfig+0x23c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d210      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_RCC_ClockConfig+0x23c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 020f 	bic.w	r2, r3, #15
 8003746:	491d      	ldr	r1, [pc, #116]	; (80037bc <HAL_RCC_ClockConfig+0x23c>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_RCC_ClockConfig+0x23c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e029      	b.n	80037b4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4911      	ldr	r1, [pc, #68]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800378a:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4909      	ldr	r1, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x240>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800379e:	f000 f8b3 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <HAL_RCC_ClockConfig+0x248>)
 80037a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_RCC_ClockConfig+0x24c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fdc1 	bl	8002334 <HAL_InitTick>
 80037b2:	4603      	mov	r3, r0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40021000 	.word	0x40021000
 80037c4:	04c4b400 	.word	0x04c4b400
 80037c8:	20000008 	.word	0x20000008
 80037cc:	2000000c 	.word	0x2000000c

080037d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	2300      	movs	r3, #0
 80037dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e8:	4b44      	ldr	r3, [pc, #272]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x34>
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d121      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d11e      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003804:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003810:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e005      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003820:	4b36      	ldr	r3, [pc, #216]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800382c:	4a34      	ldr	r2, [pc, #208]	; (8003900 <HAL_RCC_GetSysClockFreq+0x130>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003834:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d102      	bne.n	800384e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_RCC_GetSysClockFreq+0x134>)
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e004      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d101      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_GetSysClockFreq+0x134>)
 8003856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d146      	bne.n	80038ec <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800385e:	4b27      	ldr	r3, [pc, #156]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	3301      	adds	r3, #1
 8003874:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d003      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0xb4>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b03      	cmp	r3, #3
 8003880:	d00d      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0xce>
 8003882:	e019      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003884:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_RCC_GetSysClockFreq+0x134>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 800388e:	68d2      	ldr	r2, [r2, #12]
 8003890:	0a12      	lsrs	r2, r2, #8
 8003892:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	617b      	str	r3, [r7, #20]
        break;
 800389c:	e019      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800389e:	4a19      	ldr	r2, [pc, #100]	; (8003904 <HAL_RCC_GetSysClockFreq+0x134>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	0a12      	lsrs	r2, r2, #8
 80038ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038b0:	fb02 f303 	mul.w	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
        break;
 80038b6:	e00c      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80038c2:	68d2      	ldr	r2, [r2, #12]
 80038c4:	0a12      	lsrs	r2, r2, #8
 80038c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	617b      	str	r3, [r7, #20]
        break;
 80038d0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_RCC_GetSysClockFreq+0x12c>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	0e5b      	lsrs	r3, r3, #25
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	3301      	adds	r3, #1
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038ec:	69bb      	ldr	r3, [r7, #24]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3724      	adds	r7, #36	; 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	08006764 	.word	0x08006764
 8003904:	00f42400 	.word	0x00f42400

08003908 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800390c:	f7ff ff60 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_GetHCLKFreq+0x20>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	4903      	ldr	r1, [pc, #12]	; (800392c <HAL_RCC_GetHCLKFreq+0x24>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	0800674c 	.word	0x0800674c

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff ffe8 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	0800675c 	.word	0x0800675c

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffd4 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0adb      	lsrs	r3, r3, #11
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	0800675c 	.word	0x0800675c

08003980 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800398c:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003998:	f7ff f872 	bl	8002a80 <HAL_PWREx_GetVoltageRange>
 800399c:	6138      	str	r0, [r7, #16]
 800399e:	e014      	b.n	80039ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039a0:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	6593      	str	r3, [r2, #88]	; 0x58
 80039ac:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039b8:	f7ff f862 	bl	8002a80 <HAL_PWREx_GetVoltageRange>
 80039bc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80039c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d6:	d10b      	bne.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	d919      	bls.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2ba0      	cmp	r3, #160	; 0xa0
 80039e2:	d902      	bls.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039e4:	2302      	movs	r3, #2
 80039e6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80039e8:	e013      	b.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039ea:	2301      	movs	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80039ee:	e010      	b.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b80      	cmp	r3, #128	; 0x80
 80039f4:	d902      	bls.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039f6:	2303      	movs	r3, #3
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e00a      	b.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b80      	cmp	r3, #128	; 0x80
 8003a00:	d102      	bne.n	8003a08 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a02:	2302      	movs	r3, #2
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e004      	b.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b70      	cmp	r3, #112	; 0x70
 8003a0c:	d101      	bne.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a0e:	2301      	movs	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	490a      	ldr	r1, [pc, #40]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003a22:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40022000 	.word	0x40022000

08003a48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d118      	bne.n	8003a90 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a5e:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d107      	bne.n	8003a7a <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a6a:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e005      	b.n	8003a86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003a86:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a90:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d003      	beq.n	8003ab6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d00d      	beq.n	8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8003ab4:	e019      	b.n	8003aea <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	0a12      	lsrs	r2, r2, #8
 8003ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	613b      	str	r3, [r7, #16]
      break;
 8003ace:	e019      	b.n	8003b04 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ad0:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003ada:	68d2      	ldr	r2, [r2, #12]
 8003adc:	0a12      	lsrs	r2, r2, #8
 8003ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	613b      	str	r3, [r7, #16]
      break;
 8003ae8:	e00c      	b.n	8003b04 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003af4:	68d2      	ldr	r2, [r2, #12]
 8003af6:	0a12      	lsrs	r2, r2, #8
 8003af8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	613b      	str	r3, [r7, #16]
      break;
 8003b02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003b04:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	0e5b      	lsrs	r3, r3, #25
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003b1e:	683b      	ldr	r3, [r7, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	08006764 	.word	0x08006764
 8003b34:	00f42400 	.word	0x00f42400

08003b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b44:	2300      	movs	r3, #0
 8003b46:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d040      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b58:	2b80      	cmp	r3, #128	; 0x80
 8003b5a:	d02a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d825      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b60:	2b60      	cmp	r3, #96	; 0x60
 8003b62:	d026      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d821      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d006      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d81d      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d009      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d010      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b78:	e018      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b7a:	4b8f      	ldr	r3, [pc, #572]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	4a8e      	ldr	r2, [pc, #568]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b86:	e015      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fb56 	bl	8004240 <RCCEx_PLLSAI1_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b98:	e00c      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3320      	adds	r3, #32
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fc33 	bl	800440c <RCCEx_PLLSAI2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	77fb      	strb	r3, [r7, #31]
        break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb4:	7ffb      	ldrb	r3, [r7, #31]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bba:	4b7f      	ldr	r3, [pc, #508]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc8:	497b      	ldr	r1, [pc, #492]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003bd0:	e001      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	7ffb      	ldrb	r3, [r7, #31]
 8003bd4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d047      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d030      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf0:	d82a      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf6:	d02a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bfc:	d824      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c02:	d008      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c08:	d81e      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c12:	d010      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c14:	e018      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c16:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	4a67      	ldr	r2, [pc, #412]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c22:	e015      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fb08 	bl	8004240 <RCCEx_PLLSAI1_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c34:	e00c      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3320      	adds	r3, #32
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fbe5 	bl	800440c <RCCEx_PLLSAI2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c46:	e003      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	77fb      	strb	r3, [r7, #31]
        break;
 8003c4c:	e000      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c50:	7ffb      	ldrb	r3, [r7, #31]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c56:	4b58      	ldr	r3, [pc, #352]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4954      	ldr	r1, [pc, #336]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c6c:	e001      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	7ffb      	ldrb	r3, [r7, #31]
 8003c70:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80ab 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c80:	2300      	movs	r3, #0
 8003c82:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10d      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c90:	4b49      	ldr	r3, [pc, #292]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	4a48      	ldr	r2, [pc, #288]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c9c:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cac:	4b43      	ldr	r3, [pc, #268]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a42      	ldr	r2, [pc, #264]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb8:	f7fe fb8c 	bl	80023d4 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cbe:	e00f      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc0:	f7fe fb88 	bl	80023d4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d908      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cce:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003cde:	e006      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce0:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0e9      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003cee:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003cf0:	7ffb      	ldrb	r3, [r7, #31]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d164      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cf6:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d00:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d019      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d30:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01f      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fe fb3f 	bl	80023d4 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d58:	e012      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fe fb3b 	bl	80023d4 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d909      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003d7e:	e007      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0e5      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003d90:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003d92:	7ffb      	ldrb	r3, [r7, #31]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10c      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003db0:	e008      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
 8003db4:	77bb      	strb	r3, [r7, #30]
 8003db6:	e005      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	7ffb      	ldrb	r3, [r7, #31]
 8003dc2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dca:	4baf      	ldr	r3, [pc, #700]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	4aae      	ldr	r2, [pc, #696]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de2:	4ba9      	ldr	r3, [pc, #676]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	f023 0203 	bic.w	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	49a5      	ldr	r1, [pc, #660]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e04:	4ba0      	ldr	r3, [pc, #640]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	f023 020c 	bic.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	499d      	ldr	r1, [pc, #628]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e26:	4b98      	ldr	r3, [pc, #608]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	4994      	ldr	r1, [pc, #592]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e48:	4b8f      	ldr	r3, [pc, #572]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	498c      	ldr	r1, [pc, #560]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e6a:	4b87      	ldr	r3, [pc, #540]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	4983      	ldr	r1, [pc, #524]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e8c:	4b7e      	ldr	r3, [pc, #504]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9a:	497b      	ldr	r1, [pc, #492]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eae:	4b76      	ldr	r3, [pc, #472]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	4972      	ldr	r1, [pc, #456]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ed0:	4b6d      	ldr	r3, [pc, #436]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ede:	496a      	ldr	r1, [pc, #424]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003ef2:	4b65      	ldr	r3, [pc, #404]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f00:	4961      	ldr	r1, [pc, #388]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d031      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f1c:	d00e      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f22:	d814      	bhi.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d015      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f2c:	d10f      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f2e:	4b56      	ldr	r3, [pc, #344]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	4a55      	ldr	r2, [pc, #340]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f38:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003f3a:	e00c      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f97c 	bl	8004240 <RCCEx_PLLSAI1_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003f4c:	e003      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	77fb      	strb	r3, [r7, #31]
        break;
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f5c:	4b4a      	ldr	r3, [pc, #296]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6a:	4947      	ldr	r1, [pc, #284]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f72:	e001      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	7ffb      	ldrb	r3, [r7, #31]
 8003f76:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f84:	4b40      	ldr	r3, [pc, #256]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	493d      	ldr	r1, [pc, #244]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa6:	4b38      	ldr	r3, [pc, #224]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb4:	4934      	ldr	r1, [pc, #208]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	492c      	ldr	r1, [pc, #176]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fea:	4b27      	ldr	r3, [pc, #156]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ff0:	f023 0203 	bic.w	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	4923      	ldr	r1, [pc, #140]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d028      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401a:	491b      	ldr	r1, [pc, #108]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402a:	d106      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402c:	4b16      	ldr	r3, [pc, #88]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a15      	ldr	r2, [pc, #84]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004036:	60d3      	str	r3, [r2, #12]
 8004038:	e011      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004042:	d10c      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	2101      	movs	r1, #1
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f8f8 	bl	8004240 <RCCEx_PLLSAI1_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004054:	7ffb      	ldrb	r3, [r7, #31]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 800405a:	7ffb      	ldrb	r3, [r7, #31]
 800405c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d04d      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004072:	d10b      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800407a:	4a03      	ldr	r2, [pc, #12]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800407c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004080:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004084:	e015      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	4b6b      	ldr	r3, [pc, #428]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409a:	4968      	ldr	r1, [pc, #416]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040a2:	4b66      	ldr	r3, [pc, #408]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040a8:	4a64      	ldr	r2, [pc, #400]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	2101      	movs	r1, #1
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f8bc 	bl	8004240 <RCCEx_PLLSAI1_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80040cc:	7ffb      	ldrb	r3, [r7, #31]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d019      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80040d2:	7ffb      	ldrb	r3, [r7, #31]
 80040d4:	77bb      	strb	r3, [r7, #30]
 80040d6:	e016      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e0:	d106      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e2:	4b56      	ldr	r3, [pc, #344]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4a55      	ldr	r2, [pc, #340]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ec:	60d3      	str	r3, [r2, #12]
 80040ee:	e00a      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f8:	d105      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040fa:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4a4f      	ldr	r2, [pc, #316]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d028      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004112:	4b4a      	ldr	r3, [pc, #296]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004120:	4946      	ldr	r1, [pc, #280]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004130:	d106      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004132:	4b42      	ldr	r3, [pc, #264]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	4a41      	ldr	r2, [pc, #260]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413c:	60d3      	str	r3, [r2, #12]
 800413e:	e011      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f875 	bl	8004240 <RCCEx_PLLSAI1_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800415a:	7ffb      	ldrb	r3, [r7, #31]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004160:	7ffb      	ldrb	r3, [r7, #31]
 8004162:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004180:	492e      	ldr	r1, [pc, #184]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800418e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004192:	d10c      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	2102      	movs	r1, #2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f850 	bl	8004240 <RCCEx_PLLSAI1_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
 80041ac:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c0:	f023 0204 	bic.w	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ca:	491c      	ldr	r1, [pc, #112]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041de:	4b17      	ldr	r3, [pc, #92]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041e4:	f023 0218 	bic.w	r2, r3, #24
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	4913      	ldr	r1, [pc, #76]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d017      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004204:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004212:	490a      	ldr	r1, [pc, #40]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004224:	d105      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4a04      	ldr	r2, [pc, #16]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800422c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004230:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004232:	7fbb      	ldrb	r3, [r7, #30]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000

08004240 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b03      	cmp	r3, #3
 8004254:	d018      	beq.n	8004288 <RCCEx_PLLSAI1_Config+0x48>
 8004256:	2b03      	cmp	r3, #3
 8004258:	d81f      	bhi.n	800429a <RCCEx_PLLSAI1_Config+0x5a>
 800425a:	2b01      	cmp	r3, #1
 800425c:	d002      	beq.n	8004264 <RCCEx_PLLSAI1_Config+0x24>
 800425e:	2b02      	cmp	r3, #2
 8004260:	d009      	beq.n	8004276 <RCCEx_PLLSAI1_Config+0x36>
 8004262:	e01a      	b.n	800429a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004264:	4b65      	ldr	r3, [pc, #404]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d117      	bne.n	80042a0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004274:	e014      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004276:	4b61      	ldr	r3, [pc, #388]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427e:	2b00      	cmp	r3, #0
 8004280:	d110      	bne.n	80042a4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004286:	e00d      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004288:	4b5c      	ldr	r3, [pc, #368]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004298:	e006      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
      break;
 800429e:	e004      	b.n	80042aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80042a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f040 809f 	bne.w	80043f0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042b2:	4b52      	ldr	r3, [pc, #328]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a51      	ldr	r2, [pc, #324]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80042b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042be:	f7fe f889 	bl	80023d4 <HAL_GetTick>
 80042c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042c4:	e00f      	b.n	80042e6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c6:	f7fe f885 	bl	80023d4 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d908      	bls.n	80042e6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042d4:	4b49      	ldr	r3, [pc, #292]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042e4:	e006      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042e6:	4b45      	ldr	r3, [pc, #276]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e9      	bne.n	80042c6 <RCCEx_PLLSAI1_Config+0x86>
 80042f2:	e000      	b.n	80042f6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80042f4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d179      	bne.n	80043f0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d116      	bne.n	8004330 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004302:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	4b3e      	ldr	r3, [pc, #248]	; (8004400 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004308:	4013      	ands	r3, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6892      	ldr	r2, [r2, #8]
 800430e:	0211      	lsls	r1, r2, #8
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68d2      	ldr	r2, [r2, #12]
 8004314:	06d2      	lsls	r2, r2, #27
 8004316:	4311      	orrs	r1, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6852      	ldr	r2, [r2, #4]
 800431c:	3a01      	subs	r2, #1
 800431e:	0112      	lsls	r2, r2, #4
 8004320:	4311      	orrs	r1, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	4934      	ldr	r1, [pc, #208]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	610b      	str	r3, [r1, #16]
 800432e:	e033      	b.n	8004398 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d118      	bne.n	8004368 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004336:	4b31      	ldr	r3, [pc, #196]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	4b32      	ldr	r3, [pc, #200]	; (8004404 <RCCEx_PLLSAI1_Config+0x1c4>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6892      	ldr	r2, [r2, #8]
 8004342:	0211      	lsls	r1, r2, #8
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6912      	ldr	r2, [r2, #16]
 8004348:	0852      	lsrs	r2, r2, #1
 800434a:	3a01      	subs	r2, #1
 800434c:	0552      	lsls	r2, r2, #21
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6852      	ldr	r2, [r2, #4]
 8004354:	3a01      	subs	r2, #1
 8004356:	0112      	lsls	r2, r2, #4
 8004358:	4311      	orrs	r1, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	4926      	ldr	r1, [pc, #152]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	610b      	str	r3, [r1, #16]
 8004366:	e017      	b.n	8004398 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004368:	4b24      	ldr	r3, [pc, #144]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	4b26      	ldr	r3, [pc, #152]	; (8004408 <RCCEx_PLLSAI1_Config+0x1c8>)
 800436e:	4013      	ands	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6892      	ldr	r2, [r2, #8]
 8004374:	0211      	lsls	r1, r2, #8
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6952      	ldr	r2, [r2, #20]
 800437a:	0852      	lsrs	r2, r2, #1
 800437c:	3a01      	subs	r2, #1
 800437e:	0652      	lsls	r2, r2, #25
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6852      	ldr	r2, [r2, #4]
 8004386:	3a01      	subs	r2, #1
 8004388:	0112      	lsls	r2, r2, #4
 800438a:	4311      	orrs	r1, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	491a      	ldr	r1, [pc, #104]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004398:	4b18      	ldr	r3, [pc, #96]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a17      	ldr	r2, [pc, #92]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 800439e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fe f816 	bl	80023d4 <HAL_GetTick>
 80043a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043aa:	e00f      	b.n	80043cc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043ac:	f7fe f812 	bl	80023d4 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d908      	bls.n	80043cc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80043ca:	e006      	b.n	80043da <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0e9      	beq.n	80043ac <RCCEx_PLLSAI1_Config+0x16c>
 80043d8:	e000      	b.n	80043dc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80043da:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	4904      	ldr	r1, [pc, #16]	; (80043fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	07ff800c 	.word	0x07ff800c
 8004404:	ff9f800c 	.word	0xff9f800c
 8004408:	f9ff800c 	.word	0xf9ff800c

0800440c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d018      	beq.n	8004454 <RCCEx_PLLSAI2_Config+0x48>
 8004422:	2b03      	cmp	r3, #3
 8004424:	d81f      	bhi.n	8004466 <RCCEx_PLLSAI2_Config+0x5a>
 8004426:	2b01      	cmp	r3, #1
 8004428:	d002      	beq.n	8004430 <RCCEx_PLLSAI2_Config+0x24>
 800442a:	2b02      	cmp	r3, #2
 800442c:	d009      	beq.n	8004442 <RCCEx_PLLSAI2_Config+0x36>
 800442e:	e01a      	b.n	8004466 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004430:	4b4a      	ldr	r3, [pc, #296]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d117      	bne.n	800446c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004440:	e014      	b.n	800446c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004442:	4b46      	ldr	r3, [pc, #280]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	2b00      	cmp	r3, #0
 800444c:	d110      	bne.n	8004470 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004452:	e00d      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004454:	4b41      	ldr	r3, [pc, #260]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004464:	e006      	b.n	8004474 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
      break;
 800446a:	e004      	b.n	8004476 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800446c:	bf00      	nop
 800446e:	e002      	b.n	8004476 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004470:	bf00      	nop
 8004472:	e000      	b.n	8004476 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004474:	bf00      	nop
  }

  if (status == HAL_OK)
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d169      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800447c:	4b37      	ldr	r3, [pc, #220]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a36      	ldr	r2, [pc, #216]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 8004482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004488:	f7fd ffa4 	bl	80023d4 <HAL_GetTick>
 800448c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800448e:	e00f      	b.n	80044b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004490:	f7fd ffa0 	bl	80023d4 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d908      	bls.n	80044b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800449e:	4b2f      	ldr	r3, [pc, #188]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d009      	beq.n	80044be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044ae:	e006      	b.n	80044be <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044b0:	4b2a      	ldr	r3, [pc, #168]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e9      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0x84>
 80044bc:	e000      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80044be:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d144      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d115      	bne.n	80044f8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044cc:	4b23      	ldr	r3, [pc, #140]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	4b23      	ldr	r3, [pc, #140]	; (8004560 <RCCEx_PLLSAI2_Config+0x154>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6892      	ldr	r2, [r2, #8]
 80044d8:	0211      	lsls	r1, r2, #8
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68d2      	ldr	r2, [r2, #12]
 80044de:	06d2      	lsls	r2, r2, #27
 80044e0:	4311      	orrs	r1, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6852      	ldr	r2, [r2, #4]
 80044e6:	3a01      	subs	r2, #1
 80044e8:	0112      	lsls	r2, r2, #4
 80044ea:	4311      	orrs	r1, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	491a      	ldr	r1, [pc, #104]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044f8:	4b18      	ldr	r3, [pc, #96]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a17      	ldr	r2, [pc, #92]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fd ff66 	bl	80023d4 <HAL_GetTick>
 8004508:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800450a:	e00f      	b.n	800452c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800450c:	f7fd ff62 	bl	80023d4 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d908      	bls.n	800452c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800452a:	e006      	b.n	800453a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0e9      	beq.n	800450c <RCCEx_PLLSAI2_Config+0x100>
 8004538:	e000      	b.n	800453c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800453a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	4904      	ldr	r1, [pc, #16]	; (800455c <RCCEx_PLLSAI2_Config+0x150>)
 800454c:	4313      	orrs	r3, r2
 800454e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	07ff800c 	.word	0x07ff800c

08004564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e042      	b.n	80045fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fd fbbf 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2224      	movs	r2, #36	; 0x24
 8004592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fa80 	bl	8004aac <UART_SetConfig>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e022      	b.n	80045fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fd42 	bl	8005048 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fdc9 	bl	800518c <UART_CheckIdleState>
 80045fa:	4603      	mov	r3, r0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f640 030f 	movw	r3, #2063	; 0x80f
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d118      	bne.n	8004666 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d013      	beq.n	8004666 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 81fb 	beq.w	8004a52 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
      }
      return;
 8004664:	e1f5      	b.n	8004a52 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80ef 	beq.w	800484c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4b73      	ldr	r3, [pc, #460]	; (8004840 <HAL_UART_IRQHandler+0x23c>)
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4b72      	ldr	r3, [pc, #456]	; (8004844 <HAL_UART_IRQHandler+0x240>)
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80e4 	beq.w	800484c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d010      	beq.n	80046b0 <HAL_UART_IRQHandler+0xac>
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00b      	beq.n	80046b0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2201      	movs	r2, #1
 800469e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a6:	f043 0201 	orr.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d010      	beq.n	80046dc <HAL_UART_IRQHandler+0xd8>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2202      	movs	r2, #2
 80046ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d2:	f043 0204 	orr.w	r2, r3, #4
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d010      	beq.n	8004708 <HAL_UART_IRQHandler+0x104>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2204      	movs	r2, #4
 80046f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d015      	beq.n	800473e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4b48      	ldr	r3, [pc, #288]	; (8004840 <HAL_UART_IRQHandler+0x23c>)
 8004720:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2208      	movs	r2, #8
 800472c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004734:	f043 0208 	orr.w	r2, r3, #8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004744:	2b00      	cmp	r3, #0
 8004746:	d011      	beq.n	800476c <HAL_UART_IRQHandler+0x168>
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004762:	f043 0220 	orr.w	r2, r3, #32
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 816f 	beq.w	8004a56 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d011      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d004      	beq.n	80047c6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d031      	beq.n	800482a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fdab 	bl	8005322 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d123      	bne.n	8004822 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d013      	beq.n	800481a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f6:	4a14      	ldr	r2, [pc, #80]	; (8004848 <HAL_UART_IRQHandler+0x244>)
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fd ff5f 	bl	80026c2 <HAL_DMA_Abort_IT>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d017      	beq.n	800483a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004814:	4610      	mov	r0, r2
 8004816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004818:	e00f      	b.n	800483a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f930 	bl	8004a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004820:	e00b      	b.n	800483a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f92c 	bl	8004a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	e007      	b.n	800483a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f928 	bl	8004a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004838:	e10d      	b.n	8004a56 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483a:	bf00      	nop
    return;
 800483c:	e10b      	b.n	8004a56 <HAL_UART_IRQHandler+0x452>
 800483e:	bf00      	nop
 8004840:	10000001 	.word	0x10000001
 8004844:	04000120 	.word	0x04000120
 8004848:	08005387 	.word	0x08005387

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004850:	2b01      	cmp	r3, #1
 8004852:	f040 80ab 	bne.w	80049ac <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80a5 	beq.w	80049ac <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 809f 	beq.w	80049ac <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2210      	movs	r2, #16
 8004874:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d155      	bne.n	8004930 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800488e:	893b      	ldrh	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80e2 	beq.w	8004a5a <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800489c:	893a      	ldrh	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	f080 80db 	bcs.w	8004a5a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	893a      	ldrh	r2, [r7, #8]
 80048a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d12b      	bne.n	8004914 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ea:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0210 	bic.w	r2, r2, #16
 8004908:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800490e:	4618      	mov	r0, r3
 8004910:	f7fd fe7b 	bl	800260a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004920:	b29b      	uxth	r3, r3
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	b29b      	uxth	r3, r3
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f8b3 	bl	8004a94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800492e:	e094      	b.n	8004a5a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800493c:	b29b      	uxth	r3, r3
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8087 	beq.w	8004a5e <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8004950:	897b      	ldrh	r3, [r7, #10]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8083 	beq.w	8004a5e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004966:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0210 	bic.w	r2, r2, #16
 800499e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a0:	897b      	ldrh	r3, [r7, #10]
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f875 	bl	8004a94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049aa:	e058      	b.n	8004a5e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <HAL_UART_IRQHandler+0x3ce>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fd0b 	bl	80053e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049d0:	e048      	b.n	8004a64 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d012      	beq.n	8004a02 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d104      	bne.n	80049f0 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d034      	beq.n	8004a62 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
    }
    return;
 8004a00:	e02f      	b.n	8004a62 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_UART_IRQHandler+0x41a>
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fccb 	bl	80053b2 <UART_EndTransmit_IT>
    return;
 8004a1c:	e022      	b.n	8004a64 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_UART_IRQHandler+0x436>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fceb 	bl	800540e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a38:	e014      	b.n	8004a64 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00f      	beq.n	8004a64 <HAL_UART_IRQHandler+0x460>
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da0c      	bge.n	8004a64 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fcd5 	bl	80053fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a50:	e008      	b.n	8004a64 <HAL_UART_IRQHandler+0x460>
      return;
 8004a52:	bf00      	nop
 8004a54:	e006      	b.n	8004a64 <HAL_UART_IRQHandler+0x460>
    return;
 8004a56:	bf00      	nop
 8004a58:	e004      	b.n	8004a64 <HAL_UART_IRQHandler+0x460>
      return;
 8004a5a:	bf00      	nop
 8004a5c:	e002      	b.n	8004a64 <HAL_UART_IRQHandler+0x460>
      return;
 8004a5e:	bf00      	nop
 8004a60:	e000      	b.n	8004a64 <HAL_UART_IRQHandler+0x460>
    return;
 8004a62:	bf00      	nop
  }
}
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop

08004a6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aac:	b5b0      	push	{r4, r5, r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4bb1      	ldr	r3, [pc, #708]	; (8004d9c <UART_SetConfig+0x2f0>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	69f9      	ldr	r1, [r7, #28]
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4aa6      	ldr	r2, [pc, #664]	; (8004da0 <UART_SetConfig+0x2f4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	69f9      	ldr	r1, [r7, #28]
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f023 010f 	bic.w	r1, r3, #15
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a97      	ldr	r2, [pc, #604]	; (8004da4 <UART_SetConfig+0x2f8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d120      	bne.n	8004b8e <UART_SetConfig+0xe2>
 8004b4c:	4b96      	ldr	r3, [pc, #600]	; (8004da8 <UART_SetConfig+0x2fc>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d816      	bhi.n	8004b88 <UART_SetConfig+0xdc>
 8004b5a:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <UART_SetConfig+0xb4>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b7d 	.word	0x08004b7d
 8004b68:	08004b77 	.word	0x08004b77
 8004b6c:	08004b83 	.word	0x08004b83
 8004b70:	2301      	movs	r3, #1
 8004b72:	76fb      	strb	r3, [r7, #27]
 8004b74:	e0e7      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004b76:	2302      	movs	r3, #2
 8004b78:	76fb      	strb	r3, [r7, #27]
 8004b7a:	e0e4      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	76fb      	strb	r3, [r7, #27]
 8004b80:	e0e1      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004b82:	2308      	movs	r3, #8
 8004b84:	76fb      	strb	r3, [r7, #27]
 8004b86:	e0de      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	76fb      	strb	r3, [r7, #27]
 8004b8c:	e0db      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a86      	ldr	r2, [pc, #536]	; (8004dac <UART_SetConfig+0x300>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d132      	bne.n	8004bfe <UART_SetConfig+0x152>
 8004b98:	4b83      	ldr	r3, [pc, #524]	; (8004da8 <UART_SetConfig+0x2fc>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d828      	bhi.n	8004bf8 <UART_SetConfig+0x14c>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <UART_SetConfig+0x100>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004bf9 	.word	0x08004bf9
 8004bb4:	08004bf9 	.word	0x08004bf9
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004bed 	.word	0x08004bed
 8004bc0:	08004bf9 	.word	0x08004bf9
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004bf9 	.word	0x08004bf9
 8004bcc:	08004be7 	.word	0x08004be7
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004bf9 	.word	0x08004bf9
 8004bdc:	08004bf3 	.word	0x08004bf3
 8004be0:	2300      	movs	r3, #0
 8004be2:	76fb      	strb	r3, [r7, #27]
 8004be4:	e0af      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004be6:	2302      	movs	r3, #2
 8004be8:	76fb      	strb	r3, [r7, #27]
 8004bea:	e0ac      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004bec:	2304      	movs	r3, #4
 8004bee:	76fb      	strb	r3, [r7, #27]
 8004bf0:	e0a9      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	76fb      	strb	r3, [r7, #27]
 8004bf6:	e0a6      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	76fb      	strb	r3, [r7, #27]
 8004bfc:	e0a3      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6b      	ldr	r2, [pc, #428]	; (8004db0 <UART_SetConfig+0x304>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d120      	bne.n	8004c4a <UART_SetConfig+0x19e>
 8004c08:	4b67      	ldr	r3, [pc, #412]	; (8004da8 <UART_SetConfig+0x2fc>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c12:	2b30      	cmp	r3, #48	; 0x30
 8004c14:	d013      	beq.n	8004c3e <UART_SetConfig+0x192>
 8004c16:	2b30      	cmp	r3, #48	; 0x30
 8004c18:	d814      	bhi.n	8004c44 <UART_SetConfig+0x198>
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d009      	beq.n	8004c32 <UART_SetConfig+0x186>
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d810      	bhi.n	8004c44 <UART_SetConfig+0x198>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <UART_SetConfig+0x180>
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d006      	beq.n	8004c38 <UART_SetConfig+0x18c>
 8004c2a:	e00b      	b.n	8004c44 <UART_SetConfig+0x198>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	76fb      	strb	r3, [r7, #27]
 8004c30:	e089      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c32:	2302      	movs	r3, #2
 8004c34:	76fb      	strb	r3, [r7, #27]
 8004c36:	e086      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	76fb      	strb	r3, [r7, #27]
 8004c3c:	e083      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c3e:	2308      	movs	r3, #8
 8004c40:	76fb      	strb	r3, [r7, #27]
 8004c42:	e080      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c44:	2310      	movs	r3, #16
 8004c46:	76fb      	strb	r3, [r7, #27]
 8004c48:	e07d      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a59      	ldr	r2, [pc, #356]	; (8004db4 <UART_SetConfig+0x308>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d120      	bne.n	8004c96 <UART_SetConfig+0x1ea>
 8004c54:	4b54      	ldr	r3, [pc, #336]	; (8004da8 <UART_SetConfig+0x2fc>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c60:	d013      	beq.n	8004c8a <UART_SetConfig+0x1de>
 8004c62:	2bc0      	cmp	r3, #192	; 0xc0
 8004c64:	d814      	bhi.n	8004c90 <UART_SetConfig+0x1e4>
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d009      	beq.n	8004c7e <UART_SetConfig+0x1d2>
 8004c6a:	2b80      	cmp	r3, #128	; 0x80
 8004c6c:	d810      	bhi.n	8004c90 <UART_SetConfig+0x1e4>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <UART_SetConfig+0x1cc>
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d006      	beq.n	8004c84 <UART_SetConfig+0x1d8>
 8004c76:	e00b      	b.n	8004c90 <UART_SetConfig+0x1e4>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	76fb      	strb	r3, [r7, #27]
 8004c7c:	e063      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	76fb      	strb	r3, [r7, #27]
 8004c82:	e060      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c84:	2304      	movs	r3, #4
 8004c86:	76fb      	strb	r3, [r7, #27]
 8004c88:	e05d      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c8a:	2308      	movs	r3, #8
 8004c8c:	76fb      	strb	r3, [r7, #27]
 8004c8e:	e05a      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c90:	2310      	movs	r3, #16
 8004c92:	76fb      	strb	r3, [r7, #27]
 8004c94:	e057      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a47      	ldr	r2, [pc, #284]	; (8004db8 <UART_SetConfig+0x30c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d125      	bne.n	8004cec <UART_SetConfig+0x240>
 8004ca0:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <UART_SetConfig+0x2fc>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cae:	d017      	beq.n	8004ce0 <UART_SetConfig+0x234>
 8004cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb4:	d817      	bhi.n	8004ce6 <UART_SetConfig+0x23a>
 8004cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cba:	d00b      	beq.n	8004cd4 <UART_SetConfig+0x228>
 8004cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc0:	d811      	bhi.n	8004ce6 <UART_SetConfig+0x23a>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <UART_SetConfig+0x222>
 8004cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cca:	d006      	beq.n	8004cda <UART_SetConfig+0x22e>
 8004ccc:	e00b      	b.n	8004ce6 <UART_SetConfig+0x23a>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	76fb      	strb	r3, [r7, #27]
 8004cd2:	e038      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	76fb      	strb	r3, [r7, #27]
 8004cd8:	e035      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004cda:	2304      	movs	r3, #4
 8004cdc:	76fb      	strb	r3, [r7, #27]
 8004cde:	e032      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	76fb      	strb	r3, [r7, #27]
 8004ce4:	e02f      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	76fb      	strb	r3, [r7, #27]
 8004cea:	e02c      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2b      	ldr	r2, [pc, #172]	; (8004da0 <UART_SetConfig+0x2f4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d125      	bne.n	8004d42 <UART_SetConfig+0x296>
 8004cf6:	4b2c      	ldr	r3, [pc, #176]	; (8004da8 <UART_SetConfig+0x2fc>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d04:	d017      	beq.n	8004d36 <UART_SetConfig+0x28a>
 8004d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d0a:	d817      	bhi.n	8004d3c <UART_SetConfig+0x290>
 8004d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d10:	d00b      	beq.n	8004d2a <UART_SetConfig+0x27e>
 8004d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d16:	d811      	bhi.n	8004d3c <UART_SetConfig+0x290>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <UART_SetConfig+0x278>
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d006      	beq.n	8004d30 <UART_SetConfig+0x284>
 8004d22:	e00b      	b.n	8004d3c <UART_SetConfig+0x290>
 8004d24:	2300      	movs	r3, #0
 8004d26:	76fb      	strb	r3, [r7, #27]
 8004d28:	e00d      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	76fb      	strb	r3, [r7, #27]
 8004d2e:	e00a      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004d30:	2304      	movs	r3, #4
 8004d32:	76fb      	strb	r3, [r7, #27]
 8004d34:	e007      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004d36:	2308      	movs	r3, #8
 8004d38:	76fb      	strb	r3, [r7, #27]
 8004d3a:	e004      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	76fb      	strb	r3, [r7, #27]
 8004d40:	e001      	b.n	8004d46 <UART_SetConfig+0x29a>
 8004d42:	2310      	movs	r3, #16
 8004d44:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <UART_SetConfig+0x2f4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	f040 80a3 	bne.w	8004e98 <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d52:	7efb      	ldrb	r3, [r7, #27]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d83b      	bhi.n	8004dd0 <UART_SetConfig+0x324>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x2b4>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004dd1 	.word	0x08004dd1
 8004d70:	08004dc1 	.word	0x08004dc1
 8004d74:	08004dd1 	.word	0x08004dd1
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004dd1 	.word	0x08004dd1
 8004d80:	08004dc9 	.word	0x08004dc9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7fe fdd4 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8004d88:	6178      	str	r0, [r7, #20]
        break;
 8004d8a:	e026      	b.n	8004dda <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fe fde4 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8004d90:	6178      	str	r0, [r7, #20]
        break;
 8004d92:	e022      	b.n	8004dda <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <UART_SetConfig+0x310>)
 8004d96:	617b      	str	r3, [r7, #20]
        break;
 8004d98:	e01f      	b.n	8004dda <UART_SetConfig+0x32e>
 8004d9a:	bf00      	nop
 8004d9c:	cfff69f3 	.word	0xcfff69f3
 8004da0:	40008000 	.word	0x40008000
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40004400 	.word	0x40004400
 8004db0:	40004800 	.word	0x40004800
 8004db4:	40004c00 	.word	0x40004c00
 8004db8:	40005000 	.word	0x40005000
 8004dbc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc0:	f7fe fd06 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8004dc4:	6178      	str	r0, [r7, #20]
        break;
 8004dc6:	e008      	b.n	8004dda <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dcc:	617b      	str	r3, [r7, #20]
        break;
 8004dce:	e004      	b.n	8004dda <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	76bb      	strb	r3, [r7, #26]
        break;
 8004dd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 811b 	beq.w	8005018 <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	4a96      	ldr	r2, [pc, #600]	; (8005040 <UART_SetConfig+0x594>)
 8004de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dec:	461a      	mov	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d305      	bcc.n	8004e12 <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d902      	bls.n	8004e18 <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	76bb      	strb	r3, [r7, #26]
 8004e16:	e0ff      	b.n	8005018 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	4a86      	ldr	r2, [pc, #536]	; (8005040 <UART_SetConfig+0x594>)
 8004e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	f7fb fec6 	bl	8000bc0 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	020b      	lsls	r3, r1, #8
 8004e46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e4a:	0202      	lsls	r2, r0, #8
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	6849      	ldr	r1, [r1, #4]
 8004e50:	0849      	lsrs	r1, r1, #1
 8004e52:	4608      	mov	r0, r1
 8004e54:	f04f 0100 	mov.w	r1, #0
 8004e58:	1814      	adds	r4, r2, r0
 8004e5a:	eb43 0501 	adc.w	r5, r3, r1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	f7fb fea8 	bl	8000bc0 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e7e:	d308      	bcc.n	8004e92 <UART_SetConfig+0x3e6>
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e86:	d204      	bcs.n	8004e92 <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	60da      	str	r2, [r3, #12]
 8004e90:	e0c2      	b.n	8005018 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	76bb      	strb	r3, [r7, #26]
 8004e96:	e0bf      	b.n	8005018 <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	d165      	bne.n	8004f6e <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 8004ea2:	7efb      	ldrb	r3, [r7, #27]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d828      	bhi.n	8004efa <UART_SetConfig+0x44e>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0x404>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004edd 	.word	0x08004edd
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	08004efb 	.word	0x08004efb
 8004ec0:	08004eeb 	.word	0x08004eeb
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004efb 	.word	0x08004efb
 8004ecc:	08004efb 	.word	0x08004efb
 8004ed0:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fe fd2c 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	6178      	str	r0, [r7, #20]
        break;
 8004eda:	e013      	b.n	8004f04 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fe fd3c 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	6178      	str	r0, [r7, #20]
        break;
 8004ee2:	e00f      	b.n	8004f04 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b57      	ldr	r3, [pc, #348]	; (8005044 <UART_SetConfig+0x598>)
 8004ee6:	617b      	str	r3, [r7, #20]
        break;
 8004ee8:	e00c      	b.n	8004f04 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7fe fc71 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8004eee:	6178      	str	r0, [r7, #20]
        break;
 8004ef0:	e008      	b.n	8004f04 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef6:	617b      	str	r3, [r7, #20]
        break;
 8004ef8:	e004      	b.n	8004f04 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	76bb      	strb	r3, [r7, #26]
        break;
 8004f02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8086 	beq.w	8005018 <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	4a4b      	ldr	r2, [pc, #300]	; (8005040 <UART_SetConfig+0x594>)
 8004f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f16:	461a      	mov	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f1e:	005a      	lsls	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	441a      	add	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d916      	bls.n	8004f68 <UART_SetConfig+0x4bc>
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	d212      	bcs.n	8004f68 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f023 030f 	bic.w	r3, r3, #15
 8004f4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	89fb      	ldrh	r3, [r7, #14]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	89fa      	ldrh	r2, [r7, #14]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	e057      	b.n	8005018 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	76bb      	strb	r3, [r7, #26]
 8004f6c:	e054      	b.n	8005018 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f6e:	7efb      	ldrb	r3, [r7, #27]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d828      	bhi.n	8004fc6 <UART_SetConfig+0x51a>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x4d0>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	08004fc7 	.word	0x08004fc7
 8004f8c:	08004fb7 	.word	0x08004fb7
 8004f90:	08004fc7 	.word	0x08004fc7
 8004f94:	08004fc7 	.word	0x08004fc7
 8004f98:	08004fc7 	.word	0x08004fc7
 8004f9c:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe fcc6 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	6178      	str	r0, [r7, #20]
        break;
 8004fa6:	e013      	b.n	8004fd0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7fe fcd6 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8004fac:	6178      	str	r0, [r7, #20]
        break;
 8004fae:	e00f      	b.n	8004fd0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb0:	4b24      	ldr	r3, [pc, #144]	; (8005044 <UART_SetConfig+0x598>)
 8004fb2:	617b      	str	r3, [r7, #20]
        break;
 8004fb4:	e00c      	b.n	8004fd0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7fe fc0b 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8004fba:	6178      	str	r0, [r7, #20]
        break;
 8004fbc:	e008      	b.n	8004fd0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc2:	617b      	str	r3, [r7, #20]
        break;
 8004fc4:	e004      	b.n	8004fd0 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	76bb      	strb	r3, [r7, #26]
        break;
 8004fce:	bf00      	nop
    }

    if (pclk != 0U)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d020      	beq.n	8005018 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	4a19      	ldr	r2, [pc, #100]	; (8005040 <UART_SetConfig+0x594>)
 8004fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	441a      	add	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b0f      	cmp	r3, #15
 8005000:	d908      	bls.n	8005014 <UART_SetConfig+0x568>
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d204      	bcs.n	8005014 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	60da      	str	r2, [r3, #12]
 8005012:	e001      	b.n	8005018 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005034:	7ebb      	ldrb	r3, [r7, #26]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bdb0      	pop	{r4, r5, r7, pc}
 800503e:	bf00      	nop
 8005040:	080067a4 	.word	0x080067a4
 8005044:	00f42400 	.word	0x00f42400

08005048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01a      	beq.n	800515e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005146:	d10a      	bne.n	800515e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
  }
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af02      	add	r7, sp, #8
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800519c:	f7fd f91a 	bl	80023d4 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d10e      	bne.n	80051ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f82f 	bl	8005222 <UART_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e025      	b.n	800521a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d10e      	bne.n	80051fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f819 	bl	8005222 <UART_WaitOnFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e00f      	b.n	800521a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	4613      	mov	r3, r2
 8005230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005232:	e062      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d05e      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523c:	f7fd f8ca 	bl	80023d4 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	429a      	cmp	r2, r3
 800524a:	d302      	bcc.n	8005252 <UART_WaitOnFlagUntilTimeout+0x30>
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d11d      	bne.n	800528e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005260:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e045      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02e      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052aa:	d126      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e00f      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4013      	ands	r3, r2
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	429a      	cmp	r2, r3
 8005308:	bf0c      	ite	eq
 800530a:	2301      	moveq	r3, #1
 800530c:	2300      	movne	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	429a      	cmp	r2, r3
 8005316:	d08d      	beq.n	8005234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005338:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d107      	bne.n	8005366 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0210 	bic.w	r2, r2, #16
 8005364:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	671a      	str	r2, [r3, #112]	; 0x70
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff fb6b 	bl	8004a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff fb47 	bl	8004a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_UARTEx_DisableFifoMode+0x16>
 8005434:	2302      	movs	r3, #2
 8005436:	e027      	b.n	8005488 <HAL_UARTEx_DisableFifoMode+0x66>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2224      	movs	r2, #36	; 0x24
 8005444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0201 	bic.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005466:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e02d      	b.n	8005508 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2224      	movs	r2, #36	; 0x24
 80054b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0201 	bic.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f84f 	bl	800558c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005524:	2302      	movs	r3, #2
 8005526:	e02d      	b.n	8005584 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2224      	movs	r2, #36	; 0x24
 8005534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f811 	bl	800558c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005598:	2b00      	cmp	r3, #0
 800559a:	d108      	bne.n	80055ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055ac:	e031      	b.n	8005612 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055ae:	2308      	movs	r3, #8
 80055b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055b2:	2308      	movs	r3, #8
 80055b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	0e5b      	lsrs	r3, r3, #25
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	0f5b      	lsrs	r3, r3, #29
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	7b3a      	ldrb	r2, [r7, #12]
 80055da:	4911      	ldr	r1, [pc, #68]	; (8005620 <UARTEx_SetNbDataToProcess+0x94>)
 80055dc:	5c8a      	ldrb	r2, [r1, r2]
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	7b3a      	ldrb	r2, [r7, #12]
 80055e4:	490f      	ldr	r1, [pc, #60]	; (8005624 <UARTEx_SetNbDataToProcess+0x98>)
 80055e6:	5c8a      	ldrb	r2, [r1, r2]
 80055e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	7b7a      	ldrb	r2, [r7, #13]
 80055f8:	4909      	ldr	r1, [pc, #36]	; (8005620 <UARTEx_SetNbDataToProcess+0x94>)
 80055fa:	5c8a      	ldrb	r2, [r1, r2]
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	7b7a      	ldrb	r2, [r7, #13]
 8005602:	4908      	ldr	r1, [pc, #32]	; (8005624 <UARTEx_SetNbDataToProcess+0x98>)
 8005604:	5c8a      	ldrb	r2, [r1, r2]
 8005606:	fb93 f3f2 	sdiv	r3, r3, r2
 800560a:	b29a      	uxth	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	080067bc 	.word	0x080067bc
 8005624:	080067c4 	.word	0x080067c4

08005628 <atoi>:
 8005628:	220a      	movs	r2, #10
 800562a:	2100      	movs	r1, #0
 800562c:	f000 b8b4 	b.w	8005798 <strtol>

08005630 <__errno>:
 8005630:	4b01      	ldr	r3, [pc, #4]	; (8005638 <__errno+0x8>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000014 	.word	0x20000014

0800563c <__libc_init_array>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4d0d      	ldr	r5, [pc, #52]	; (8005674 <__libc_init_array+0x38>)
 8005640:	2600      	movs	r6, #0
 8005642:	4c0d      	ldr	r4, [pc, #52]	; (8005678 <__libc_init_array+0x3c>)
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	42a6      	cmp	r6, r4
 800564a:	d109      	bne.n	8005660 <__libc_init_array+0x24>
 800564c:	4d0b      	ldr	r5, [pc, #44]	; (800567c <__libc_init_array+0x40>)
 800564e:	2600      	movs	r6, #0
 8005650:	4c0b      	ldr	r4, [pc, #44]	; (8005680 <__libc_init_array+0x44>)
 8005652:	f001 f867 	bl	8006724 <_init>
 8005656:	1b64      	subs	r4, r4, r5
 8005658:	10a4      	asrs	r4, r4, #2
 800565a:	42a6      	cmp	r6, r4
 800565c:	d105      	bne.n	800566a <__libc_init_array+0x2e>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	f855 3b04 	ldr.w	r3, [r5], #4
 8005664:	3601      	adds	r6, #1
 8005666:	4798      	blx	r3
 8005668:	e7ee      	b.n	8005648 <__libc_init_array+0xc>
 800566a:	f855 3b04 	ldr.w	r3, [r5], #4
 800566e:	3601      	adds	r6, #1
 8005670:	4798      	blx	r3
 8005672:	e7f2      	b.n	800565a <__libc_init_array+0x1e>
 8005674:	08006918 	.word	0x08006918
 8005678:	08006918 	.word	0x08006918
 800567c:	08006918 	.word	0x08006918
 8005680:	0800691c 	.word	0x0800691c

08005684 <memset>:
 8005684:	4402      	add	r2, r0
 8005686:	4603      	mov	r3, r0
 8005688:	4293      	cmp	r3, r2
 800568a:	d100      	bne.n	800568e <memset+0xa>
 800568c:	4770      	bx	lr
 800568e:	f803 1b01 	strb.w	r1, [r3], #1
 8005692:	e7f9      	b.n	8005688 <memset+0x4>

08005694 <_strtol_l.isra.0>:
 8005694:	2b01      	cmp	r3, #1
 8005696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569a:	d001      	beq.n	80056a0 <_strtol_l.isra.0+0xc>
 800569c:	2b24      	cmp	r3, #36	; 0x24
 800569e:	d906      	bls.n	80056ae <_strtol_l.isra.0+0x1a>
 80056a0:	f7ff ffc6 	bl	8005630 <__errno>
 80056a4:	2316      	movs	r3, #22
 80056a6:	6003      	str	r3, [r0, #0]
 80056a8:	2000      	movs	r0, #0
 80056aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ae:	468e      	mov	lr, r1
 80056b0:	4f38      	ldr	r7, [pc, #224]	; (8005794 <_strtol_l.isra.0+0x100>)
 80056b2:	4676      	mov	r6, lr
 80056b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80056b8:	5de5      	ldrb	r5, [r4, r7]
 80056ba:	f015 0508 	ands.w	r5, r5, #8
 80056be:	d1f8      	bne.n	80056b2 <_strtol_l.isra.0+0x1e>
 80056c0:	2c2d      	cmp	r4, #45	; 0x2d
 80056c2:	d134      	bne.n	800572e <_strtol_l.isra.0+0x9a>
 80056c4:	f89e 4000 	ldrb.w	r4, [lr]
 80056c8:	f04f 0801 	mov.w	r8, #1
 80056cc:	f106 0e02 	add.w	lr, r6, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05b      	beq.n	800578c <_strtol_l.isra.0+0xf8>
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d10c      	bne.n	80056f2 <_strtol_l.isra.0+0x5e>
 80056d8:	2c30      	cmp	r4, #48	; 0x30
 80056da:	d10a      	bne.n	80056f2 <_strtol_l.isra.0+0x5e>
 80056dc:	f89e 4000 	ldrb.w	r4, [lr]
 80056e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80056e4:	2c58      	cmp	r4, #88	; 0x58
 80056e6:	d14c      	bne.n	8005782 <_strtol_l.isra.0+0xee>
 80056e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80056ec:	2310      	movs	r3, #16
 80056ee:	f10e 0e02 	add.w	lr, lr, #2
 80056f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80056f6:	2600      	movs	r6, #0
 80056f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80056fc:	4635      	mov	r5, r6
 80056fe:	fbbc f9f3 	udiv	r9, ip, r3
 8005702:	fb03 ca19 	mls	sl, r3, r9, ip
 8005706:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800570a:	2f09      	cmp	r7, #9
 800570c:	d817      	bhi.n	800573e <_strtol_l.isra.0+0xaa>
 800570e:	463c      	mov	r4, r7
 8005710:	42a3      	cmp	r3, r4
 8005712:	dd23      	ble.n	800575c <_strtol_l.isra.0+0xc8>
 8005714:	2e00      	cmp	r6, #0
 8005716:	db1e      	blt.n	8005756 <_strtol_l.isra.0+0xc2>
 8005718:	45a9      	cmp	r9, r5
 800571a:	d31c      	bcc.n	8005756 <_strtol_l.isra.0+0xc2>
 800571c:	d101      	bne.n	8005722 <_strtol_l.isra.0+0x8e>
 800571e:	45a2      	cmp	sl, r4
 8005720:	db19      	blt.n	8005756 <_strtol_l.isra.0+0xc2>
 8005722:	fb05 4503 	mla	r5, r5, r3, r4
 8005726:	2601      	movs	r6, #1
 8005728:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800572c:	e7eb      	b.n	8005706 <_strtol_l.isra.0+0x72>
 800572e:	2c2b      	cmp	r4, #43	; 0x2b
 8005730:	46a8      	mov	r8, r5
 8005732:	bf04      	itt	eq
 8005734:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005738:	f106 0e02 	addeq.w	lr, r6, #2
 800573c:	e7c8      	b.n	80056d0 <_strtol_l.isra.0+0x3c>
 800573e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005742:	2f19      	cmp	r7, #25
 8005744:	d801      	bhi.n	800574a <_strtol_l.isra.0+0xb6>
 8005746:	3c37      	subs	r4, #55	; 0x37
 8005748:	e7e2      	b.n	8005710 <_strtol_l.isra.0+0x7c>
 800574a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800574e:	2f19      	cmp	r7, #25
 8005750:	d804      	bhi.n	800575c <_strtol_l.isra.0+0xc8>
 8005752:	3c57      	subs	r4, #87	; 0x57
 8005754:	e7dc      	b.n	8005710 <_strtol_l.isra.0+0x7c>
 8005756:	f04f 36ff 	mov.w	r6, #4294967295
 800575a:	e7e5      	b.n	8005728 <_strtol_l.isra.0+0x94>
 800575c:	2e00      	cmp	r6, #0
 800575e:	da05      	bge.n	800576c <_strtol_l.isra.0+0xd8>
 8005760:	2322      	movs	r3, #34	; 0x22
 8005762:	4665      	mov	r5, ip
 8005764:	6003      	str	r3, [r0, #0]
 8005766:	b942      	cbnz	r2, 800577a <_strtol_l.isra.0+0xe6>
 8005768:	4628      	mov	r0, r5
 800576a:	e79e      	b.n	80056aa <_strtol_l.isra.0+0x16>
 800576c:	f1b8 0f00 	cmp.w	r8, #0
 8005770:	d000      	beq.n	8005774 <_strtol_l.isra.0+0xe0>
 8005772:	426d      	negs	r5, r5
 8005774:	2a00      	cmp	r2, #0
 8005776:	d0f7      	beq.n	8005768 <_strtol_l.isra.0+0xd4>
 8005778:	b10e      	cbz	r6, 800577e <_strtol_l.isra.0+0xea>
 800577a:	f10e 31ff 	add.w	r1, lr, #4294967295
 800577e:	6011      	str	r1, [r2, #0]
 8005780:	e7f2      	b.n	8005768 <_strtol_l.isra.0+0xd4>
 8005782:	2430      	movs	r4, #48	; 0x30
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1b4      	bne.n	80056f2 <_strtol_l.isra.0+0x5e>
 8005788:	2308      	movs	r3, #8
 800578a:	e7b2      	b.n	80056f2 <_strtol_l.isra.0+0x5e>
 800578c:	2c30      	cmp	r4, #48	; 0x30
 800578e:	d0a5      	beq.n	80056dc <_strtol_l.isra.0+0x48>
 8005790:	230a      	movs	r3, #10
 8005792:	e7ae      	b.n	80056f2 <_strtol_l.isra.0+0x5e>
 8005794:	080067cd 	.word	0x080067cd

08005798 <strtol>:
 8005798:	4613      	mov	r3, r2
 800579a:	460a      	mov	r2, r1
 800579c:	4601      	mov	r1, r0
 800579e:	4802      	ldr	r0, [pc, #8]	; (80057a8 <strtol+0x10>)
 80057a0:	6800      	ldr	r0, [r0, #0]
 80057a2:	f7ff bf77 	b.w	8005694 <_strtol_l.isra.0>
 80057a6:	bf00      	nop
 80057a8:	20000014 	.word	0x20000014

080057ac <pow>:
 80057ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b0:	ec59 8b10 	vmov	r8, r9, d0
 80057b4:	ec57 6b11 	vmov	r6, r7, d1
 80057b8:	f000 f8a6 	bl	8005908 <__ieee754_pow>
 80057bc:	4b4e      	ldr	r3, [pc, #312]	; (80058f8 <pow+0x14c>)
 80057be:	f993 3000 	ldrsb.w	r3, [r3]
 80057c2:	3301      	adds	r3, #1
 80057c4:	ec55 4b10 	vmov	r4, r5, d0
 80057c8:	d015      	beq.n	80057f6 <pow+0x4a>
 80057ca:	4632      	mov	r2, r6
 80057cc:	463b      	mov	r3, r7
 80057ce:	4630      	mov	r0, r6
 80057d0:	4639      	mov	r1, r7
 80057d2:	f7fb f98f 	bl	8000af4 <__aeabi_dcmpun>
 80057d6:	b970      	cbnz	r0, 80057f6 <pow+0x4a>
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	4640      	mov	r0, r8
 80057de:	4649      	mov	r1, r9
 80057e0:	f7fb f988 	bl	8000af4 <__aeabi_dcmpun>
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	b148      	cbz	r0, 80057fe <pow+0x52>
 80057ea:	4630      	mov	r0, r6
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fb f94f 	bl	8000a90 <__aeabi_dcmpeq>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d17d      	bne.n	80058f2 <pow+0x146>
 80057f6:	ec45 4b10 	vmov	d0, r4, r5
 80057fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fb f945 	bl	8000a90 <__aeabi_dcmpeq>
 8005806:	b1e0      	cbz	r0, 8005842 <pow+0x96>
 8005808:	2200      	movs	r2, #0
 800580a:	2300      	movs	r3, #0
 800580c:	4630      	mov	r0, r6
 800580e:	4639      	mov	r1, r7
 8005810:	f7fb f93e 	bl	8000a90 <__aeabi_dcmpeq>
 8005814:	2800      	cmp	r0, #0
 8005816:	d16c      	bne.n	80058f2 <pow+0x146>
 8005818:	ec47 6b10 	vmov	d0, r6, r7
 800581c:	f000 fe5b 	bl	80064d6 <finite>
 8005820:	2800      	cmp	r0, #0
 8005822:	d0e8      	beq.n	80057f6 <pow+0x4a>
 8005824:	2200      	movs	r2, #0
 8005826:	2300      	movs	r3, #0
 8005828:	4630      	mov	r0, r6
 800582a:	4639      	mov	r1, r7
 800582c:	f7fb f93a 	bl	8000aa4 <__aeabi_dcmplt>
 8005830:	2800      	cmp	r0, #0
 8005832:	d0e0      	beq.n	80057f6 <pow+0x4a>
 8005834:	f7ff fefc 	bl	8005630 <__errno>
 8005838:	2400      	movs	r4, #0
 800583a:	2321      	movs	r3, #33	; 0x21
 800583c:	6003      	str	r3, [r0, #0]
 800583e:	4d2f      	ldr	r5, [pc, #188]	; (80058fc <pow+0x150>)
 8005840:	e7d9      	b.n	80057f6 <pow+0x4a>
 8005842:	ec45 4b10 	vmov	d0, r4, r5
 8005846:	f000 fe46 	bl	80064d6 <finite>
 800584a:	bbb8      	cbnz	r0, 80058bc <pow+0x110>
 800584c:	ec49 8b10 	vmov	d0, r8, r9
 8005850:	f000 fe41 	bl	80064d6 <finite>
 8005854:	b390      	cbz	r0, 80058bc <pow+0x110>
 8005856:	ec47 6b10 	vmov	d0, r6, r7
 800585a:	f000 fe3c 	bl	80064d6 <finite>
 800585e:	b368      	cbz	r0, 80058bc <pow+0x110>
 8005860:	4622      	mov	r2, r4
 8005862:	462b      	mov	r3, r5
 8005864:	4620      	mov	r0, r4
 8005866:	4629      	mov	r1, r5
 8005868:	f7fb f944 	bl	8000af4 <__aeabi_dcmpun>
 800586c:	b160      	cbz	r0, 8005888 <pow+0xdc>
 800586e:	f7ff fedf 	bl	8005630 <__errno>
 8005872:	2321      	movs	r3, #33	; 0x21
 8005874:	2200      	movs	r2, #0
 8005876:	6003      	str	r3, [r0, #0]
 8005878:	2300      	movs	r3, #0
 800587a:	4610      	mov	r0, r2
 800587c:	4619      	mov	r1, r3
 800587e:	f7fa ffc9 	bl	8000814 <__aeabi_ddiv>
 8005882:	4604      	mov	r4, r0
 8005884:	460d      	mov	r5, r1
 8005886:	e7b6      	b.n	80057f6 <pow+0x4a>
 8005888:	f7ff fed2 	bl	8005630 <__errno>
 800588c:	2322      	movs	r3, #34	; 0x22
 800588e:	2200      	movs	r2, #0
 8005890:	4649      	mov	r1, r9
 8005892:	6003      	str	r3, [r0, #0]
 8005894:	2300      	movs	r3, #0
 8005896:	4640      	mov	r0, r8
 8005898:	2400      	movs	r4, #0
 800589a:	f7fb f903 	bl	8000aa4 <__aeabi_dcmplt>
 800589e:	b158      	cbz	r0, 80058b8 <pow+0x10c>
 80058a0:	ec47 6b10 	vmov	d0, r6, r7
 80058a4:	f000 fe2c 	bl	8006500 <rint>
 80058a8:	4632      	mov	r2, r6
 80058aa:	463b      	mov	r3, r7
 80058ac:	ec51 0b10 	vmov	r0, r1, d0
 80058b0:	f7fb f8ee 	bl	8000a90 <__aeabi_dcmpeq>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d0c2      	beq.n	800583e <pow+0x92>
 80058b8:	4d11      	ldr	r5, [pc, #68]	; (8005900 <pow+0x154>)
 80058ba:	e79c      	b.n	80057f6 <pow+0x4a>
 80058bc:	2200      	movs	r2, #0
 80058be:	2300      	movs	r3, #0
 80058c0:	4620      	mov	r0, r4
 80058c2:	4629      	mov	r1, r5
 80058c4:	f7fb f8e4 	bl	8000a90 <__aeabi_dcmpeq>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d094      	beq.n	80057f6 <pow+0x4a>
 80058cc:	ec49 8b10 	vmov	d0, r8, r9
 80058d0:	f000 fe01 	bl	80064d6 <finite>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d08e      	beq.n	80057f6 <pow+0x4a>
 80058d8:	ec47 6b10 	vmov	d0, r6, r7
 80058dc:	f000 fdfb 	bl	80064d6 <finite>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d088      	beq.n	80057f6 <pow+0x4a>
 80058e4:	f7ff fea4 	bl	8005630 <__errno>
 80058e8:	2322      	movs	r3, #34	; 0x22
 80058ea:	2400      	movs	r4, #0
 80058ec:	2500      	movs	r5, #0
 80058ee:	6003      	str	r3, [r0, #0]
 80058f0:	e781      	b.n	80057f6 <pow+0x4a>
 80058f2:	2400      	movs	r4, #0
 80058f4:	4d03      	ldr	r5, [pc, #12]	; (8005904 <pow+0x158>)
 80058f6:	e77e      	b.n	80057f6 <pow+0x4a>
 80058f8:	20000078 	.word	0x20000078
 80058fc:	fff00000 	.word	0xfff00000
 8005900:	7ff00000 	.word	0x7ff00000
 8005904:	3ff00000 	.word	0x3ff00000

08005908 <__ieee754_pow>:
 8005908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590c:	ed2d 8b06 	vpush	{d8-d10}
 8005910:	b08d      	sub	sp, #52	; 0x34
 8005912:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005916:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800591a:	ec53 2b10 	vmov	r2, r3, d0
 800591e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005922:	ea56 0100 	orrs.w	r1, r6, r0
 8005926:	f000 84d2 	beq.w	80062ce <__ieee754_pow+0x9c6>
 800592a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800592e:	497e      	ldr	r1, [pc, #504]	; (8005b28 <__ieee754_pow+0x220>)
 8005930:	4699      	mov	r9, r3
 8005932:	ee10 8a10 	vmov	r8, s0
 8005936:	428c      	cmp	r4, r1
 8005938:	dc09      	bgt.n	800594e <__ieee754_pow+0x46>
 800593a:	d103      	bne.n	8005944 <__ieee754_pow+0x3c>
 800593c:	b97a      	cbnz	r2, 800595e <__ieee754_pow+0x56>
 800593e:	42a6      	cmp	r6, r4
 8005940:	dd02      	ble.n	8005948 <__ieee754_pow+0x40>
 8005942:	e00c      	b.n	800595e <__ieee754_pow+0x56>
 8005944:	428e      	cmp	r6, r1
 8005946:	dc02      	bgt.n	800594e <__ieee754_pow+0x46>
 8005948:	428e      	cmp	r6, r1
 800594a:	d110      	bne.n	800596e <__ieee754_pow+0x66>
 800594c:	b178      	cbz	r0, 800596e <__ieee754_pow+0x66>
 800594e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005952:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005956:	ea54 0308 	orrs.w	r3, r4, r8
 800595a:	f000 84b8 	beq.w	80062ce <__ieee754_pow+0x9c6>
 800595e:	4873      	ldr	r0, [pc, #460]	; (8005b2c <__ieee754_pow+0x224>)
 8005960:	b00d      	add	sp, #52	; 0x34
 8005962:	ecbd 8b06 	vpop	{d8-d10}
 8005966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596a:	f000 bdc1 	b.w	80064f0 <nan>
 800596e:	f1b9 0f00 	cmp.w	r9, #0
 8005972:	da36      	bge.n	80059e2 <__ieee754_pow+0xda>
 8005974:	496e      	ldr	r1, [pc, #440]	; (8005b30 <__ieee754_pow+0x228>)
 8005976:	428e      	cmp	r6, r1
 8005978:	dc51      	bgt.n	8005a1e <__ieee754_pow+0x116>
 800597a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800597e:	428e      	cmp	r6, r1
 8005980:	f340 84b0 	ble.w	80062e4 <__ieee754_pow+0x9dc>
 8005984:	1531      	asrs	r1, r6, #20
 8005986:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800598a:	2914      	cmp	r1, #20
 800598c:	dd0f      	ble.n	80059ae <__ieee754_pow+0xa6>
 800598e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8005992:	fa20 fc01 	lsr.w	ip, r0, r1
 8005996:	fa0c f101 	lsl.w	r1, ip, r1
 800599a:	4281      	cmp	r1, r0
 800599c:	f040 84a2 	bne.w	80062e4 <__ieee754_pow+0x9dc>
 80059a0:	f00c 0c01 	and.w	ip, ip, #1
 80059a4:	f1cc 0102 	rsb	r1, ip, #2
 80059a8:	9100      	str	r1, [sp, #0]
 80059aa:	b180      	cbz	r0, 80059ce <__ieee754_pow+0xc6>
 80059ac:	e059      	b.n	8005a62 <__ieee754_pow+0x15a>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d155      	bne.n	8005a5e <__ieee754_pow+0x156>
 80059b2:	f1c1 0114 	rsb	r1, r1, #20
 80059b6:	fa46 fc01 	asr.w	ip, r6, r1
 80059ba:	fa0c f101 	lsl.w	r1, ip, r1
 80059be:	42b1      	cmp	r1, r6
 80059c0:	f040 848d 	bne.w	80062de <__ieee754_pow+0x9d6>
 80059c4:	f00c 0c01 	and.w	ip, ip, #1
 80059c8:	f1cc 0102 	rsb	r1, ip, #2
 80059cc:	9100      	str	r1, [sp, #0]
 80059ce:	4959      	ldr	r1, [pc, #356]	; (8005b34 <__ieee754_pow+0x22c>)
 80059d0:	428e      	cmp	r6, r1
 80059d2:	d12d      	bne.n	8005a30 <__ieee754_pow+0x128>
 80059d4:	2f00      	cmp	r7, #0
 80059d6:	da79      	bge.n	8005acc <__ieee754_pow+0x1c4>
 80059d8:	2000      	movs	r0, #0
 80059da:	4956      	ldr	r1, [pc, #344]	; (8005b34 <__ieee754_pow+0x22c>)
 80059dc:	f7fa ff1a 	bl	8000814 <__aeabi_ddiv>
 80059e0:	e016      	b.n	8005a10 <__ieee754_pow+0x108>
 80059e2:	2100      	movs	r1, #0
 80059e4:	9100      	str	r1, [sp, #0]
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d13b      	bne.n	8005a62 <__ieee754_pow+0x15a>
 80059ea:	494f      	ldr	r1, [pc, #316]	; (8005b28 <__ieee754_pow+0x220>)
 80059ec:	428e      	cmp	r6, r1
 80059ee:	d1ee      	bne.n	80059ce <__ieee754_pow+0xc6>
 80059f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80059f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80059f8:	ea53 0308 	orrs.w	r3, r3, r8
 80059fc:	f000 8467 	beq.w	80062ce <__ieee754_pow+0x9c6>
 8005a00:	4b4d      	ldr	r3, [pc, #308]	; (8005b38 <__ieee754_pow+0x230>)
 8005a02:	429c      	cmp	r4, r3
 8005a04:	dd0d      	ble.n	8005a22 <__ieee754_pow+0x11a>
 8005a06:	2f00      	cmp	r7, #0
 8005a08:	f280 8465 	bge.w	80062d6 <__ieee754_pow+0x9ce>
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	2100      	movs	r1, #0
 8005a10:	ec41 0b10 	vmov	d0, r0, r1
 8005a14:	b00d      	add	sp, #52	; 0x34
 8005a16:	ecbd 8b06 	vpop	{d8-d10}
 8005a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1e:	2102      	movs	r1, #2
 8005a20:	e7e0      	b.n	80059e4 <__ieee754_pow+0xdc>
 8005a22:	2f00      	cmp	r7, #0
 8005a24:	daf2      	bge.n	8005a0c <__ieee754_pow+0x104>
 8005a26:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005a2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a2e:	e7ef      	b.n	8005a10 <__ieee754_pow+0x108>
 8005a30:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005a34:	d104      	bne.n	8005a40 <__ieee754_pow+0x138>
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f7fa fdc1 	bl	80005c0 <__aeabi_dmul>
 8005a3e:	e7e7      	b.n	8005a10 <__ieee754_pow+0x108>
 8005a40:	493e      	ldr	r1, [pc, #248]	; (8005b3c <__ieee754_pow+0x234>)
 8005a42:	428f      	cmp	r7, r1
 8005a44:	d10d      	bne.n	8005a62 <__ieee754_pow+0x15a>
 8005a46:	f1b9 0f00 	cmp.w	r9, #0
 8005a4a:	db0a      	blt.n	8005a62 <__ieee754_pow+0x15a>
 8005a4c:	ec43 2b10 	vmov	d0, r2, r3
 8005a50:	b00d      	add	sp, #52	; 0x34
 8005a52:	ecbd 8b06 	vpop	{d8-d10}
 8005a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5a:	f000 bc7b 	b.w	8006354 <__ieee754_sqrt>
 8005a5e:	2100      	movs	r1, #0
 8005a60:	9100      	str	r1, [sp, #0]
 8005a62:	ec43 2b10 	vmov	d0, r2, r3
 8005a66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a6a:	f000 fd2b 	bl	80064c4 <fabs>
 8005a6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a72:	ec51 0b10 	vmov	r0, r1, d0
 8005a76:	f1b8 0f00 	cmp.w	r8, #0
 8005a7a:	d12a      	bne.n	8005ad2 <__ieee754_pow+0x1ca>
 8005a7c:	b12c      	cbz	r4, 8005a8a <__ieee754_pow+0x182>
 8005a7e:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8005a82:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8005b34 <__ieee754_pow+0x22c>
 8005a86:	45e6      	cmp	lr, ip
 8005a88:	d123      	bne.n	8005ad2 <__ieee754_pow+0x1ca>
 8005a8a:	2f00      	cmp	r7, #0
 8005a8c:	da05      	bge.n	8005a9a <__ieee754_pow+0x192>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	2000      	movs	r0, #0
 8005a94:	4927      	ldr	r1, [pc, #156]	; (8005b34 <__ieee754_pow+0x22c>)
 8005a96:	f7fa febd 	bl	8000814 <__aeabi_ddiv>
 8005a9a:	f1b9 0f00 	cmp.w	r9, #0
 8005a9e:	dab7      	bge.n	8005a10 <__ieee754_pow+0x108>
 8005aa0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005aa4:	9b00      	ldr	r3, [sp, #0]
 8005aa6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005aaa:	4323      	orrs	r3, r4
 8005aac:	d108      	bne.n	8005ac0 <__ieee754_pow+0x1b8>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	f7fa fbcb 	bl	8000250 <__aeabi_dsub>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	e78d      	b.n	80059dc <__ieee754_pow+0xd4>
 8005ac0:	9b00      	ldr	r3, [sp, #0]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d1a4      	bne.n	8005a10 <__ieee754_pow+0x108>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	e79e      	b.n	8005a10 <__ieee754_pow+0x108>
 8005ad2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8005ad6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8005ada:	950a      	str	r5, [sp, #40]	; 0x28
 8005adc:	9d00      	ldr	r5, [sp, #0]
 8005ade:	46ac      	mov	ip, r5
 8005ae0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005ae2:	ea5c 0505 	orrs.w	r5, ip, r5
 8005ae6:	d0e4      	beq.n	8005ab2 <__ieee754_pow+0x1aa>
 8005ae8:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <__ieee754_pow+0x238>)
 8005aea:	429e      	cmp	r6, r3
 8005aec:	f340 80fc 	ble.w	8005ce8 <__ieee754_pow+0x3e0>
 8005af0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005af4:	429e      	cmp	r6, r3
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <__ieee754_pow+0x230>)
 8005af8:	dd07      	ble.n	8005b0a <__ieee754_pow+0x202>
 8005afa:	429c      	cmp	r4, r3
 8005afc:	dc0a      	bgt.n	8005b14 <__ieee754_pow+0x20c>
 8005afe:	2f00      	cmp	r7, #0
 8005b00:	da84      	bge.n	8005a0c <__ieee754_pow+0x104>
 8005b02:	a307      	add	r3, pc, #28	; (adr r3, 8005b20 <__ieee754_pow+0x218>)
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	e795      	b.n	8005a36 <__ieee754_pow+0x12e>
 8005b0a:	429c      	cmp	r4, r3
 8005b0c:	dbf7      	blt.n	8005afe <__ieee754_pow+0x1f6>
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <__ieee754_pow+0x22c>)
 8005b10:	429c      	cmp	r4, r3
 8005b12:	dd17      	ble.n	8005b44 <__ieee754_pow+0x23c>
 8005b14:	2f00      	cmp	r7, #0
 8005b16:	dcf4      	bgt.n	8005b02 <__ieee754_pow+0x1fa>
 8005b18:	e778      	b.n	8005a0c <__ieee754_pow+0x104>
 8005b1a:	bf00      	nop
 8005b1c:	f3af 8000 	nop.w
 8005b20:	8800759c 	.word	0x8800759c
 8005b24:	7e37e43c 	.word	0x7e37e43c
 8005b28:	7ff00000 	.word	0x7ff00000
 8005b2c:	080068cd 	.word	0x080068cd
 8005b30:	433fffff 	.word	0x433fffff
 8005b34:	3ff00000 	.word	0x3ff00000
 8005b38:	3fefffff 	.word	0x3fefffff
 8005b3c:	3fe00000 	.word	0x3fe00000
 8005b40:	41e00000 	.word	0x41e00000
 8005b44:	2200      	movs	r2, #0
 8005b46:	4b64      	ldr	r3, [pc, #400]	; (8005cd8 <__ieee754_pow+0x3d0>)
 8005b48:	f7fa fb82 	bl	8000250 <__aeabi_dsub>
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	460d      	mov	r5, r1
 8005b50:	a355      	add	r3, pc, #340	; (adr r3, 8005ca8 <__ieee754_pow+0x3a0>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fd33 	bl	80005c0 <__aeabi_dmul>
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460f      	mov	r7, r1
 8005b5e:	4620      	mov	r0, r4
 8005b60:	4629      	mov	r1, r5
 8005b62:	a353      	add	r3, pc, #332	; (adr r3, 8005cb0 <__ieee754_pow+0x3a8>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa fd2a 	bl	80005c0 <__aeabi_dmul>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4682      	mov	sl, r0
 8005b70:	468b      	mov	fp, r1
 8005b72:	4b5a      	ldr	r3, [pc, #360]	; (8005cdc <__ieee754_pow+0x3d4>)
 8005b74:	4620      	mov	r0, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	f7fa fd22 	bl	80005c0 <__aeabi_dmul>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	a14d      	add	r1, pc, #308	; (adr r1, 8005cb8 <__ieee754_pow+0x3b0>)
 8005b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b86:	f7fa fb63 	bl	8000250 <__aeabi_dsub>
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	462b      	mov	r3, r5
 8005b8e:	f7fa fd17 	bl	80005c0 <__aeabi_dmul>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	2000      	movs	r0, #0
 8005b98:	4951      	ldr	r1, [pc, #324]	; (8005ce0 <__ieee754_pow+0x3d8>)
 8005b9a:	f7fa fb59 	bl	8000250 <__aeabi_dsub>
 8005b9e:	4680      	mov	r8, r0
 8005ba0:	4689      	mov	r9, r1
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	4629      	mov	r1, r5
 8005baa:	2400      	movs	r4, #0
 8005bac:	f7fa fd08 	bl	80005c0 <__aeabi_dmul>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	f7fa fd02 	bl	80005c0 <__aeabi_dmul>
 8005bbc:	a340      	add	r3, pc, #256	; (adr r3, 8005cc0 <__ieee754_pow+0x3b8>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa fcfd 	bl	80005c0 <__aeabi_dmul>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4650      	mov	r0, sl
 8005bcc:	4659      	mov	r1, fp
 8005bce:	f7fa fb3f 	bl	8000250 <__aeabi_dsub>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4680      	mov	r8, r0
 8005bd8:	4689      	mov	r9, r1
 8005bda:	4630      	mov	r0, r6
 8005bdc:	4639      	mov	r1, r7
 8005bde:	f7fa fb39 	bl	8000254 <__adddf3>
 8005be2:	4632      	mov	r2, r6
 8005be4:	463b      	mov	r3, r7
 8005be6:	4620      	mov	r0, r4
 8005be8:	460d      	mov	r5, r1
 8005bea:	f7fa fb31 	bl	8000250 <__aeabi_dsub>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	f7fa fb2b 	bl	8000250 <__aeabi_dsub>
 8005bfa:	9b00      	ldr	r3, [sp, #0]
 8005bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bfe:	4682      	mov	sl, r0
 8005c00:	3b01      	subs	r3, #1
 8005c02:	468b      	mov	fp, r1
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f040 81f1 	bne.w	8005fec <__ieee754_pow+0x6e4>
 8005c0a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005cc8 <__ieee754_pow+0x3c0>
 8005c0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c12:	2600      	movs	r6, #0
 8005c14:	eeb0 8a47 	vmov.f32	s16, s14
 8005c18:	eef0 8a67 	vmov.f32	s17, s15
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	4632      	mov	r2, r6
 8005c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c24:	f7fa fb14 	bl	8000250 <__aeabi_dsub>
 8005c28:	4622      	mov	r2, r4
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	f7fa fcc8 	bl	80005c0 <__aeabi_dmul>
 8005c30:	4680      	mov	r8, r0
 8005c32:	4689      	mov	r9, r1
 8005c34:	4650      	mov	r0, sl
 8005c36:	4659      	mov	r1, fp
 8005c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c3c:	f7fa fcc0 	bl	80005c0 <__aeabi_dmul>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4640      	mov	r0, r8
 8005c46:	4649      	mov	r1, r9
 8005c48:	f7fa fb04 	bl	8000254 <__adddf3>
 8005c4c:	4680      	mov	r8, r0
 8005c4e:	4689      	mov	r9, r1
 8005c50:	4632      	mov	r2, r6
 8005c52:	463b      	mov	r3, r7
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	f7fa fcb2 	bl	80005c0 <__aeabi_dmul>
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4604      	mov	r4, r0
 8005c60:	460d      	mov	r5, r1
 8005c62:	4602      	mov	r2, r0
 8005c64:	4649      	mov	r1, r9
 8005c66:	4640      	mov	r0, r8
 8005c68:	f7fa faf4 	bl	8000254 <__adddf3>
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <__ieee754_pow+0x3dc>)
 8005c6e:	4606      	mov	r6, r0
 8005c70:	460f      	mov	r7, r1
 8005c72:	4299      	cmp	r1, r3
 8005c74:	468b      	mov	fp, r1
 8005c76:	ec45 4b19 	vmov	d9, r4, r5
 8005c7a:	f340 82ff 	ble.w	800627c <__ieee754_pow+0x974>
 8005c7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005c82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005c86:	4303      	orrs	r3, r0
 8005c88:	f000 81f0 	beq.w	800606c <__ieee754_pow+0x764>
 8005c8c:	a310      	add	r3, pc, #64	; (adr r3, 8005cd0 <__ieee754_pow+0x3c8>)
 8005c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c92:	ec51 0b18 	vmov	r0, r1, d8
 8005c96:	f7fa fc93 	bl	80005c0 <__aeabi_dmul>
 8005c9a:	a30d      	add	r3, pc, #52	; (adr r3, 8005cd0 <__ieee754_pow+0x3c8>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	e6cb      	b.n	8005a3a <__ieee754_pow+0x132>
 8005ca2:	bf00      	nop
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	60000000 	.word	0x60000000
 8005cac:	3ff71547 	.word	0x3ff71547
 8005cb0:	f85ddf44 	.word	0xf85ddf44
 8005cb4:	3e54ae0b 	.word	0x3e54ae0b
 8005cb8:	55555555 	.word	0x55555555
 8005cbc:	3fd55555 	.word	0x3fd55555
 8005cc0:	652b82fe 	.word	0x652b82fe
 8005cc4:	3ff71547 	.word	0x3ff71547
 8005cc8:	00000000 	.word	0x00000000
 8005ccc:	bff00000 	.word	0xbff00000
 8005cd0:	8800759c 	.word	0x8800759c
 8005cd4:	7e37e43c 	.word	0x7e37e43c
 8005cd8:	3ff00000 	.word	0x3ff00000
 8005cdc:	3fd00000 	.word	0x3fd00000
 8005ce0:	3fe00000 	.word	0x3fe00000
 8005ce4:	408fffff 	.word	0x408fffff
 8005ce8:	4bd7      	ldr	r3, [pc, #860]	; (8006048 <__ieee754_pow+0x740>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	ea03 0309 	and.w	r3, r3, r9
 8005cf0:	b92b      	cbnz	r3, 8005cfe <__ieee754_pow+0x3f6>
 8005cf2:	4bd6      	ldr	r3, [pc, #856]	; (800604c <__ieee754_pow+0x744>)
 8005cf4:	f7fa fc64 	bl	80005c0 <__aeabi_dmul>
 8005cf8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	1523      	asrs	r3, r4, #20
 8005d00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005d04:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d08:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005d12:	9309      	str	r3, [sp, #36]	; 0x24
 8005d14:	4bce      	ldr	r3, [pc, #824]	; (8006050 <__ieee754_pow+0x748>)
 8005d16:	429c      	cmp	r4, r3
 8005d18:	dd08      	ble.n	8005d2c <__ieee754_pow+0x424>
 8005d1a:	4bce      	ldr	r3, [pc, #824]	; (8006054 <__ieee754_pow+0x74c>)
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	f340 8163 	ble.w	8005fe8 <__ieee754_pow+0x6e0>
 8005d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d24:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005d28:	3301      	adds	r3, #1
 8005d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d2c:	2400      	movs	r4, #0
 8005d2e:	00e3      	lsls	r3, r4, #3
 8005d30:	4682      	mov	sl, r0
 8005d32:	4629      	mov	r1, r5
 8005d34:	46ab      	mov	fp, r5
 8005d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d38:	4bc7      	ldr	r3, [pc, #796]	; (8006058 <__ieee754_pow+0x750>)
 8005d3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d3e:	ed93 7b00 	vldr	d7, [r3]
 8005d42:	eeb0 8a47 	vmov.f32	s16, s14
 8005d46:	eef0 8a67 	vmov.f32	s17, s15
 8005d4a:	ec53 2b17 	vmov	r2, r3, d7
 8005d4e:	f7fa fa7f 	bl	8000250 <__aeabi_dsub>
 8005d52:	4652      	mov	r2, sl
 8005d54:	4606      	mov	r6, r0
 8005d56:	460f      	mov	r7, r1
 8005d58:	462b      	mov	r3, r5
 8005d5a:	106d      	asrs	r5, r5, #1
 8005d5c:	ec51 0b18 	vmov	r0, r1, d8
 8005d60:	f7fa fa78 	bl	8000254 <__adddf3>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	2000      	movs	r0, #0
 8005d6a:	49bc      	ldr	r1, [pc, #752]	; (800605c <__ieee754_pow+0x754>)
 8005d6c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005d70:	f7fa fd50 	bl	8000814 <__aeabi_ddiv>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005d7c:	ec41 0b19 	vmov	d9, r0, r1
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f7fa fc1c 	bl	80005c0 <__aeabi_dmul>
 8005d88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d94:	2300      	movs	r3, #0
 8005d96:	2200      	movs	r2, #0
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005d9e:	4614      	mov	r4, r2
 8005da0:	461d      	mov	r5, r3
 8005da2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005da6:	4640      	mov	r0, r8
 8005da8:	4649      	mov	r1, r9
 8005daa:	f7fa fc09 	bl	80005c0 <__aeabi_dmul>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4630      	mov	r0, r6
 8005db4:	4639      	mov	r1, r7
 8005db6:	f7fa fa4b 	bl	8000250 <__aeabi_dsub>
 8005dba:	4606      	mov	r6, r0
 8005dbc:	460f      	mov	r7, r1
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	ec53 2b18 	vmov	r2, r3, d8
 8005dc6:	f7fa fa43 	bl	8000250 <__aeabi_dsub>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4650      	mov	r0, sl
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	f7fa fa3d 	bl	8000250 <__aeabi_dsub>
 8005dd6:	4642      	mov	r2, r8
 8005dd8:	464b      	mov	r3, r9
 8005dda:	f7fa fbf1 	bl	80005c0 <__aeabi_dmul>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4630      	mov	r0, r6
 8005de4:	4639      	mov	r1, r7
 8005de6:	f7fa fa33 	bl	8000250 <__aeabi_dsub>
 8005dea:	ec53 2b19 	vmov	r2, r3, d9
 8005dee:	f7fa fbe7 	bl	80005c0 <__aeabi_dmul>
 8005df2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005df6:	ec41 0b18 	vmov	d8, r0, r1
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	f7fa fbdf 	bl	80005c0 <__aeabi_dmul>
 8005e02:	4604      	mov	r4, r0
 8005e04:	460d      	mov	r5, r1
 8005e06:	a37c      	add	r3, pc, #496	; (adr r3, 8005ff8 <__ieee754_pow+0x6f0>)
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	f7fa fbd8 	bl	80005c0 <__aeabi_dmul>
 8005e10:	a37b      	add	r3, pc, #492	; (adr r3, 8006000 <__ieee754_pow+0x6f8>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f7fa fa1d 	bl	8000254 <__adddf3>
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	462b      	mov	r3, r5
 8005e1e:	f7fa fbcf 	bl	80005c0 <__aeabi_dmul>
 8005e22:	a379      	add	r3, pc, #484	; (adr r3, 8006008 <__ieee754_pow+0x700>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa fa14 	bl	8000254 <__adddf3>
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	462b      	mov	r3, r5
 8005e30:	f7fa fbc6 	bl	80005c0 <__aeabi_dmul>
 8005e34:	a376      	add	r3, pc, #472	; (adr r3, 8006010 <__ieee754_pow+0x708>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa fa0b 	bl	8000254 <__adddf3>
 8005e3e:	4622      	mov	r2, r4
 8005e40:	462b      	mov	r3, r5
 8005e42:	f7fa fbbd 	bl	80005c0 <__aeabi_dmul>
 8005e46:	a374      	add	r3, pc, #464	; (adr r3, 8006018 <__ieee754_pow+0x710>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa fa02 	bl	8000254 <__adddf3>
 8005e50:	4622      	mov	r2, r4
 8005e52:	462b      	mov	r3, r5
 8005e54:	f7fa fbb4 	bl	80005c0 <__aeabi_dmul>
 8005e58:	a371      	add	r3, pc, #452	; (adr r3, 8006020 <__ieee754_pow+0x718>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa f9f9 	bl	8000254 <__adddf3>
 8005e62:	4606      	mov	r6, r0
 8005e64:	460f      	mov	r7, r1
 8005e66:	4622      	mov	r2, r4
 8005e68:	462b      	mov	r3, r5
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	f7fa fba7 	bl	80005c0 <__aeabi_dmul>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4630      	mov	r0, r6
 8005e78:	4639      	mov	r1, r7
 8005e7a:	f7fa fba1 	bl	80005c0 <__aeabi_dmul>
 8005e7e:	4642      	mov	r2, r8
 8005e80:	4604      	mov	r4, r0
 8005e82:	460d      	mov	r5, r1
 8005e84:	464b      	mov	r3, r9
 8005e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e8a:	f7fa f9e3 	bl	8000254 <__adddf3>
 8005e8e:	ec53 2b18 	vmov	r2, r3, d8
 8005e92:	f7fa fb95 	bl	80005c0 <__aeabi_dmul>
 8005e96:	4622      	mov	r2, r4
 8005e98:	462b      	mov	r3, r5
 8005e9a:	f7fa f9db 	bl	8000254 <__adddf3>
 8005e9e:	4642      	mov	r2, r8
 8005ea0:	4682      	mov	sl, r0
 8005ea2:	468b      	mov	fp, r1
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	f7fa fb89 	bl	80005c0 <__aeabi_dmul>
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4b6b      	ldr	r3, [pc, #428]	; (8006060 <__ieee754_pow+0x758>)
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	460f      	mov	r7, r1
 8005eb6:	f7fa f9cd 	bl	8000254 <__adddf3>
 8005eba:	4652      	mov	r2, sl
 8005ebc:	465b      	mov	r3, fp
 8005ebe:	f7fa f9c9 	bl	8000254 <__adddf3>
 8005ec2:	9c04      	ldr	r4, [sp, #16]
 8005ec4:	460d      	mov	r5, r1
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4640      	mov	r0, r8
 8005ecc:	4649      	mov	r1, r9
 8005ece:	f7fa fb77 	bl	80005c0 <__aeabi_dmul>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	4680      	mov	r8, r0
 8005ed6:	4689      	mov	r9, r1
 8005ed8:	4b61      	ldr	r3, [pc, #388]	; (8006060 <__ieee754_pow+0x758>)
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f7fa f9b7 	bl	8000250 <__aeabi_dsub>
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	f7fa f9b3 	bl	8000250 <__aeabi_dsub>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4650      	mov	r0, sl
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	f7fa f9ad 	bl	8000250 <__aeabi_dsub>
 8005ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005efa:	f7fa fb61 	bl	80005c0 <__aeabi_dmul>
 8005efe:	4606      	mov	r6, r0
 8005f00:	460f      	mov	r7, r1
 8005f02:	4622      	mov	r2, r4
 8005f04:	462b      	mov	r3, r5
 8005f06:	ec51 0b18 	vmov	r0, r1, d8
 8005f0a:	f7fa fb59 	bl	80005c0 <__aeabi_dmul>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4630      	mov	r0, r6
 8005f14:	4639      	mov	r1, r7
 8005f16:	f7fa f99d 	bl	8000254 <__adddf3>
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	460f      	mov	r7, r1
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4640      	mov	r0, r8
 8005f24:	4649      	mov	r1, r9
 8005f26:	f7fa f995 	bl	8000254 <__adddf3>
 8005f2a:	9c04      	ldr	r4, [sp, #16]
 8005f2c:	460d      	mov	r5, r1
 8005f2e:	4620      	mov	r0, r4
 8005f30:	a33d      	add	r3, pc, #244	; (adr r3, 8006028 <__ieee754_pow+0x720>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa fb43 	bl	80005c0 <__aeabi_dmul>
 8005f3a:	4642      	mov	r2, r8
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	ec41 0b18 	vmov	d8, r0, r1
 8005f42:	4620      	mov	r0, r4
 8005f44:	4629      	mov	r1, r5
 8005f46:	f7fa f983 	bl	8000250 <__aeabi_dsub>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4630      	mov	r0, r6
 8005f50:	4639      	mov	r1, r7
 8005f52:	f7fa f97d 	bl	8000250 <__aeabi_dsub>
 8005f56:	a336      	add	r3, pc, #216	; (adr r3, 8006030 <__ieee754_pow+0x728>)
 8005f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5c:	f7fa fb30 	bl	80005c0 <__aeabi_dmul>
 8005f60:	4606      	mov	r6, r0
 8005f62:	460f      	mov	r7, r1
 8005f64:	4620      	mov	r0, r4
 8005f66:	4629      	mov	r1, r5
 8005f68:	a333      	add	r3, pc, #204	; (adr r3, 8006038 <__ieee754_pow+0x730>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f7fa fb27 	bl	80005c0 <__aeabi_dmul>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4630      	mov	r0, r6
 8005f78:	4639      	mov	r1, r7
 8005f7a:	f7fa f96b 	bl	8000254 <__adddf3>
 8005f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f80:	4b38      	ldr	r3, [pc, #224]	; (8006064 <__ieee754_pow+0x75c>)
 8005f82:	4413      	add	r3, r2
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa f964 	bl	8000254 <__adddf3>
 8005f8c:	4682      	mov	sl, r0
 8005f8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f90:	468b      	mov	fp, r1
 8005f92:	f7fa faab 	bl	80004ec <__aeabi_i2d>
 8005f96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f98:	4b33      	ldr	r3, [pc, #204]	; (8006068 <__ieee754_pow+0x760>)
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460f      	mov	r7, r1
 8005f9e:	4413      	add	r3, r2
 8005fa0:	4652      	mov	r2, sl
 8005fa2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fa6:	ec51 0b18 	vmov	r0, r1, d8
 8005faa:	465b      	mov	r3, fp
 8005fac:	f7fa f952 	bl	8000254 <__adddf3>
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	f7fa f94e 	bl	8000254 <__adddf3>
 8005fb8:	4632      	mov	r2, r6
 8005fba:	463b      	mov	r3, r7
 8005fbc:	f7fa f94a 	bl	8000254 <__adddf3>
 8005fc0:	9c04      	ldr	r4, [sp, #16]
 8005fc2:	4632      	mov	r2, r6
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	460d      	mov	r5, r1
 8005fca:	f7fa f941 	bl	8000250 <__aeabi_dsub>
 8005fce:	4642      	mov	r2, r8
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	f7fa f93d 	bl	8000250 <__aeabi_dsub>
 8005fd6:	ec53 2b18 	vmov	r2, r3, d8
 8005fda:	f7fa f939 	bl	8000250 <__aeabi_dsub>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4650      	mov	r0, sl
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	e606      	b.n	8005bf6 <__ieee754_pow+0x2ee>
 8005fe8:	2401      	movs	r4, #1
 8005fea:	e6a0      	b.n	8005d2e <__ieee754_pow+0x426>
 8005fec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006040 <__ieee754_pow+0x738>
 8005ff0:	e60d      	b.n	8005c0e <__ieee754_pow+0x306>
 8005ff2:	bf00      	nop
 8005ff4:	f3af 8000 	nop.w
 8005ff8:	4a454eef 	.word	0x4a454eef
 8005ffc:	3fca7e28 	.word	0x3fca7e28
 8006000:	93c9db65 	.word	0x93c9db65
 8006004:	3fcd864a 	.word	0x3fcd864a
 8006008:	a91d4101 	.word	0xa91d4101
 800600c:	3fd17460 	.word	0x3fd17460
 8006010:	518f264d 	.word	0x518f264d
 8006014:	3fd55555 	.word	0x3fd55555
 8006018:	db6fabff 	.word	0xdb6fabff
 800601c:	3fdb6db6 	.word	0x3fdb6db6
 8006020:	33333303 	.word	0x33333303
 8006024:	3fe33333 	.word	0x3fe33333
 8006028:	e0000000 	.word	0xe0000000
 800602c:	3feec709 	.word	0x3feec709
 8006030:	dc3a03fd 	.word	0xdc3a03fd
 8006034:	3feec709 	.word	0x3feec709
 8006038:	145b01f5 	.word	0x145b01f5
 800603c:	be3e2fe0 	.word	0xbe3e2fe0
 8006040:	00000000 	.word	0x00000000
 8006044:	3ff00000 	.word	0x3ff00000
 8006048:	7ff00000 	.word	0x7ff00000
 800604c:	43400000 	.word	0x43400000
 8006050:	0003988e 	.word	0x0003988e
 8006054:	000bb679 	.word	0x000bb679
 8006058:	080068d0 	.word	0x080068d0
 800605c:	3ff00000 	.word	0x3ff00000
 8006060:	40080000 	.word	0x40080000
 8006064:	080068f0 	.word	0x080068f0
 8006068:	080068e0 	.word	0x080068e0
 800606c:	a3b7      	add	r3, pc, #732	; (adr r3, 800634c <__ieee754_pow+0xa44>)
 800606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006072:	4640      	mov	r0, r8
 8006074:	4649      	mov	r1, r9
 8006076:	f7fa f8ed 	bl	8000254 <__adddf3>
 800607a:	4622      	mov	r2, r4
 800607c:	462b      	mov	r3, r5
 800607e:	ec41 0b1a 	vmov	d10, r0, r1
 8006082:	4630      	mov	r0, r6
 8006084:	4639      	mov	r1, r7
 8006086:	f7fa f8e3 	bl	8000250 <__aeabi_dsub>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	ec51 0b1a 	vmov	r0, r1, d10
 8006092:	f7fa fd25 	bl	8000ae0 <__aeabi_dcmpgt>
 8006096:	2800      	cmp	r0, #0
 8006098:	f47f adf8 	bne.w	8005c8c <__ieee754_pow+0x384>
 800609c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060a0:	4aa5      	ldr	r2, [pc, #660]	; (8006338 <__ieee754_pow+0xa30>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	f340 810c 	ble.w	80062c0 <__ieee754_pow+0x9b8>
 80060a8:	151b      	asrs	r3, r3, #20
 80060aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80060ae:	4ea3      	ldr	r6, [pc, #652]	; (800633c <__ieee754_pow+0xa34>)
 80060b0:	2000      	movs	r0, #0
 80060b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80060b6:	f1bb 0f00 	cmp.w	fp, #0
 80060ba:	fa4a f303 	asr.w	r3, sl, r3
 80060be:	445b      	add	r3, fp
 80060c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80060c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80060c8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80060cc:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80060d0:	fa46 f602 	asr.w	r6, r6, r2
 80060d4:	f1c2 0214 	rsb	r2, r2, #20
 80060d8:	ea23 0106 	bic.w	r1, r3, r6
 80060dc:	fa4a fa02 	asr.w	sl, sl, r2
 80060e0:	4602      	mov	r2, r0
 80060e2:	4620      	mov	r0, r4
 80060e4:	460b      	mov	r3, r1
 80060e6:	4629      	mov	r1, r5
 80060e8:	bfb8      	it	lt
 80060ea:	f1ca 0a00 	rsblt	sl, sl, #0
 80060ee:	f7fa f8af 	bl	8000250 <__aeabi_dsub>
 80060f2:	ec41 0b19 	vmov	d9, r0, r1
 80060f6:	2400      	movs	r4, #0
 80060f8:	4642      	mov	r2, r8
 80060fa:	464b      	mov	r3, r9
 80060fc:	ec51 0b19 	vmov	r0, r1, d9
 8006100:	f7fa f8a8 	bl	8000254 <__adddf3>
 8006104:	460d      	mov	r5, r1
 8006106:	4620      	mov	r0, r4
 8006108:	a379      	add	r3, pc, #484	; (adr r3, 80062f0 <__ieee754_pow+0x9e8>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f7fa fa57 	bl	80005c0 <__aeabi_dmul>
 8006112:	4606      	mov	r6, r0
 8006114:	460f      	mov	r7, r1
 8006116:	4620      	mov	r0, r4
 8006118:	4629      	mov	r1, r5
 800611a:	ec53 2b19 	vmov	r2, r3, d9
 800611e:	f7fa f897 	bl	8000250 <__aeabi_dsub>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4640      	mov	r0, r8
 8006128:	4649      	mov	r1, r9
 800612a:	f7fa f891 	bl	8000250 <__aeabi_dsub>
 800612e:	a372      	add	r3, pc, #456	; (adr r3, 80062f8 <__ieee754_pow+0x9f0>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f7fa fa44 	bl	80005c0 <__aeabi_dmul>
 8006138:	4680      	mov	r8, r0
 800613a:	4689      	mov	r9, r1
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	a36f      	add	r3, pc, #444	; (adr r3, 8006300 <__ieee754_pow+0x9f8>)
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f7fa fa3b 	bl	80005c0 <__aeabi_dmul>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa f87f 	bl	8000254 <__adddf3>
 8006156:	4604      	mov	r4, r0
 8006158:	460d      	mov	r5, r1
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4630      	mov	r0, r6
 8006160:	4639      	mov	r1, r7
 8006162:	f7fa f877 	bl	8000254 <__adddf3>
 8006166:	4632      	mov	r2, r6
 8006168:	4680      	mov	r8, r0
 800616a:	4689      	mov	r9, r1
 800616c:	463b      	mov	r3, r7
 800616e:	f7fa f86f 	bl	8000250 <__aeabi_dsub>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	f7fa f869 	bl	8000250 <__aeabi_dsub>
 800617e:	4642      	mov	r2, r8
 8006180:	4606      	mov	r6, r0
 8006182:	460f      	mov	r7, r1
 8006184:	464b      	mov	r3, r9
 8006186:	4640      	mov	r0, r8
 8006188:	4649      	mov	r1, r9
 800618a:	f7fa fa19 	bl	80005c0 <__aeabi_dmul>
 800618e:	4604      	mov	r4, r0
 8006190:	460d      	mov	r5, r1
 8006192:	a35d      	add	r3, pc, #372	; (adr r3, 8006308 <__ieee754_pow+0xa00>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f7fa fa12 	bl	80005c0 <__aeabi_dmul>
 800619c:	a35c      	add	r3, pc, #368	; (adr r3, 8006310 <__ieee754_pow+0xa08>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa f855 	bl	8000250 <__aeabi_dsub>
 80061a6:	4622      	mov	r2, r4
 80061a8:	462b      	mov	r3, r5
 80061aa:	f7fa fa09 	bl	80005c0 <__aeabi_dmul>
 80061ae:	a35a      	add	r3, pc, #360	; (adr r3, 8006318 <__ieee754_pow+0xa10>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f7fa f84e 	bl	8000254 <__adddf3>
 80061b8:	4622      	mov	r2, r4
 80061ba:	462b      	mov	r3, r5
 80061bc:	f7fa fa00 	bl	80005c0 <__aeabi_dmul>
 80061c0:	a357      	add	r3, pc, #348	; (adr r3, 8006320 <__ieee754_pow+0xa18>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fa f843 	bl	8000250 <__aeabi_dsub>
 80061ca:	4622      	mov	r2, r4
 80061cc:	462b      	mov	r3, r5
 80061ce:	f7fa f9f7 	bl	80005c0 <__aeabi_dmul>
 80061d2:	a355      	add	r3, pc, #340	; (adr r3, 8006328 <__ieee754_pow+0xa20>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7fa f83c 	bl	8000254 <__adddf3>
 80061dc:	4622      	mov	r2, r4
 80061de:	462b      	mov	r3, r5
 80061e0:	f7fa f9ee 	bl	80005c0 <__aeabi_dmul>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4640      	mov	r0, r8
 80061ea:	4649      	mov	r1, r9
 80061ec:	f7fa f830 	bl	8000250 <__aeabi_dsub>
 80061f0:	4604      	mov	r4, r0
 80061f2:	460d      	mov	r5, r1
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4640      	mov	r0, r8
 80061fa:	4649      	mov	r1, r9
 80061fc:	f7fa f9e0 	bl	80005c0 <__aeabi_dmul>
 8006200:	2200      	movs	r2, #0
 8006202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006206:	ec41 0b19 	vmov	d9, r0, r1
 800620a:	4620      	mov	r0, r4
 800620c:	4629      	mov	r1, r5
 800620e:	f7fa f81f 	bl	8000250 <__aeabi_dsub>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	ec51 0b19 	vmov	r0, r1, d9
 800621a:	f7fa fafb 	bl	8000814 <__aeabi_ddiv>
 800621e:	4632      	mov	r2, r6
 8006220:	4604      	mov	r4, r0
 8006222:	460d      	mov	r5, r1
 8006224:	463b      	mov	r3, r7
 8006226:	4640      	mov	r0, r8
 8006228:	4649      	mov	r1, r9
 800622a:	f7fa f9c9 	bl	80005c0 <__aeabi_dmul>
 800622e:	4632      	mov	r2, r6
 8006230:	463b      	mov	r3, r7
 8006232:	f7fa f80f 	bl	8000254 <__adddf3>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7fa f807 	bl	8000250 <__aeabi_dsub>
 8006242:	4642      	mov	r2, r8
 8006244:	464b      	mov	r3, r9
 8006246:	f7fa f803 	bl	8000250 <__aeabi_dsub>
 800624a:	460b      	mov	r3, r1
 800624c:	4602      	mov	r2, r0
 800624e:	493c      	ldr	r1, [pc, #240]	; (8006340 <__ieee754_pow+0xa38>)
 8006250:	2000      	movs	r0, #0
 8006252:	f7f9 fffd 	bl	8000250 <__aeabi_dsub>
 8006256:	e9cd 0100 	strd	r0, r1, [sp]
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006264:	da2f      	bge.n	80062c6 <__ieee754_pow+0x9be>
 8006266:	4650      	mov	r0, sl
 8006268:	ed9d 0b00 	vldr	d0, [sp]
 800626c:	f000 f9d4 	bl	8006618 <scalbn>
 8006270:	ec51 0b10 	vmov	r0, r1, d0
 8006274:	ec53 2b18 	vmov	r2, r3, d8
 8006278:	f7ff bbdf 	b.w	8005a3a <__ieee754_pow+0x132>
 800627c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006280:	4b30      	ldr	r3, [pc, #192]	; (8006344 <__ieee754_pow+0xa3c>)
 8006282:	429e      	cmp	r6, r3
 8006284:	f77f af0a 	ble.w	800609c <__ieee754_pow+0x794>
 8006288:	4b2f      	ldr	r3, [pc, #188]	; (8006348 <__ieee754_pow+0xa40>)
 800628a:	440b      	add	r3, r1
 800628c:	4303      	orrs	r3, r0
 800628e:	d00b      	beq.n	80062a8 <__ieee754_pow+0x9a0>
 8006290:	a327      	add	r3, pc, #156	; (adr r3, 8006330 <__ieee754_pow+0xa28>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	ec51 0b18 	vmov	r0, r1, d8
 800629a:	f7fa f991 	bl	80005c0 <__aeabi_dmul>
 800629e:	a324      	add	r3, pc, #144	; (adr r3, 8006330 <__ieee754_pow+0xa28>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7ff bbc9 	b.w	8005a3a <__ieee754_pow+0x132>
 80062a8:	4622      	mov	r2, r4
 80062aa:	462b      	mov	r3, r5
 80062ac:	f7f9 ffd0 	bl	8000250 <__aeabi_dsub>
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	f7fa fc0a 	bl	8000acc <__aeabi_dcmpge>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	f43f aeef 	beq.w	800609c <__ieee754_pow+0x794>
 80062be:	e7e7      	b.n	8006290 <__ieee754_pow+0x988>
 80062c0:	f04f 0a00 	mov.w	sl, #0
 80062c4:	e717      	b.n	80060f6 <__ieee754_pow+0x7ee>
 80062c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ca:	4619      	mov	r1, r3
 80062cc:	e7d2      	b.n	8006274 <__ieee754_pow+0x96c>
 80062ce:	2000      	movs	r0, #0
 80062d0:	491b      	ldr	r1, [pc, #108]	; (8006340 <__ieee754_pow+0xa38>)
 80062d2:	f7ff bb9d 	b.w	8005a10 <__ieee754_pow+0x108>
 80062d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062da:	f7ff bb99 	b.w	8005a10 <__ieee754_pow+0x108>
 80062de:	9000      	str	r0, [sp, #0]
 80062e0:	f7ff bb75 	b.w	80059ce <__ieee754_pow+0xc6>
 80062e4:	2100      	movs	r1, #0
 80062e6:	f7ff bb5f 	b.w	80059a8 <__ieee754_pow+0xa0>
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w
 80062f0:	00000000 	.word	0x00000000
 80062f4:	3fe62e43 	.word	0x3fe62e43
 80062f8:	fefa39ef 	.word	0xfefa39ef
 80062fc:	3fe62e42 	.word	0x3fe62e42
 8006300:	0ca86c39 	.word	0x0ca86c39
 8006304:	be205c61 	.word	0xbe205c61
 8006308:	72bea4d0 	.word	0x72bea4d0
 800630c:	3e663769 	.word	0x3e663769
 8006310:	c5d26bf1 	.word	0xc5d26bf1
 8006314:	3ebbbd41 	.word	0x3ebbbd41
 8006318:	af25de2c 	.word	0xaf25de2c
 800631c:	3f11566a 	.word	0x3f11566a
 8006320:	16bebd93 	.word	0x16bebd93
 8006324:	3f66c16c 	.word	0x3f66c16c
 8006328:	5555553e 	.word	0x5555553e
 800632c:	3fc55555 	.word	0x3fc55555
 8006330:	c2f8f359 	.word	0xc2f8f359
 8006334:	01a56e1f 	.word	0x01a56e1f
 8006338:	3fe00000 	.word	0x3fe00000
 800633c:	000fffff 	.word	0x000fffff
 8006340:	3ff00000 	.word	0x3ff00000
 8006344:	4090cbff 	.word	0x4090cbff
 8006348:	3f6f3400 	.word	0x3f6f3400
 800634c:	652b82fe 	.word	0x652b82fe
 8006350:	3c971547 	.word	0x3c971547

08006354 <__ieee754_sqrt>:
 8006354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006358:	4e59      	ldr	r6, [pc, #356]	; (80064c0 <__ieee754_sqrt+0x16c>)
 800635a:	ee10 0a10 	vmov	r0, s0
 800635e:	ee10 3a10 	vmov	r3, s0
 8006362:	ec55 4b10 	vmov	r4, r5, d0
 8006366:	43ae      	bics	r6, r5
 8006368:	4629      	mov	r1, r5
 800636a:	462a      	mov	r2, r5
 800636c:	d110      	bne.n	8006390 <__ieee754_sqrt+0x3c>
 800636e:	ee10 2a10 	vmov	r2, s0
 8006372:	462b      	mov	r3, r5
 8006374:	f7fa f924 	bl	80005c0 <__aeabi_dmul>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4620      	mov	r0, r4
 800637e:	4629      	mov	r1, r5
 8006380:	f7f9 ff68 	bl	8000254 <__adddf3>
 8006384:	4604      	mov	r4, r0
 8006386:	460d      	mov	r5, r1
 8006388:	ec45 4b10 	vmov	d0, r4, r5
 800638c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006390:	2d00      	cmp	r5, #0
 8006392:	dc10      	bgt.n	80063b6 <__ieee754_sqrt+0x62>
 8006394:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006398:	4330      	orrs	r0, r6
 800639a:	d0f5      	beq.n	8006388 <__ieee754_sqrt+0x34>
 800639c:	b15d      	cbz	r5, 80063b6 <__ieee754_sqrt+0x62>
 800639e:	ee10 2a10 	vmov	r2, s0
 80063a2:	462b      	mov	r3, r5
 80063a4:	ee10 0a10 	vmov	r0, s0
 80063a8:	f7f9 ff52 	bl	8000250 <__aeabi_dsub>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	f7fa fa30 	bl	8000814 <__aeabi_ddiv>
 80063b4:	e7e6      	b.n	8006384 <__ieee754_sqrt+0x30>
 80063b6:	1509      	asrs	r1, r1, #20
 80063b8:	d07a      	beq.n	80064b0 <__ieee754_sqrt+0x15c>
 80063ba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80063be:	07ce      	lsls	r6, r1, #31
 80063c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80063c4:	f04f 0e16 	mov.w	lr, #22
 80063c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80063cc:	bf5c      	itt	pl
 80063ce:	0fda      	lsrpl	r2, r3, #31
 80063d0:	005b      	lslpl	r3, r3, #1
 80063d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063d6:	bf58      	it	pl
 80063d8:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80063dc:	0fda      	lsrs	r2, r3, #31
 80063de:	106d      	asrs	r5, r5, #1
 80063e0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80063e4:	2000      	movs	r0, #0
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4684      	mov	ip, r0
 80063ea:	eb0c 0401 	add.w	r4, ip, r1
 80063ee:	4294      	cmp	r4, r2
 80063f0:	bfde      	ittt	le
 80063f2:	1b12      	suble	r2, r2, r4
 80063f4:	eb04 0c01 	addle.w	ip, r4, r1
 80063f8:	1840      	addle	r0, r0, r1
 80063fa:	f1be 0e01 	subs.w	lr, lr, #1
 80063fe:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006402:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006406:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800640a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800640e:	d1ec      	bne.n	80063ea <__ieee754_sqrt+0x96>
 8006410:	4671      	mov	r1, lr
 8006412:	2720      	movs	r7, #32
 8006414:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006418:	4562      	cmp	r2, ip
 800641a:	eb04 060e 	add.w	r6, r4, lr
 800641e:	dc02      	bgt.n	8006426 <__ieee754_sqrt+0xd2>
 8006420:	d114      	bne.n	800644c <__ieee754_sqrt+0xf8>
 8006422:	429e      	cmp	r6, r3
 8006424:	d812      	bhi.n	800644c <__ieee754_sqrt+0xf8>
 8006426:	2e00      	cmp	r6, #0
 8006428:	eb06 0e04 	add.w	lr, r6, r4
 800642c:	da45      	bge.n	80064ba <__ieee754_sqrt+0x166>
 800642e:	f1be 0f00 	cmp.w	lr, #0
 8006432:	db42      	blt.n	80064ba <__ieee754_sqrt+0x166>
 8006434:	f10c 0801 	add.w	r8, ip, #1
 8006438:	eba2 020c 	sub.w	r2, r2, ip
 800643c:	429e      	cmp	r6, r3
 800643e:	4421      	add	r1, r4
 8006440:	eba3 0306 	sub.w	r3, r3, r6
 8006444:	bf88      	it	hi
 8006446:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800644a:	46c4      	mov	ip, r8
 800644c:	0052      	lsls	r2, r2, #1
 800644e:	3f01      	subs	r7, #1
 8006450:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006454:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006458:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800645c:	d1dc      	bne.n	8006418 <__ieee754_sqrt+0xc4>
 800645e:	4313      	orrs	r3, r2
 8006460:	d006      	beq.n	8006470 <__ieee754_sqrt+0x11c>
 8006462:	1c4c      	adds	r4, r1, #1
 8006464:	bf13      	iteet	ne
 8006466:	3101      	addne	r1, #1
 8006468:	3001      	addeq	r0, #1
 800646a:	4639      	moveq	r1, r7
 800646c:	f021 0101 	bicne.w	r1, r1, #1
 8006470:	1043      	asrs	r3, r0, #1
 8006472:	07c2      	lsls	r2, r0, #31
 8006474:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006478:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800647c:	bf48      	it	mi
 800647e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006482:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006486:	460c      	mov	r4, r1
 8006488:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800648c:	463d      	mov	r5, r7
 800648e:	e77b      	b.n	8006388 <__ieee754_sqrt+0x34>
 8006490:	0ada      	lsrs	r2, r3, #11
 8006492:	3815      	subs	r0, #21
 8006494:	055b      	lsls	r3, r3, #21
 8006496:	2a00      	cmp	r2, #0
 8006498:	d0fa      	beq.n	8006490 <__ieee754_sqrt+0x13c>
 800649a:	02d7      	lsls	r7, r2, #11
 800649c:	d50a      	bpl.n	80064b4 <__ieee754_sqrt+0x160>
 800649e:	f1c1 0420 	rsb	r4, r1, #32
 80064a2:	1e4d      	subs	r5, r1, #1
 80064a4:	fa23 f404 	lsr.w	r4, r3, r4
 80064a8:	408b      	lsls	r3, r1
 80064aa:	1b41      	subs	r1, r0, r5
 80064ac:	4322      	orrs	r2, r4
 80064ae:	e784      	b.n	80063ba <__ieee754_sqrt+0x66>
 80064b0:	4608      	mov	r0, r1
 80064b2:	e7f0      	b.n	8006496 <__ieee754_sqrt+0x142>
 80064b4:	0052      	lsls	r2, r2, #1
 80064b6:	3101      	adds	r1, #1
 80064b8:	e7ef      	b.n	800649a <__ieee754_sqrt+0x146>
 80064ba:	46e0      	mov	r8, ip
 80064bc:	e7bc      	b.n	8006438 <__ieee754_sqrt+0xe4>
 80064be:	bf00      	nop
 80064c0:	7ff00000 	.word	0x7ff00000

080064c4 <fabs>:
 80064c4:	ec51 0b10 	vmov	r0, r1, d0
 80064c8:	ee10 2a10 	vmov	r2, s0
 80064cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064d0:	ec43 2b10 	vmov	d0, r2, r3
 80064d4:	4770      	bx	lr

080064d6 <finite>:
 80064d6:	b082      	sub	sp, #8
 80064d8:	ed8d 0b00 	vstr	d0, [sp]
 80064dc:	9801      	ldr	r0, [sp, #4]
 80064de:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80064e2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80064e6:	0fc0      	lsrs	r0, r0, #31
 80064e8:	b002      	add	sp, #8
 80064ea:	4770      	bx	lr
 80064ec:	0000      	movs	r0, r0
	...

080064f0 <nan>:
 80064f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80064f8 <nan+0x8>
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	00000000 	.word	0x00000000
 80064fc:	7ff80000 	.word	0x7ff80000

08006500 <rint>:
 8006500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006502:	ec51 0b10 	vmov	r0, r1, d0
 8006506:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800650a:	460b      	mov	r3, r1
 800650c:	ee10 4a10 	vmov	r4, s0
 8006510:	0fcd      	lsrs	r5, r1, #31
 8006512:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006516:	2e13      	cmp	r6, #19
 8006518:	dc58      	bgt.n	80065cc <rint+0xcc>
 800651a:	2e00      	cmp	r6, #0
 800651c:	da2b      	bge.n	8006576 <rint+0x76>
 800651e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006522:	4302      	orrs	r2, r0
 8006524:	d023      	beq.n	800656e <rint+0x6e>
 8006526:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800652a:	0c4b      	lsrs	r3, r1, #17
 800652c:	4302      	orrs	r2, r0
 800652e:	045b      	lsls	r3, r3, #17
 8006530:	4254      	negs	r4, r2
 8006532:	4314      	orrs	r4, r2
 8006534:	4602      	mov	r2, r0
 8006536:	0b24      	lsrs	r4, r4, #12
 8006538:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800653c:	ea44 0103 	orr.w	r1, r4, r3
 8006540:	4b32      	ldr	r3, [pc, #200]	; (800660c <rint+0x10c>)
 8006542:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006546:	e9d3 6700 	ldrd	r6, r7, [r3]
 800654a:	460b      	mov	r3, r1
 800654c:	4630      	mov	r0, r6
 800654e:	4639      	mov	r1, r7
 8006550:	f7f9 fe80 	bl	8000254 <__adddf3>
 8006554:	463b      	mov	r3, r7
 8006556:	4632      	mov	r2, r6
 8006558:	e9cd 0100 	strd	r0, r1, [sp]
 800655c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006560:	f7f9 fe76 	bl	8000250 <__aeabi_dsub>
 8006564:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006568:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800656c:	4639      	mov	r1, r7
 800656e:	ec41 0b10 	vmov	d0, r0, r1
 8006572:	b003      	add	sp, #12
 8006574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006576:	4a26      	ldr	r2, [pc, #152]	; (8006610 <rint+0x110>)
 8006578:	4132      	asrs	r2, r6
 800657a:	ea01 0702 	and.w	r7, r1, r2
 800657e:	4307      	orrs	r7, r0
 8006580:	d0f5      	beq.n	800656e <rint+0x6e>
 8006582:	0851      	lsrs	r1, r2, #1
 8006584:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8006588:	4314      	orrs	r4, r2
 800658a:	d00c      	beq.n	80065a6 <rint+0xa6>
 800658c:	ea23 0201 	bic.w	r2, r3, r1
 8006590:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006594:	2e13      	cmp	r6, #19
 8006596:	fa43 f606 	asr.w	r6, r3, r6
 800659a:	bf0c      	ite	eq
 800659c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80065a0:	2400      	movne	r4, #0
 80065a2:	ea42 0306 	orr.w	r3, r2, r6
 80065a6:	4919      	ldr	r1, [pc, #100]	; (800660c <rint+0x10c>)
 80065a8:	4622      	mov	r2, r4
 80065aa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80065ae:	e9d5 4500 	ldrd	r4, r5, [r5]
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7f9 fe4d 	bl	8000254 <__adddf3>
 80065ba:	4622      	mov	r2, r4
 80065bc:	462b      	mov	r3, r5
 80065be:	e9cd 0100 	strd	r0, r1, [sp]
 80065c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065c6:	f7f9 fe43 	bl	8000250 <__aeabi_dsub>
 80065ca:	e7d0      	b.n	800656e <rint+0x6e>
 80065cc:	2e33      	cmp	r6, #51	; 0x33
 80065ce:	dd07      	ble.n	80065e0 <rint+0xe0>
 80065d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80065d4:	d1cb      	bne.n	800656e <rint+0x6e>
 80065d6:	ee10 2a10 	vmov	r2, s0
 80065da:	f7f9 fe3b 	bl	8000254 <__adddf3>
 80065de:	e7c6      	b.n	800656e <rint+0x6e>
 80065e0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80065e4:	f04f 36ff 	mov.w	r6, #4294967295
 80065e8:	40d6      	lsrs	r6, r2
 80065ea:	4230      	tst	r0, r6
 80065ec:	d0bf      	beq.n	800656e <rint+0x6e>
 80065ee:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80065f2:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80065f6:	bf1f      	itttt	ne
 80065f8:	ea24 0101 	bicne.w	r1, r4, r1
 80065fc:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006600:	fa44 f202 	asrne.w	r2, r4, r2
 8006604:	ea41 0402 	orrne.w	r4, r1, r2
 8006608:	e7cd      	b.n	80065a6 <rint+0xa6>
 800660a:	bf00      	nop
 800660c:	08006900 	.word	0x08006900
 8006610:	000fffff 	.word	0x000fffff
 8006614:	00000000 	.word	0x00000000

08006618 <scalbn>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	ec55 4b10 	vmov	r4, r5, d0
 800661e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006622:	4606      	mov	r6, r0
 8006624:	462b      	mov	r3, r5
 8006626:	b99a      	cbnz	r2, 8006650 <scalbn+0x38>
 8006628:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800662c:	4323      	orrs	r3, r4
 800662e:	d036      	beq.n	800669e <scalbn+0x86>
 8006630:	4b39      	ldr	r3, [pc, #228]	; (8006718 <scalbn+0x100>)
 8006632:	4629      	mov	r1, r5
 8006634:	2200      	movs	r2, #0
 8006636:	ee10 0a10 	vmov	r0, s0
 800663a:	f7f9 ffc1 	bl	80005c0 <__aeabi_dmul>
 800663e:	4b37      	ldr	r3, [pc, #220]	; (800671c <scalbn+0x104>)
 8006640:	4604      	mov	r4, r0
 8006642:	460d      	mov	r5, r1
 8006644:	429e      	cmp	r6, r3
 8006646:	da10      	bge.n	800666a <scalbn+0x52>
 8006648:	a32b      	add	r3, pc, #172	; (adr r3, 80066f8 <scalbn+0xe0>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	e03a      	b.n	80066c6 <scalbn+0xae>
 8006650:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006654:	428a      	cmp	r2, r1
 8006656:	d10c      	bne.n	8006672 <scalbn+0x5a>
 8006658:	ee10 2a10 	vmov	r2, s0
 800665c:	4620      	mov	r0, r4
 800665e:	4629      	mov	r1, r5
 8006660:	f7f9 fdf8 	bl	8000254 <__adddf3>
 8006664:	4604      	mov	r4, r0
 8006666:	460d      	mov	r5, r1
 8006668:	e019      	b.n	800669e <scalbn+0x86>
 800666a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800666e:	460b      	mov	r3, r1
 8006670:	3a36      	subs	r2, #54	; 0x36
 8006672:	4432      	add	r2, r6
 8006674:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006678:	428a      	cmp	r2, r1
 800667a:	dd08      	ble.n	800668e <scalbn+0x76>
 800667c:	2d00      	cmp	r5, #0
 800667e:	a120      	add	r1, pc, #128	; (adr r1, 8006700 <scalbn+0xe8>)
 8006680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006684:	da1c      	bge.n	80066c0 <scalbn+0xa8>
 8006686:	a120      	add	r1, pc, #128	; (adr r1, 8006708 <scalbn+0xf0>)
 8006688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800668c:	e018      	b.n	80066c0 <scalbn+0xa8>
 800668e:	2a00      	cmp	r2, #0
 8006690:	dd08      	ble.n	80066a4 <scalbn+0x8c>
 8006692:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006696:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800669a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800669e:	ec45 4b10 	vmov	d0, r4, r5
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066a8:	da19      	bge.n	80066de <scalbn+0xc6>
 80066aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80066ae:	429e      	cmp	r6, r3
 80066b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80066b4:	dd0a      	ble.n	80066cc <scalbn+0xb4>
 80066b6:	a112      	add	r1, pc, #72	; (adr r1, 8006700 <scalbn+0xe8>)
 80066b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e2      	bne.n	8006686 <scalbn+0x6e>
 80066c0:	a30f      	add	r3, pc, #60	; (adr r3, 8006700 <scalbn+0xe8>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 ff7b 	bl	80005c0 <__aeabi_dmul>
 80066ca:	e7cb      	b.n	8006664 <scalbn+0x4c>
 80066cc:	a10a      	add	r1, pc, #40	; (adr r1, 80066f8 <scalbn+0xe0>)
 80066ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0b8      	beq.n	8006648 <scalbn+0x30>
 80066d6:	a10e      	add	r1, pc, #56	; (adr r1, 8006710 <scalbn+0xf8>)
 80066d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066dc:	e7b4      	b.n	8006648 <scalbn+0x30>
 80066de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066e2:	3236      	adds	r2, #54	; 0x36
 80066e4:	4620      	mov	r0, r4
 80066e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066ea:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80066ee:	2200      	movs	r2, #0
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <scalbn+0x108>)
 80066f2:	e7e8      	b.n	80066c6 <scalbn+0xae>
 80066f4:	f3af 8000 	nop.w
 80066f8:	c2f8f359 	.word	0xc2f8f359
 80066fc:	01a56e1f 	.word	0x01a56e1f
 8006700:	8800759c 	.word	0x8800759c
 8006704:	7e37e43c 	.word	0x7e37e43c
 8006708:	8800759c 	.word	0x8800759c
 800670c:	fe37e43c 	.word	0xfe37e43c
 8006710:	c2f8f359 	.word	0xc2f8f359
 8006714:	81a56e1f 	.word	0x81a56e1f
 8006718:	43500000 	.word	0x43500000
 800671c:	ffff3cb0 	.word	0xffff3cb0
 8006720:	3c900000 	.word	0x3c900000

08006724 <_init>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr

08006730 <_fini>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	bf00      	nop
 8006734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006736:	bc08      	pop	{r3}
 8006738:	469e      	mov	lr, r3
 800673a:	4770      	bx	lr

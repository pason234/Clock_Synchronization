
TestBoar3_M33.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ac  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003808  08003808  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003808  08003808  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003808  08003808  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  0800381c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  0800381c  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9ec  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5f  00000000  00000000  0002ea2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00030790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000315c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027884  00000000  00000000  00032328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e929  00000000  00000000  00059bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100181  00000000  00000000  000684d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b94  00000000  00000000  001686ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08003788 	.word	0x08003788

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08003788 	.word	0x08003788

08000234 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_9


void CS_Select (void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023e:	4802      	ldr	r0, [pc, #8]	; (8000248 <CS_Select+0x14>)
 8000240:	f001 f824 	bl	800128c <HAL_GPIO_WritePin>
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	42020400 	.word	0x42020400

0800024c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000256:	4802      	ldr	r0, [pc, #8]	; (8000260 <CS_UnSelect+0x14>)
 8000258:	f001 f818 	bl	800128c <HAL_GPIO_WritePin>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	42020400 	.word	0x42020400

08000264 <CE_Enable>:


void CE_Enable (void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026e:	4802      	ldr	r0, [pc, #8]	; (8000278 <CE_Enable+0x14>)
 8000270:	f001 f80c 	bl	800128c <HAL_GPIO_WritePin>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	42020400 	.word	0x42020400

0800027c <CE_Disable>:

void CE_Disable (void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	4802      	ldr	r0, [pc, #8]	; (8000290 <CE_Disable+0x14>)
 8000288:	f001 f800 	bl	800128c <HAL_GPIO_WritePin>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	42020400 	.word	0x42020400

08000294 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	460a      	mov	r2, r1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002b2:	f7ff ffbf 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002b6:	f107 010c 	add.w	r1, r7, #12
 80002ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002be:	2202      	movs	r2, #2
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <nrf24_WriteReg+0x40>)
 80002c2:	f002 f8f0 	bl	80024a6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002c6:	f7ff ffc1 	bl	800024c <CS_UnSelect>
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000028 	.word	0x20000028

080002d8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
 80002e4:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	f043 0320 	orr.w	r3, r3, #32
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002f0:	f7ff ffa0 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80002f4:	f107 0114 	add.w	r1, r7, #20
 80002f8:	2364      	movs	r3, #100	; 0x64
 80002fa:	2201      	movs	r2, #1
 80002fc:	4808      	ldr	r0, [pc, #32]	; (8000320 <nrf24_WriteRegMulti+0x48>)
 80002fe:	f002 f8d2 	bl	80024a6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	b29a      	uxth	r2, r3
 8000306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030a:	68b9      	ldr	r1, [r7, #8]
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <nrf24_WriteRegMulti+0x48>)
 800030e:	f002 f8ca 	bl	80024a6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000312:	f7ff ff9b 	bl	800024c <CS_UnSelect>
}
 8000316:	bf00      	nop
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028

08000324 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800032e:	2300      	movs	r3, #0
 8000330:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000332:	f7ff ff7f 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000336:	1df9      	adds	r1, r7, #7
 8000338:	2364      	movs	r3, #100	; 0x64
 800033a:	2201      	movs	r2, #1
 800033c:	4808      	ldr	r0, [pc, #32]	; (8000360 <nrf24_ReadReg+0x3c>)
 800033e:	f002 f8b2 	bl	80024a6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000342:	f107 010f 	add.w	r1, r7, #15
 8000346:	2364      	movs	r3, #100	; 0x64
 8000348:	2201      	movs	r2, #1
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <nrf24_ReadReg+0x3c>)
 800034c:	f002 fa19 	bl	8002782 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000350:	f7ff ff7c 	bl	800024c <CS_UnSelect>

	return data;
 8000354:	7bfb      	ldrb	r3, [r7, #15]
}
 8000356:	4618      	mov	r0, r3
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000028 	.word	0x20000028

08000364 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800036e:	f7ff ff61 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000372:	1df9      	adds	r1, r7, #7
 8000374:	2364      	movs	r3, #100	; 0x64
 8000376:	2201      	movs	r2, #1
 8000378:	4804      	ldr	r0, [pc, #16]	; (800038c <nrfsendCmd+0x28>)
 800037a:	f002 f894 	bl	80024a6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800037e:	f7ff ff65 	bl	800024c <CS_UnSelect>
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000028 	.word	0x20000028

08000390 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2b07      	cmp	r3, #7
 800039e:	d104      	bne.n	80003aa <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80003a0:	2100      	movs	r1, #0
 80003a2:	2007      	movs	r0, #7
 80003a4:	f7ff ff76 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80003a8:	e090      	b.n	80004cc <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b17      	cmp	r3, #23
 80003ae:	d104      	bne.n	80003ba <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003b0:	2111      	movs	r1, #17
 80003b2:	2017      	movs	r0, #23
 80003b4:	f7ff ff6e 	bl	8000294 <nrf24_WriteReg>
}
 80003b8:	e088      	b.n	80004cc <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80003ba:	2108      	movs	r1, #8
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ff69 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80003c2:	213f      	movs	r1, #63	; 0x3f
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff ff65 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80003ca:	2103      	movs	r1, #3
 80003cc:	2002      	movs	r0, #2
 80003ce:	f7ff ff61 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80003d2:	2103      	movs	r1, #3
 80003d4:	2003      	movs	r0, #3
 80003d6:	f7ff ff5d 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80003da:	2103      	movs	r1, #3
 80003dc:	2004      	movs	r0, #4
 80003de:	f7ff ff59 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80003e2:	2102      	movs	r1, #2
 80003e4:	2005      	movs	r0, #5
 80003e6:	f7ff ff55 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80003ea:	210e      	movs	r1, #14
 80003ec:	2006      	movs	r0, #6
 80003ee:	f7ff ff51 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80003f2:	2100      	movs	r1, #0
 80003f4:	2007      	movs	r0, #7
 80003f6:	f7ff ff4d 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80003fa:	2100      	movs	r1, #0
 80003fc:	2008      	movs	r0, #8
 80003fe:	f7ff ff49 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000402:	2100      	movs	r1, #0
 8000404:	2009      	movs	r0, #9
 8000406:	f7ff ff45 	bl	8000294 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800040a:	4a32      	ldr	r2, [pc, #200]	; (80004d4 <nrf24_reset+0x144>)
 800040c:	f107 0318 	add.w	r3, r7, #24
 8000410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000414:	6018      	str	r0, [r3, #0]
 8000416:	3304      	adds	r3, #4
 8000418:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800041a:	f107 0318 	add.w	r3, r7, #24
 800041e:	2205      	movs	r2, #5
 8000420:	4619      	mov	r1, r3
 8000422:	200a      	movs	r0, #10
 8000424:	f7ff ff58 	bl	80002d8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000428:	4a2b      	ldr	r2, [pc, #172]	; (80004d8 <nrf24_reset+0x148>)
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000432:	6018      	str	r0, [r3, #0]
 8000434:	3304      	adds	r3, #4
 8000436:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	2205      	movs	r2, #5
 800043e:	4619      	mov	r1, r3
 8000440:	200b      	movs	r0, #11
 8000442:	f7ff ff49 	bl	80002d8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000446:	21c3      	movs	r1, #195	; 0xc3
 8000448:	200c      	movs	r0, #12
 800044a:	f7ff ff23 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800044e:	21c4      	movs	r1, #196	; 0xc4
 8000450:	200d      	movs	r0, #13
 8000452:	f7ff ff1f 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000456:	21c5      	movs	r1, #197	; 0xc5
 8000458:	200e      	movs	r0, #14
 800045a:	f7ff ff1b 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800045e:	21c6      	movs	r1, #198	; 0xc6
 8000460:	200f      	movs	r0, #15
 8000462:	f7ff ff17 	bl	8000294 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000466:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <nrf24_reset+0x144>)
 8000468:	f107 0308 	add.w	r3, r7, #8
 800046c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000470:	6018      	str	r0, [r3, #0]
 8000472:	3304      	adds	r3, #4
 8000474:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	2205      	movs	r2, #5
 800047c:	4619      	mov	r1, r3
 800047e:	2010      	movs	r0, #16
 8000480:	f7ff ff2a 	bl	80002d8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000484:	2100      	movs	r1, #0
 8000486:	2011      	movs	r0, #17
 8000488:	f7ff ff04 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800048c:	2100      	movs	r1, #0
 800048e:	2012      	movs	r0, #18
 8000490:	f7ff ff00 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000494:	2100      	movs	r1, #0
 8000496:	2013      	movs	r0, #19
 8000498:	f7ff fefc 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800049c:	2100      	movs	r1, #0
 800049e:	2014      	movs	r0, #20
 80004a0:	f7ff fef8 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2015      	movs	r0, #21
 80004a8:	f7ff fef4 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80004ac:	2100      	movs	r1, #0
 80004ae:	2016      	movs	r0, #22
 80004b0:	f7ff fef0 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80004b4:	2111      	movs	r1, #17
 80004b6:	2017      	movs	r0, #23
 80004b8:	f7ff feec 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80004bc:	2100      	movs	r1, #0
 80004be:	201c      	movs	r0, #28
 80004c0:	f7ff fee8 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80004c4:	2100      	movs	r1, #0
 80004c6:	201d      	movs	r0, #29
 80004c8:	f7ff fee4 	bl	8000294 <nrf24_WriteReg>
}
 80004cc:	bf00      	nop
 80004ce:	3720      	adds	r7, #32
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	080037a0 	.word	0x080037a0
 80004d8:	080037a8 	.word	0x080037a8

080004dc <NRF24_Init>:




void NRF24_Init (void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80004e0:	f7ff fecc 	bl	800027c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff ff53 	bl	8000390 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80004ea:	2100      	movs	r1, #0
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fed1 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80004f2:	2100      	movs	r1, #0
 80004f4:	2001      	movs	r0, #1
 80004f6:	f7ff fecd 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80004fa:	2100      	movs	r1, #0
 80004fc:	2002      	movs	r0, #2
 80004fe:	f7ff fec9 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000502:	2103      	movs	r1, #3
 8000504:	2003      	movs	r0, #3
 8000506:	f7ff fec5 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800050a:	2100      	movs	r1, #0
 800050c:	2004      	movs	r0, #4
 800050e:	f7ff fec1 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000512:	2100      	movs	r1, #0
 8000514:	2005      	movs	r0, #5
 8000516:	f7ff febd 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800051a:	210e      	movs	r1, #14
 800051c:	2006      	movs	r0, #6
 800051e:	f7ff feb9 	bl	8000294 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000522:	f7ff fe9f 	bl	8000264 <CE_Enable>

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}

0800052a <NRF24_TxMode>:

// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b084      	sub	sp, #16
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	460b      	mov	r3, r1
 8000534:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000536:	f7ff fea1 	bl	800027c <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	4619      	mov	r1, r3
 800053e:	2005      	movs	r0, #5
 8000540:	f7ff fea8 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8000544:	2205      	movs	r2, #5
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	2010      	movs	r0, #16
 800054a:	f7ff fec5 	bl	80002d8 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff fee8 	bl	8000324 <nrf24_ReadReg>
 8000554:	4603      	mov	r3, r0
 8000556:	73fb      	strb	r3, [r7, #15]
    config = config | (1<<1);   // write 1 in the PWR_UP bit
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	73fb      	strb	r3, [r7, #15]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4619      	mov	r1, r3
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff fe95 	bl	8000294 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800056a:	f7ff fe7b 	bl	8000264 <CE_Enable>
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fb86 	bl	8000c8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f883 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f95f 	bl	8000848 <MX_GPIO_Init>
  MX_SPI1_Init();
 800058a:	f000 f8d1 	bl	8000730 <MX_SPI1_Init>
  MX_TIM2_Init();
 800058e:	f000 f90d 	bl	80007ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 8000592:	f7ff ffa3 	bl	80004dc <NRF24_Init>
  uint8_t TxAddress[] = {0xEE,0xDD,0xCC,0xBB,0xAA};
 8000596:	4a38      	ldr	r2, [pc, #224]	; (8000678 <main+0x100>)
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a0:	6018      	str	r0, [r3, #0]
 80005a2:	3304      	adds	r3, #4
 80005a4:	7019      	strb	r1, [r3, #0]
  NRF24_TxMode(TxAddress, 10);
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	210a      	movs	r1, #10
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ffbc 	bl	800052a <NRF24_TxMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t tmp_uwTick;
  uint8_t cmdtosend = 0, TxData[4];
 80005b2:	2300      	movs	r3, #0
 80005b4:	71fb      	strb	r3, [r7, #7]

  HAL_Delay(500);
 80005b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ba:	f000 fbdf 	bl	8000d7c <HAL_Delay>
  CS_Select();
 80005be:	f7ff fe39 	bl	8000234 <CS_Select>
  cmdtosend = W_TX_PAYLOAD;
 80005c2:	23a0      	movs	r3, #160	; 0xa0
 80005c4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &cmdtosend, 1, 100);
 80005c6:	1df9      	adds	r1, r7, #7
 80005c8:	2364      	movs	r3, #100	; 0x64
 80005ca:	2201      	movs	r2, #1
 80005cc:	482b      	ldr	r0, [pc, #172]	; (800067c <main+0x104>)
 80005ce:	f001 ff6a 	bl	80024a6 <HAL_SPI_Transmit>
  for (int i=0; i<4; i++){
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	e00f      	b.n	80005f8 <main+0x80>
  	TxData[i] = ((uwTick+2) >> 8*i) & 0b11111111;
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <main+0x108>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1c9a      	adds	r2, r3, #2
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	fa22 f303 	lsr.w	r3, r2, r3
 80005e6:	b2d9      	uxtb	r1, r3
 80005e8:	463a      	mov	r2, r7
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	4413      	add	r3, r2
 80005ee:	460a      	mov	r2, r1
 80005f0:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<4; i++){
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	ddec      	ble.n	80005d8 <main+0x60>
  }
  tmp_uwTick=uwTick+2;
 80005fe:	4b20      	ldr	r3, [pc, #128]	; (8000680 <main+0x108>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3302      	adds	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  while(uwTick!=tmp_uwTick);
 8000606:	bf00      	nop
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <main+0x108>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	429a      	cmp	r2, r3
 8000610:	d1fa      	bne.n	8000608 <main+0x90>
  HAL_SPI_Transmit(&hspi1, TxData, 4, 1);
 8000612:	4639      	mov	r1, r7
 8000614:	2301      	movs	r3, #1
 8000616:	2204      	movs	r2, #4
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <main+0x104>)
 800061a:	f001 ff44 	bl	80024a6 <HAL_SPI_Transmit>
  CS_UnSelect();
 800061e:	f7ff fe15 	bl	800024c <CS_UnSelect>
  HAL_Delay(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fbaa 	bl	8000d7c <HAL_Delay>
  uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8000628:	2017      	movs	r0, #23
 800062a:	f7ff fe7b 	bl	8000324 <nrf24_ReadReg>
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]
  if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3)))){
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	f003 0310 	and.w	r3, r3, #16
 8000638:	2b00      	cmp	r3, #0
 800063a:	d012      	beq.n	8000662 <main+0xea>
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	2b00      	cmp	r3, #0
 8000644:	d10d      	bne.n	8000662 <main+0xea>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000646:	2201      	movs	r2, #1
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <main+0x10c>)
 800064c:	f000 fe1e 	bl	800128c <HAL_GPIO_WritePin>
	  cmdtosend = FLUSH_TX;
 8000650:	23e1      	movs	r3, #225	; 0xe1
 8000652:	71fb      	strb	r3, [r7, #7]
	  nrfsendCmd(cmdtosend);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fe84 	bl	8000364 <nrfsendCmd>
	  nrf24_reset(FIFO_STATUS);
 800065c:	2017      	movs	r0, #23
 800065e:	f7ff fe97 	bl	8000390 <nrf24_reset>
  }

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	4808      	ldr	r0, [pc, #32]	; (8000688 <main+0x110>)
 8000668:	f000 fe28 	bl	80012bc <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800066c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000670:	f000 fb84 	bl	8000d7c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000674:	e7f5      	b.n	8000662 <main+0xea>
 8000676:	bf00      	nop
 8000678:	080037b0 	.word	0x080037b0
 800067c:	20000028 	.word	0x20000028
 8000680:	200000d8 	.word	0x200000d8
 8000684:	42020400 	.word	0x42020400
 8000688:	42020000 	.word	0x42020000

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b098      	sub	sp, #96	; 0x60
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2248      	movs	r2, #72	; 0x48
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 f86c 	bl	8003778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 fe2c 	bl	800130c <HAL_PWREx_ControlVoltageScaling>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006ba:	f000 f949 	bl	8000950 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006be:	2302      	movs	r3, #2
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2340      	movs	r3, #64	; 0x40
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80006d8:	2319      	movs	r3, #25
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006dc:	2307      	movs	r3, #7
 80006de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fe9d 	bl	800142c <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x70>
  {
    Error_Handler();
 80006f8:	f000 f92a 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2104      	movs	r1, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fb6a 	bl	8001df0 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000722:	f000 f915 	bl	8000950 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3760      	adds	r7, #96	; 0x60
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_SPI1_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_SPI1_Init+0x74>)
 800073c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI1_Init+0x74>)
 800074a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800074e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x74>)
 800075e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000762:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000766:	2218      	movs	r2, #24
 8000768:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x74>)
 800077e:	2207      	movs	r2, #7
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x74>)
 800078a:	2208      	movs	r2, #8
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_SPI1_Init+0x74>)
 8000790:	f001 fde6 	bl	8002360 <HAL_SPI_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 f8d9 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000028 	.word	0x20000028
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_TIM2_Init+0x98>)
 80007cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_TIM2_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_TIM2_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_TIM2_Init+0x98>)
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_TIM2_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM2_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f2:	4814      	ldr	r0, [pc, #80]	; (8000844 <MX_TIM2_Init+0x98>)
 80007f4:	f002 fcc0 	bl	8003178 <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007fe:	f000 f8a7 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_TIM2_Init+0x98>)
 8000810:	f002 fd09 	bl	8003226 <HAL_TIM_ConfigClockSource>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800081a:	f000 f899 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_TIM2_Init+0x98>)
 800082c:	f002 fef8 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000836:	f000 f88b 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000008c 	.word	0x2000008c

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <MX_GPIO_Init+0xf8>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a37      	ldr	r2, [pc, #220]	; (8000940 <MX_GPIO_Init+0xf8>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_GPIO_Init+0xf8>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MX_GPIO_Init+0xf8>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a31      	ldr	r2, [pc, #196]	; (8000940 <MX_GPIO_Init+0xf8>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_GPIO_Init+0xf8>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0xf8>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a2b      	ldr	r2, [pc, #172]	; (8000940 <MX_GPIO_Init+0xf8>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0xf8>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0xf8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <MX_GPIO_Init+0xf8>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_GPIO_Init+0xf8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c4:	481f      	ldr	r0, [pc, #124]	; (8000944 <MX_GPIO_Init+0xfc>)
 80008c6:	f000 fce1 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2103      	movs	r1, #3
 80008ce:	481e      	ldr	r0, [pc, #120]	; (8000948 <MX_GPIO_Init+0x100>)
 80008d0:	f000 fcdc 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80008da:	481c      	ldr	r0, [pc, #112]	; (800094c <MX_GPIO_Init+0x104>)
 80008dc:	f000 fcd6 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4812      	ldr	r0, [pc, #72]	; (8000944 <MX_GPIO_Init+0xfc>)
 80008fa:	f000 fb47 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008fe:	2303      	movs	r3, #3
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_GPIO_Init+0x100>)
 8000916:	f000 fb39 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800091a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_GPIO_Init+0x104>)
 8000934:	f000 fb2a 	bl	8000f8c <HAL_GPIO_Init>

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	42020000 	.word	0x42020000
 8000948:	42020c00 	.word	0x42020c00
 800094c:	42020400 	.word	0x42020400

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his 2 implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000992:	f000 fd17 	bl	80013c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_SPI_MspInit+0x7c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d127      	bne.n	8000a16 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_SPI_MspInit+0x80>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_SPI_MspInit+0x80>)
 80009cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_SPI_MspInit+0x80>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_SPI_MspInit+0x80>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_SPI_MspInit+0x80>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_SPI_MspInit+0x80>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009f6:	23e0      	movs	r3, #224	; 0xe0
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a06:	2305      	movs	r3, #5
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_SPI_MspInit+0x84>)
 8000a12:	f000 fabb 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40013000 	.word	0x40013000
 8000a24:	40021000 	.word	0x40021000
 8000a28:	42020000 	.word	0x42020000

08000a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a3c:	d10b      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_TIM_Base_MspInit+0x38>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_TIM_Base_MspInit+0x38>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_TIM_Base_MspInit+0x38>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//if (timeout>0) timeout--;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f942 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000ae6:	4b4f      	ldr	r3, [pc, #316]	; (8000c24 <SystemCoreClockUpdate+0x144>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d107      	bne.n	8000b02 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000af2:	4b4c      	ldr	r3, [pc, #304]	; (8000c24 <SystemCoreClockUpdate+0x144>)
 8000af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e005      	b.n	8000b0e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000b02:	4b48      	ldr	r3, [pc, #288]	; (8000c24 <SystemCoreClockUpdate+0x144>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	091b      	lsrs	r3, r3, #4
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000b0e:	4a46      	ldr	r2, [pc, #280]	; (8000c28 <SystemCoreClockUpdate+0x148>)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b18:	4b42      	ldr	r3, [pc, #264]	; (8000c24 <SystemCoreClockUpdate+0x144>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f003 030c 	and.w	r3, r3, #12
 8000b20:	2b0c      	cmp	r3, #12
 8000b22:	d866      	bhi.n	8000bf2 <SystemCoreClockUpdate+0x112>
 8000b24:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <SystemCoreClockUpdate+0x4c>)
 8000b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2a:	bf00      	nop
 8000b2c:	08000b61 	.word	0x08000b61
 8000b30:	08000bf3 	.word	0x08000bf3
 8000b34:	08000bf3 	.word	0x08000bf3
 8000b38:	08000bf3 	.word	0x08000bf3
 8000b3c:	08000b69 	.word	0x08000b69
 8000b40:	08000bf3 	.word	0x08000bf3
 8000b44:	08000bf3 	.word	0x08000bf3
 8000b48:	08000bf3 	.word	0x08000bf3
 8000b4c:	08000b71 	.word	0x08000b71
 8000b50:	08000bf3 	.word	0x08000bf3
 8000b54:	08000bf3 	.word	0x08000bf3
 8000b58:	08000bf3 	.word	0x08000bf3
 8000b5c:	08000b79 	.word	0x08000b79
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000b60:	4a32      	ldr	r2, [pc, #200]	; (8000c2c <SystemCoreClockUpdate+0x14c>)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	6013      	str	r3, [r2, #0]
      break;
 8000b66:	e048      	b.n	8000bfa <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <SystemCoreClockUpdate+0x14c>)
 8000b6a:	4a31      	ldr	r2, [pc, #196]	; (8000c30 <SystemCoreClockUpdate+0x150>)
 8000b6c:	601a      	str	r2, [r3, #0]
      break;
 8000b6e:	e044      	b.n	8000bfa <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <SystemCoreClockUpdate+0x14c>)
 8000b72:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <SystemCoreClockUpdate+0x154>)
 8000b74:	601a      	str	r2, [r3, #0]
      break;
 8000b76:	e040      	b.n	8000bfa <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000b78:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <SystemCoreClockUpdate+0x144>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <SystemCoreClockUpdate+0x144>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d003      	beq.n	8000b9e <SystemCoreClockUpdate+0xbe>
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d006      	beq.n	8000baa <SystemCoreClockUpdate+0xca>
 8000b9c:	e00b      	b.n	8000bb6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000b9e:	4a24      	ldr	r2, [pc, #144]	; (8000c30 <SystemCoreClockUpdate+0x150>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	613b      	str	r3, [r7, #16]
          break;
 8000ba8:	e00b      	b.n	8000bc2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000baa:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <SystemCoreClockUpdate+0x154>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	613b      	str	r3, [r7, #16]
          break;
 8000bb4:	e005      	b.n	8000bc2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	613b      	str	r3, [r7, #16]
          break;
 8000bc0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <SystemCoreClockUpdate+0x144>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <SystemCoreClockUpdate+0x144>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0e5b      	lsrs	r3, r3, #25
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	3301      	adds	r3, #1
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <SystemCoreClockUpdate+0x14c>)
 8000bee:	6013      	str	r3, [r2, #0]
      break;
 8000bf0:	e003      	b.n	8000bfa <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <SystemCoreClockUpdate+0x14c>)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	6013      	str	r3, [r2, #0]
      break;
 8000bf8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <SystemCoreClockUpdate+0x144>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	091b      	lsrs	r3, r3, #4
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <SystemCoreClockUpdate+0x158>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SystemCoreClockUpdate+0x14c>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	fa22 f303 	lsr.w	r3, r2, r3
 8000c14:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemCoreClockUpdate+0x14c>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	371c      	adds	r7, #28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000
 8000c28:	080037c8 	.word	0x080037c8
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	00f42400 	.word	0x00f42400
 8000c34:	007a1200 	.word	0x007a1200
 8000c38:	080037b8 	.word	0x080037b8

08000c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c40:	f7ff ff3c 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c46:	e003      	b.n	8000c50 <LoopCopyDataInit>

08000c48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c4e:	3104      	adds	r1, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c58:	d3f6      	bcc.n	8000c48 <CopyDataInit>
	ldr	r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c5c:	e002      	b.n	8000c64 <LoopFillZerobss>

08000c5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c60:	f842 3b04 	str.w	r3, [r2], #4

08000c64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <LoopForever+0x16>)
	cmp	r2, r3
 8000c66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c68:	d3f9      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c6a:	f002 fd61 	bl	8003730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6e:	f7ff fc83 	bl	8000578 <main>

08000c72 <LoopForever>:

LoopForever:
    b LoopForever
 8000c72:	e7fe      	b.n	8000c72 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c74:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8000c78:	08003810 	.word	0x08003810
	ldr	r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c80:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c84:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c88:	200000dc 	.word	0x200000dc

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>

08000c8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000c98:	2004      	movs	r0, #4
 8000c9a:	f000 f945 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000c9e:	f7ff ff1f 	bl	8000ae0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 f80e 	bl	8000cc4 <HAL_InitTick>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	e001      	b.n	8000cb8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb4:	f7ff fe52 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_InitTick+0x6c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d023      	beq.n	8000d20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_InitTick+0x70>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_InitTick+0x6c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f93f 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10f      	bne.n	8000d1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b07      	cmp	r3, #7
 8000cfe:	d809      	bhi.n	8000d14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f919 	bl	8000f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_InitTick+0x74>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e004      	b.n	8000d24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e001      	b.n	8000d24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200000d8 	.word	0x200000d8

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000d8 	.word	0x200000d8

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0152      	lsls	r2, r2, #5
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0152      	lsls	r2, r2, #5
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	bf28      	it	cs
 8000e9a:	2303      	movcs	r3, #3
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3303      	adds	r3, #3
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b04      	subs	r3, #4
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	2107      	movs	r1, #7
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff5e 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff90 	bl	8000e7c <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5f 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffb2 	bl	8000ee4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f9a:	e158      	b.n	800124e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 814a 	beq.w	8001248 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d00b      	beq.n	8000fd4 <HAL_GPIO_Init+0x48>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc8:	2b11      	cmp	r3, #17
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b12      	cmp	r3, #18
 8000fd2:	d130      	bne.n	8001036 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100a:	2201      	movs	r2, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	f003 0201 	and.w	r2, r3, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0xea>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b12      	cmp	r3, #18
 8001074:	d123      	bne.n	80010be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3208      	adds	r2, #8
 800107e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	6939      	ldr	r1, [r7, #16]
 80010ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0203 	and.w	r2, r3, #3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 80a4 	beq.w	8001248 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001100:	4a5a      	ldr	r2, [pc, #360]	; (800126c <HAL_GPIO_Init+0x2e0>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3318      	adds	r3, #24
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a52      	ldr	r2, [pc, #328]	; (8001270 <HAL_GPIO_Init+0x2e4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d025      	beq.n	8001178 <HAL_GPIO_Init+0x1ec>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a51      	ldr	r2, [pc, #324]	; (8001274 <HAL_GPIO_Init+0x2e8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d01f      	beq.n	8001174 <HAL_GPIO_Init+0x1e8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a50      	ldr	r2, [pc, #320]	; (8001278 <HAL_GPIO_Init+0x2ec>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d019      	beq.n	8001170 <HAL_GPIO_Init+0x1e4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a4f      	ldr	r2, [pc, #316]	; (800127c <HAL_GPIO_Init+0x2f0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d013      	beq.n	800116c <HAL_GPIO_Init+0x1e0>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <HAL_GPIO_Init+0x2f4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d00d      	beq.n	8001168 <HAL_GPIO_Init+0x1dc>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a4d      	ldr	r2, [pc, #308]	; (8001284 <HAL_GPIO_Init+0x2f8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x1d8>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a4c      	ldr	r2, [pc, #304]	; (8001288 <HAL_GPIO_Init+0x2fc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d101      	bne.n	8001160 <HAL_GPIO_Init+0x1d4>
 800115c:	2306      	movs	r3, #6
 800115e:	e00c      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001160:	2307      	movs	r3, #7
 8001162:	e00a      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001164:	2305      	movs	r3, #5
 8001166:	e008      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001168:	2304      	movs	r3, #4
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 800116c:	2303      	movs	r3, #3
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001178:	2300      	movs	r3, #0
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	00d2      	lsls	r2, r2, #3
 8001182:	4093      	lsls	r3, r2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800118a:	4938      	ldr	r1, [pc, #224]	; (800126c <HAL_GPIO_Init+0x2e0>)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3318      	adds	r3, #24
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <HAL_GPIO_Init+0x2e0>)
 800119a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011be:	4a2b      	ldr	r2, [pc, #172]	; (800126c <HAL_GPIO_Init+0x2e0>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_GPIO_Init+0x2e0>)
 80011c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ec:	4a1f      	ldr	r2, [pc, #124]	; (800126c <HAL_GPIO_Init+0x2e0>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_GPIO_Init+0x2e0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_GPIO_Init+0x2e0>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_GPIO_Init+0x2e0>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_GPIO_Init+0x2e0>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	f47f ae9f 	bne.w	8000f9c <HAL_GPIO_Init+0x10>
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	4002f400 	.word	0x4002f400
 8001270:	42020000 	.word	0x42020000
 8001274:	42020400 	.word	0x42020400
 8001278:	42020800 	.word	0x42020800
 800127c:	42020c00 	.word	0x42020c00
 8001280:	42021000 	.word	0x42021000
 8001284:	42021400 	.word	0x42021400
 8001288:	42021800 	.word	0x42021800

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4013      	ands	r3, r2
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43d9      	mvns	r1, r3
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	400b      	ands	r3, r1
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <HAL_PWREx_GetVoltageRange+0x18>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800131c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800131e:	f000 f861 	bl	80013e4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001322:	4603      	mov	r3, r0
 8001324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001328:	d101      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e03e      	b.n	80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800133a:	d101      	bne.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e035      	b.n	80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	d101      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	e02f      	b.n	80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001354:	4917      	ldr	r1, [pc, #92]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	095b      	lsrs	r3, r3, #5
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	09db      	lsrs	r3, r3, #7
 800136a:	2232      	movs	r2, #50	; 0x32
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	08db      	lsrs	r3, r3, #3
 8001378:	3301      	adds	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800137c:	e002      	b.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3b01      	subs	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001390:	d102      	bne.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f2      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a4:	d101      	bne.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e000      	b.n	80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40007000 	.word	0x40007000
 80013b8:	20000000 	.word	0x20000000
 80013bc:	0a7c5ac5 	.word	0x0a7c5ac5
 80013c0:	cccccccd 	.word	0xcccccccd

080013c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d2:	6093      	str	r3, [r2, #8]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40007000 	.word	0x40007000

080013e4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80013fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	e00a      	b.n	8001418 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800140c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	e001      	b.n	8001418 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000

0800142c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	f000 bcd0 	b.w	8001de0 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001440:	4ba3      	ldr	r3, [pc, #652]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800144a:	4ba1      	ldr	r3, [pc, #644]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80e9 	beq.w	8001634 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_RCC_OscConfig+0x4a>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	f040 8083 	bne.w	8001576 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d17f      	bne.n	8001576 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001476:	4b96      	ldr	r3, [pc, #600]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <HAL_RCC_OscConfig+0x64>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	f000 bca8 	b.w	8001de0 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001494:	4b8e      	ldr	r3, [pc, #568]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_RCC_OscConfig+0x7e>
 80014a0:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a8:	e005      	b.n	80014b6 <HAL_RCC_OscConfig+0x8a>
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80014ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d224      	bcs.n	8001504 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fe70 	bl	80021a4 <RCC_SetFlashLatencyFromMSIRange>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	f000 bc88 	b.w	8001de0 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d0:	4b7f      	ldr	r3, [pc, #508]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a7e      	ldr	r2, [pc, #504]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b7c      	ldr	r3, [pc, #496]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	4979      	ldr	r1, [pc, #484]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4974      	ldr	r1, [pc, #464]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
 8001502:	e026      	b.n	8001552 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001504:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a71      	ldr	r2, [pc, #452]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	496c      	ldr	r1, [pc, #432]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	4967      	ldr	r1, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10a      	bne.n	8001552 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fe2f 	bl	80021a4 <RCC_SetFlashLatencyFromMSIRange>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	f000 bc47 	b.w	8001de0 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001552:	f000 fe13 	bl	800217c <HAL_RCC_GetHCLKFreq>
 8001556:	4603      	mov	r3, r0
 8001558:	4a5e      	ldr	r2, [pc, #376]	; (80016d4 <HAL_RCC_OscConfig+0x2a8>)
 800155a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800155c:	4b5e      	ldr	r3, [pc, #376]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fbaf 	bl	8000cc4 <HAL_InitTick>
 8001566:	4603      	mov	r3, r0
 8001568:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d060      	beq.n	8001632 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	f000 bc35 	b.w	8001de0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d039      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800157e:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a53      	ldr	r2, [pc, #332]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158a:	f7ff fbeb 	bl	8000d64 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001590:	e00f      	b.n	80015b2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001592:	f7ff fbe7 	bl	8000d64 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d908      	bls.n	80015b2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f000 bc17 	b.w	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b2:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0e9      	beq.n	8001592 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a43      	ldr	r2, [pc, #268]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	493e      	ldr	r1, [pc, #248]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	4939      	ldr	r1, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
 80015f0:	e020      	b.n	8001634 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a36      	ldr	r2, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fbb1 	bl	8000d64 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001604:	e00e      	b.n	8001624 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001606:	f7ff fbad 	bl	8000d64 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d907      	bls.n	8001624 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e3dd      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ea      	bne.n	8001606 <HAL_RCC_OscConfig+0x1da>
 8001630:	e000      	b.n	8001634 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001632:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d07e      	beq.n	800173e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b08      	cmp	r3, #8
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x226>
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d10e      	bne.n	800166a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d10b      	bne.n	800166a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d06e      	beq.n	800173c <HAL_RCC_OscConfig+0x310>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d16a      	bne.n	800173c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e3ba      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x256>
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e01d      	b.n	80016be <HAL_RCC_OscConfig+0x292>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x27a>
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 8001692:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0x292>
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x2a4>)
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d020      	beq.n	8001708 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb4d 	bl	8000d64 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x2ce>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb42 	bl	8000d64 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d907      	bls.n	80016fa <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ea:	4b9f      	ldr	r3, [pc, #636]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e372      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fa:	4b9b      	ldr	r3, [pc, #620]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0ea      	beq.n	80016dc <HAL_RCC_OscConfig+0x2b0>
 8001706:	e01a      	b.n	800173e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fb2c 	bl	8000d64 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170e:	e00e      	b.n	800172e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fb28 	bl	8000d64 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d907      	bls.n	800172e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171e:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e358      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800172e:	4b8e      	ldr	r3, [pc, #568]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ea      	bne.n	8001710 <HAL_RCC_OscConfig+0x2e4>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d06c      	beq.n	8001824 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b04      	cmp	r3, #4
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x330>
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d119      	bne.n	800178a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d116      	bne.n	800178a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175c:	4b82      	ldr	r3, [pc, #520]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_OscConfig+0x348>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e335      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b7c      	ldr	r3, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	061b      	lsls	r3, r3, #24
 8001782:	4979      	ldr	r1, [pc, #484]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001788:	e04c      	b.n	8001824 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d029      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001792:	4b75      	ldr	r3, [pc, #468]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a74      	ldr	r2, [pc, #464]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fae1 	bl	8000d64 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a4:	e00e      	b.n	80017c4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fadd 	bl	8000d64 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d907      	bls.n	80017c4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b4:	4b6c      	ldr	r3, [pc, #432]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e30d      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ea      	beq.n	80017a6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b65      	ldr	r3, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	4962      	ldr	r1, [pc, #392]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
 80017e4:	e01e      	b.n	8001824 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b60      	ldr	r3, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a5f      	ldr	r2, [pc, #380]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80017ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff fab7 	bl	8000d64 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f8:	e00e      	b.n	8001818 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff fab3 	bl	8000d64 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d907      	bls.n	8001818 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e2e3      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ea      	bne.n	80017fa <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d05f      	beq.n	80018f0 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d038      	beq.n	80018aa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d108      	bne.n	8001852 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001840:	4b49      	ldr	r3, [pc, #292]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001846:	4a48      	ldr	r2, [pc, #288]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001848:	f023 0310 	bic.w	r3, r3, #16
 800184c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001850:	e007      	b.n	8001862 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001852:	4b45      	ldr	r3, [pc, #276]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001858:	4a43      	ldr	r2, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001868:	4a3f      	ldr	r2, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff fa77 	bl	8000d64 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001878:	e00f      	b.n	800189a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff fa73 	bl	8000d64 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b07      	cmp	r3, #7
 8001886:	d908      	bls.n	800189a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e2a2      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189a:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 800189c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0e8      	beq.n	800187a <HAL_RCC_OscConfig+0x44e>
 80018a8:	e022      	b.n	80018f0 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80018ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b0:	4a2d      	ldr	r2, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7ff fa53 	bl	8000d64 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c0:	e00f      	b.n	80018e2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c2:	f7ff fa4f 	bl	8000d64 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b07      	cmp	r3, #7
 80018ce:	d908      	bls.n	80018e2 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e27e      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1e8      	bne.n	80018c2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8131 	beq.w	8001b60 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10d      	bne.n	800192a <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	4a15      	ldr	r2, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6593      	str	r3, [r2, #88]	; 0x58
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_RCC_OscConfig+0x53c>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001926:	2301      	movs	r3, #1
 8001928:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_RCC_OscConfig+0x540>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d122      	bne.n	800197c <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_RCC_OscConfig+0x540>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0c      	ldr	r2, [pc, #48]	; (800196c <HAL_RCC_OscConfig+0x540>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001942:	f7ff fa0f 	bl	8000d64 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001948:	e012      	b.n	8001970 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194a:	f7ff fa0b 	bl	8000d64 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d90b      	bls.n	8001970 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <HAL_RCC_OscConfig+0x540>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e23b      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
 8001968:	40021000 	.word	0x40021000
 800196c:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	4bb8      	ldr	r3, [pc, #736]	; (8001c54 <HAL_RCC_OscConfig+0x828>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0e6      	beq.n	800194a <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01f      	beq.n	80019c8 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d010      	beq.n	80019b6 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001994:	4bb0      	ldr	r3, [pc, #704]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	4aaf      	ldr	r2, [pc, #700]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019a4:	4bac      	ldr	r3, [pc, #688]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019aa:	4aab      	ldr	r2, [pc, #684]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b4:	e018      	b.n	80019e8 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019b6:	4ba8      	ldr	r3, [pc, #672]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 80019b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019bc:	4aa6      	ldr	r2, [pc, #664]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c6:	e00f      	b.n	80019e8 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019c8:	4ba3      	ldr	r3, [pc, #652]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ce:	4aa2      	ldr	r2, [pc, #648]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019d8:	4b9f      	ldr	r3, [pc, #636]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	4a9e      	ldr	r2, [pc, #632]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d068      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff f9b8 	bl	8000d64 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f6:	e011      	b.n	8001a1c <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff f9b4 	bl	8000d64 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d908      	bls.n	8001a1c <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0a:	4b93      	ldr	r3, [pc, #588]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1e1      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1c:	4b8e      	ldr	r3, [pc, #568]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0e6      	beq.n	80019f8 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d022      	beq.n	8001a7c <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a36:	4b88      	ldr	r3, [pc, #544]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3c:	4a86      	ldr	r2, [pc, #536]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a46:	e011      	b.n	8001a6c <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7ff f98c 	bl	8000d64 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d908      	bls.n	8001a6c <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1b9      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a6c:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0e6      	beq.n	8001a48 <HAL_RCC_OscConfig+0x61c>
 8001a7a:	e068      	b.n	8001b4e <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a7c:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a8c:	e011      	b.n	8001ab2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff f969 	bl	8000d64 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d908      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001aa0:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e196      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ab2:	4b69      	ldr	r3, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e6      	bne.n	8001a8e <HAL_RCC_OscConfig+0x662>
 8001ac0:	e045      	b.n	8001b4e <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f94f 	bl	8000d64 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac8:	e011      	b.n	8001aee <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff f94b 	bl	8000d64 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d908      	bls.n	8001aee <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001adc:	4b5e      	ldr	r3, [pc, #376]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e178      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aee:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e6      	bne.n	8001aca <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001afc:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d021      	beq.n	8001b4e <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b0a:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b1a:	e011      	b.n	8001b40 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f922 	bl	8000d64 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d908      	bls.n	8001b40 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e14f      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b40:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e6      	bne.n	8001b1c <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a3f      	ldr	r2, [pc, #252]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d04a      	beq.n	8001c02 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d023      	beq.n	8001bbc <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b74:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7a:	4a37      	ldr	r2, [pc, #220]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f8ee 	bl	8000d64 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b8a:	e00f      	b.n	8001bac <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b8c:	f7ff f8ea 	bl	8000d64 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d908      	bls.n	8001bac <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e119      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0e8      	beq.n	8001b8c <HAL_RCC_OscConfig+0x760>
 8001bba:	e022      	b.n	8001c02 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc2:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff f8ca 	bl	8000d64 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bd2:	e00f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd4:	f7ff f8c6 	bl	8000d64 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d908      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0f5      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1e8      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 80e9 	beq.w	8001dde <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	f000 80a3 	beq.w	8001d60 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d16a      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f899 	bl	8000d64 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c34:	e012      	b.n	8001c5c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff f895 	bl	8000d64 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d90b      	bls.n	8001c5c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_RCC_OscConfig+0x82c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0c5      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
 8001c54:	40007000 	.word	0x40007000
 8001c58:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	4b62      	ldr	r3, [pc, #392]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1e6      	bne.n	8001c36 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c68:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <HAL_RCC_OscConfig+0x9c0>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c82:	0212      	lsls	r2, r2, #8
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c8a:	0852      	lsrs	r2, r2, #1
 8001c8c:	3a01      	subs	r2, #1
 8001c8e:	0552      	lsls	r2, r2, #21
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c96:	0852      	lsrs	r2, r2, #1
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	0652      	lsls	r2, r2, #25
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ca2:	06d2      	lsls	r2, r2, #27
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	4950      	ldr	r1, [pc, #320]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cac:	4b4e      	ldr	r3, [pc, #312]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb8:	4b4b      	ldr	r3, [pc, #300]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff f84e 	bl	8000d64 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	e00e      	b.n	8001cea <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff f84a 	bl	8000d64 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d907      	bls.n	8001cea <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e07a      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0ea      	beq.n	8001ccc <HAL_RCC_OscConfig+0x8a0>
 8001cf6:	e072      	b.n	8001dde <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3a      	ldr	r2, [pc, #232]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d04:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d10:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001d16:	f023 0303 	bic.w	r3, r3, #3
 8001d1a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a31      	ldr	r2, [pc, #196]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001d22:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f81a 	bl	8000d64 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d32:	e00e      	b.n	8001d52 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff f816 	bl	8000d64 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d907      	bls.n	8001d52 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e046      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ea      	bne.n	8001d34 <HAL_RCC_OscConfig+0x908>
 8001d5e:	e03e      	b.n	8001dde <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e039      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCC_OscConfig+0x9bc>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d12c      	bne.n	8001dda <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d123      	bne.n	8001dda <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d11b      	bne.n	8001dda <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dac:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d113      	bne.n	8001dda <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	019f800c 	.word	0x019f800c

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e10d      	b.n	8002024 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_ClockConfig+0x23c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d910      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b85      	ldr	r3, [pc, #532]	; (800202c <HAL_RCC_ClockConfig+0x23c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	4983      	ldr	r1, [pc, #524]	; (800202c <HAL_RCC_ClockConfig+0x23c>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b81      	ldr	r3, [pc, #516]	; (800202c <HAL_RCC_ClockConfig+0x23c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0f5      	b.n	8002024 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8094 	beq.w	8001f6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d134      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	4b78      	ldr	r3, [pc, #480]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0e2      	b.n	8002024 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e5e:	f000 fa05 	bl	800226c <RCC_GetSysClockFreqFromPLLSource>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4a73      	ldr	r2, [pc, #460]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d956      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e6c:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10a      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e78:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e80:	4a6b      	ldr	r2, [pc, #428]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e86:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e045      	b.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d03f      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d13b      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eaa:	4a61      	ldr	r2, [pc, #388]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	e030      	b.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d115      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0a9      	b.n	8002024 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed8:	4b55      	ldr	r3, [pc, #340]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e09d      	b.n	8002024 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee8:	4b51      	ldr	r3, [pc, #324]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e095      	b.n	8002024 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ef8:	f000 f8a2 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d909      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0e:	4a48      	ldr	r2, [pc, #288]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f1a:	4b45      	ldr	r3, [pc, #276]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f023 0203 	bic.w	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4942      	ldr	r1, [pc, #264]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f2c:	f7fe ff1a 	bl	8000d64 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	e013      	b.n	8001f5c <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f34:	f7fe ff16 	bl	8000d64 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d90a      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e063      	b.n	8002024 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 020c 	and.w	r2, r3, #12
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d1e2      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	492a      	ldr	r1, [pc, #168]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b80      	cmp	r3, #128	; 0x80
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a25      	ldr	r2, [pc, #148]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f9e:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_RCC_ClockConfig+0x23c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d210      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCC_ClockConfig+0x23c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 020f 	bic.w	r2, r3, #15
 8001fb6:	491d      	ldr	r1, [pc, #116]	; (800202c <HAL_RCC_ClockConfig+0x23c>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_ClockConfig+0x23c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e029      	b.n	8002024 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4911      	ldr	r1, [pc, #68]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800200e:	f000 f8b5 	bl	800217c <HAL_RCC_GetHCLKFreq>
 8002012:	4603      	mov	r3, r0
 8002014:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_RCC_ClockConfig+0x248>)
 8002016:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_RCC_ClockConfig+0x24c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fe51 	bl	8000cc4 <HAL_InitTick>
 8002022:	4603      	mov	r3, r0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	04c4b400 	.word	0x04c4b400
 8002038:	20000000 	.word	0x20000000
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002058:	4b44      	ldr	r3, [pc, #272]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x34>
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d121      	bne.n	80020b2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d11e      	bne.n	80020b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002074:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002080:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e005      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800209c:	4a34      	ldr	r2, [pc, #208]	; (8002170 <HAL_RCC_GetSysClockFreq+0x130>)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10d      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d102      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020b8:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <HAL_RCC_GetSysClockFreq+0x134>)
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	e004      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <HAL_RCC_GetSysClockFreq+0x138>)
 80020c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d146      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020ce:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3301      	adds	r3, #1
 80020e4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d003      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb4>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d00d      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0xce>
 80020f2:	e019      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020f4:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <HAL_RCC_GetSysClockFreq+0x134>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 80020fe:	68d2      	ldr	r2, [r2, #12]
 8002100:	0a12      	lsrs	r2, r2, #8
 8002102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
        break;
 800210c:	e019      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800210e:	4a1a      	ldr	r2, [pc, #104]	; (8002178 <HAL_RCC_GetSysClockFreq+0x138>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4a15      	ldr	r2, [pc, #84]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002118:	68d2      	ldr	r2, [r2, #12]
 800211a:	0a12      	lsrs	r2, r2, #8
 800211c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
        break;
 8002126:	e00c      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	4a0e      	ldr	r2, [pc, #56]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002132:	68d2      	ldr	r2, [r2, #12]
 8002134:	0a12      	lsrs	r2, r2, #8
 8002136:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
        break;
 8002140:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	0e5b      	lsrs	r3, r3, #25
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	3301      	adds	r3, #1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800215c:	69bb      	ldr	r3, [r7, #24]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	080037c8 	.word	0x080037c8
 8002174:	00f42400 	.word	0x00f42400
 8002178:	007a1200 	.word	0x007a1200

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002180:	f7ff ff5e 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetHCLKFreq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	4903      	ldr	r1, [pc, #12]	; (80021a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	080037b8 	.word	0x080037b8

080021a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021bc:	f7ff f898 	bl	80012f0 <HAL_PWREx_GetVoltageRange>
 80021c0:	6138      	str	r0, [r7, #16]
 80021c2:	e014      	b.n	80021ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	4a26      	ldr	r2, [pc, #152]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6593      	str	r3, [r2, #88]	; 0x58
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021dc:	f7ff f888 	bl	80012f0 <HAL_PWREx_GetVoltageRange>
 80021e0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	4a1f      	ldr	r2, [pc, #124]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x58>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fa:	d10b      	bne.n	8002214 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b80      	cmp	r3, #128	; 0x80
 8002200:	d919      	bls.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2ba0      	cmp	r3, #160	; 0xa0
 8002206:	d902      	bls.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002208:	2302      	movs	r3, #2
 800220a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800220c:	e013      	b.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002212:	e010      	b.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b80      	cmp	r3, #128	; 0x80
 8002218:	d902      	bls.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800221a:	2303      	movs	r3, #3
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e00a      	b.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b80      	cmp	r3, #128	; 0x80
 8002224:	d102      	bne.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002226:	2302      	movs	r3, #2
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e004      	b.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b70      	cmp	r3, #112	; 0x70
 8002230:	d101      	bne.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002232:	2301      	movs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 020f 	bic.w	r2, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	40022000 	.word	0x40022000

0800226c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d118      	bne.n	80022b4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e005      	b.n	80022aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	3301      	adds	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d003      	beq.n	80022da <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d00d      	beq.n	80022f4 <RCC_GetSysClockFreqFromPLLSource+0x88>
 80022d8:	e019      	b.n	800230e <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022da:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80022e4:	68d2      	ldr	r2, [r2, #12]
 80022e6:	0a12      	lsrs	r2, r2, #8
 80022e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	613b      	str	r3, [r7, #16]
      break;
 80022f2:	e019      	b.n	8002328 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80022fe:	68d2      	ldr	r2, [r2, #12]
 8002300:	0a12      	lsrs	r2, r2, #8
 8002302:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	613b      	str	r3, [r7, #16]
      break;
 800230c:	e00c      	b.n	8002328 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002318:	68d2      	ldr	r2, [r2, #12]
 800231a:	0a12      	lsrs	r2, r2, #8
 800231c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	613b      	str	r3, [r7, #16]
      break;
 8002326:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0e5b      	lsrs	r3, r3, #25
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002342:	683b      	ldr	r3, [r7, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000
 8002354:	080037c8 	.word	0x080037c8
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200

08002360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e095      	b.n	800249e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002382:	d009      	beq.n	8002398 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
 800238a:	e005      	b.n	8002398 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe faf6 	bl	80009a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023d8:	d902      	bls.n	80023e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e002      	b.n	80023e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80023ee:	d007      	beq.n	8002400 <HAL_SPI_Init+0xa0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023f8:	d002      	beq.n	8002400 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	ea42 0103 	orr.w	r1, r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	0c1b      	lsrs	r3, r3, #16
 800245c:	f003 0204 	and.w	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800247c:	ea42 0103 	orr.w	r1, r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b088      	sub	sp, #32
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_SPI_Transmit+0x22>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e158      	b.n	800277a <HAL_SPI_Transmit+0x2d4>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d0:	f7fe fc48 	bl	8000d64 <HAL_GetTick>
 80024d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d002      	beq.n	80024ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024ea:	e13d      	b.n	8002768 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_SPI_Transmit+0x52>
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024fc:	e134      	b.n	8002768 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2203      	movs	r2, #3
 8002502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002548:	d10f      	bne.n	800256a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002558:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002568:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	d007      	beq.n	8002588 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002586:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002590:	d94b      	bls.n	800262a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_SPI_Transmit+0xfa>
 800259a:	8afb      	ldrh	r3, [r7, #22]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d13e      	bne.n	800261e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	1c9a      	adds	r2, r3, #2
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025c4:	e02b      	b.n	800261e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d112      	bne.n	80025fa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	881a      	ldrh	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	1c9a      	adds	r2, r3, #2
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025f8:	e011      	b.n	800261e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025fa:	f7fe fbb3 	bl	8000d64 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d803      	bhi.n	8002612 <HAL_SPI_Transmit+0x16c>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d102      	bne.n	8002618 <HAL_SPI_Transmit+0x172>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800261c:	e0a4      	b.n	8002768 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ce      	bne.n	80025c6 <HAL_SPI_Transmit+0x120>
 8002628:	e07c      	b.n	8002724 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_SPI_Transmit+0x192>
 8002632:	8afb      	ldrh	r3, [r7, #22]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d170      	bne.n	800271a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d912      	bls.n	8002668 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	881a      	ldrh	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	1c9a      	adds	r2, r3, #2
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b02      	subs	r3, #2
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002666:	e058      	b.n	800271a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	330c      	adds	r3, #12
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800268e:	e044      	b.n	800271a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b02      	cmp	r3, #2
 800269c:	d12b      	bne.n	80026f6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d912      	bls.n	80026ce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	1c9a      	adds	r2, r3, #2
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b02      	subs	r3, #2
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026cc:	e025      	b.n	800271a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	330c      	adds	r3, #12
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026f4:	e011      	b.n	800271a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f6:	f7fe fb35 	bl	8000d64 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d803      	bhi.n	800270e <HAL_SPI_Transmit+0x268>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d102      	bne.n	8002714 <HAL_SPI_Transmit+0x26e>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002718:	e026      	b.n	8002768 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1b5      	bne.n	8002690 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fcdf 	bl	80030ec <SPI_EndRxTxTransaction>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e000      	b.n	8002768 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002766:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002778:	7ffb      	ldrb	r3, [r7, #31]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b088      	sub	sp, #32
 8002786:	af02      	add	r7, sp, #8
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800279e:	d112      	bne.n	80027c6 <HAL_SPI_Receive+0x44>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10e      	bne.n	80027c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2204      	movs	r2, #4
 80027ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027b0:	88fa      	ldrh	r2, [r7, #6]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	4613      	mov	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f910 	bl	80029e2 <HAL_SPI_TransmitReceive>
 80027c2:	4603      	mov	r3, r0
 80027c4:	e109      	b.n	80029da <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_SPI_Receive+0x52>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e102      	b.n	80029da <HAL_SPI_Receive+0x258>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027dc:	f7fe fac2 	bl	8000d64 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d002      	beq.n	80027f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
 80027f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027f2:	e0e9      	b.n	80029c8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_SPI_Receive+0x7e>
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002804:	e0e0      	b.n	80029c8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2204      	movs	r2, #4
 800280a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	88fa      	ldrh	r2, [r7, #6]
 800281e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002850:	d908      	bls.n	8002864 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	e007      	b.n	8002874 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002872:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287c:	d10f      	bne.n	800289e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d007      	beq.n	80028bc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028c4:	d867      	bhi.n	8002996 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028c6:	e030      	b.n	800292a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d117      	bne.n	8002906 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f103 020c 	add.w	r2, r3, #12
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	7812      	ldrb	r2, [r2, #0]
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002904:	e011      	b.n	800292a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002906:	f7fe fa2d 	bl	8000d64 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d803      	bhi.n	800291e <HAL_SPI_Receive+0x19c>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d102      	bne.n	8002924 <HAL_SPI_Receive+0x1a2>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002928:	e04e      	b.n	80029c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1c8      	bne.n	80028c8 <HAL_SPI_Receive+0x146>
 8002936:	e034      	b.n	80029a2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d115      	bne.n	8002972 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	b292      	uxth	r2, r2
 8002952:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	1c9a      	adds	r2, r3, #2
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002970:	e011      	b.n	8002996 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002972:	f7fe f9f7 	bl	8000d64 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d803      	bhi.n	800298a <HAL_SPI_Receive+0x208>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d102      	bne.n	8002990 <HAL_SPI_Receive+0x20e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002994:	e018      	b.n	80029c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ca      	bne.n	8002938 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fb48 	bl	800303c <SPI_EndRxTransaction>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
 80029c4:	e000      	b.n	80029c8 <HAL_SPI_Receive+0x246>
  }

error :
 80029c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b08a      	sub	sp, #40	; 0x28
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029f0:	2301      	movs	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x26>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e1fb      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x41e>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a10:	f7fe f9a8 	bl	8000d64 <HAL_GetTick>
 8002a14:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a1c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a2c:	7efb      	ldrb	r3, [r7, #27]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00e      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x6e>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a38:	d106      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x66>
 8002a42:	7efb      	ldrb	r3, [r7, #27]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d003      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a4e:	e1cd      	b.n	8002dec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x80>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x80>
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a68:	e1c0      	b.n	8002dec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d003      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2205      	movs	r2, #5
 8002a7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	887a      	ldrh	r2, [r7, #2]
 8002a8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	887a      	ldrh	r2, [r7, #2]
 8002a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ac0:	d802      	bhi.n	8002ac8 <HAL_SPI_TransmitReceive+0xe6>
 8002ac2:	8a3b      	ldrh	r3, [r7, #16]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d908      	bls.n	8002ada <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	e007      	b.n	8002aea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ae8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d007      	beq.n	8002b08 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b10:	d97c      	bls.n	8002c0c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x13e>
 8002b1a:	8a7b      	ldrh	r3, [r7, #18]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d169      	bne.n	8002bf4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	1c9a      	adds	r2, r3, #2
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b44:	e056      	b.n	8002bf4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d11b      	bne.n	8002b8c <HAL_SPI_TransmitReceive+0x1aa>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x1aa>
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d113      	bne.n	8002b8c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d11c      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x1f2>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d016      	beq.n	8002bd4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	b292      	uxth	r2, r2
 8002bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	1c9a      	adds	r2, r3, #2
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bd4:	f7fe f8c6 	bl	8000d64 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d807      	bhi.n	8002bf4 <HAL_SPI_TransmitReceive+0x212>
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bea:	d003      	beq.n	8002bf4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002bf2:	e0fb      	b.n	8002dec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1a3      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x164>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d19d      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x164>
 8002c0a:	e0df      	b.n	8002dcc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_SPI_TransmitReceive+0x23a>
 8002c14:	8a7b      	ldrh	r3, [r7, #18]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 80cb 	bne.w	8002db2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d912      	bls.n	8002c4c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b02      	subs	r3, #2
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c4a:	e0b2      	b.n	8002db2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	7812      	ldrb	r2, [r2, #0]
 8002c58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c72:	e09e      	b.n	8002db2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d134      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x30a>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d02f      	beq.n	8002cec <HAL_SPI_TransmitReceive+0x30a>
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d12c      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d912      	bls.n	8002cc2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	1c9a      	adds	r2, r3, #2
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b02      	subs	r3, #2
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc0:	e012      	b.n	8002ce8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d148      	bne.n	8002d8c <HAL_SPI_TransmitReceive+0x3aa>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d042      	beq.n	8002d8c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d923      	bls.n	8002d5a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	1c9a      	adds	r2, r3, #2
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b02      	subs	r3, #2
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d81f      	bhi.n	8002d88 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	e016      	b.n	8002d88 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f103 020c 	add.w	r2, r3, #12
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	7812      	ldrb	r2, [r2, #0]
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d8c:	f7fd ffea 	bl	8000d64 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d803      	bhi.n	8002da4 <HAL_SPI_TransmitReceive+0x3c2>
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da2:	d102      	bne.n	8002daa <HAL_SPI_TransmitReceive+0x3c8>
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002db0:	e01c      	b.n	8002dec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f af5b 	bne.w	8002c74 <HAL_SPI_TransmitReceive+0x292>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f47f af54 	bne.w	8002c74 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f98b 	bl	80030ec <SPI_EndRxTxTransaction>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d006      	beq.n	8002dea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60
 8002de8:	e000      	b.n	8002dec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002dea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3728      	adds	r7, #40	; 0x28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e18:	f7fd ffa4 	bl	8000d64 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	4413      	add	r3, r2
 8002e26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e28:	f7fd ff9c 	bl	8000d64 <HAL_GetTick>
 8002e2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e2e:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	015b      	lsls	r3, r3, #5
 8002e34:	0d1b      	lsrs	r3, r3, #20
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e3e:	e054      	b.n	8002eea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d050      	beq.n	8002eea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e48:	f7fd ff8c 	bl	8000d64 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d902      	bls.n	8002e5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d13d      	bne.n	8002eda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e76:	d111      	bne.n	8002e9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e80:	d004      	beq.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8a:	d107      	bne.n	8002e9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea4:	d10f      	bne.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e017      	b.n	8002f0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d19b      	bne.n	8002e40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000000 	.word	0x20000000

08002f18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f26:	f7fd ff1d 	bl	8000d64 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f36:	f7fd ff15 	bl	8000d64 <HAL_GetTick>
 8002f3a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f3c:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00da      	lsls	r2, r3, #3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	0d1b      	lsrs	r3, r3, #20
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f54:	e062      	b.n	800301c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f5c:	d109      	bne.n	8002f72 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d106      	bne.n	8002f72 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002f70:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d050      	beq.n	800301c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f7a:	f7fd fef3 	bl	8000d64 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d902      	bls.n	8002f90 <SPI_WaitFifoStateUntilTimeout+0x78>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d13d      	bne.n	800300c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa8:	d111      	bne.n	8002fce <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb2:	d004      	beq.n	8002fbe <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbc:	d107      	bne.n	8002fce <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fcc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	d10f      	bne.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e010      	b.n	800302e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	3b01      	subs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d194      	bne.n	8002f56 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000000 	.word	0x20000000

0800303c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003050:	d111      	bne.n	8003076 <SPI_EndRxTransaction+0x3a>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305a:	d004      	beq.n	8003066 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003064:	d107      	bne.n	8003076 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff fec1 	bl	8002e08 <SPI_WaitFlagStateUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e023      	b.n	80030e4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a4:	d11d      	bne.n	80030e2 <SPI_EndRxTransaction+0xa6>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ae:	d004      	beq.n	80030ba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b8:	d113      	bne.n	80030e2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f7ff ff26 	bl	8002f18 <SPI_WaitFifoStateUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d6:	f043 0220 	orr.w	r2, r3, #32
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e000      	b.n	80030e4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff ff07 	bl	8002f18 <SPI_WaitFifoStateUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e027      	b.n	8003170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff fe6c 	bl	8002e08 <SPI_WaitFlagStateUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	f043 0220 	orr.w	r2, r3, #32
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e014      	b.n	8003170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2200      	movs	r2, #0
 800314e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff fee0 	bl	8002f18 <SPI_WaitFifoStateUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e000      	b.n	8003170 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e049      	b.n	800321e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fc44 	bl	8000a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f000 f8fc 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_TIM_ConfigClockSource+0x18>
 800323a:	2302      	movs	r3, #2
 800323c:	e0b5      	b.n	80033aa <HAL_TIM_ConfigClockSource+0x184>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800325c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003260:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003268:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327a:	d03e      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0xd4>
 800327c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003280:	f200 8087 	bhi.w	8003392 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003288:	f000 8085 	beq.w	8003396 <HAL_TIM_ConfigClockSource+0x170>
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d87f      	bhi.n	8003392 <HAL_TIM_ConfigClockSource+0x16c>
 8003292:	2b70      	cmp	r3, #112	; 0x70
 8003294:	d01a      	beq.n	80032cc <HAL_TIM_ConfigClockSource+0xa6>
 8003296:	2b70      	cmp	r3, #112	; 0x70
 8003298:	d87b      	bhi.n	8003392 <HAL_TIM_ConfigClockSource+0x16c>
 800329a:	2b60      	cmp	r3, #96	; 0x60
 800329c:	d050      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0x11a>
 800329e:	2b60      	cmp	r3, #96	; 0x60
 80032a0:	d877      	bhi.n	8003392 <HAL_TIM_ConfigClockSource+0x16c>
 80032a2:	2b50      	cmp	r3, #80	; 0x50
 80032a4:	d03c      	beq.n	8003320 <HAL_TIM_ConfigClockSource+0xfa>
 80032a6:	2b50      	cmp	r3, #80	; 0x50
 80032a8:	d873      	bhi.n	8003392 <HAL_TIM_ConfigClockSource+0x16c>
 80032aa:	2b40      	cmp	r3, #64	; 0x40
 80032ac:	d058      	beq.n	8003360 <HAL_TIM_ConfigClockSource+0x13a>
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d86f      	bhi.n	8003392 <HAL_TIM_ConfigClockSource+0x16c>
 80032b2:	2b30      	cmp	r3, #48	; 0x30
 80032b4:	d064      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x15a>
 80032b6:	2b30      	cmp	r3, #48	; 0x30
 80032b8:	d86b      	bhi.n	8003392 <HAL_TIM_ConfigClockSource+0x16c>
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d060      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x15a>
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d867      	bhi.n	8003392 <HAL_TIM_ConfigClockSource+0x16c>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d05c      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x15a>
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d05a      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032ca:	e062      	b.n	8003392 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f000 f980 	bl	80035e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]
      break;
 80032f8:	e04e      	b.n	8003398 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f000 f969 	bl	80035e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800331c:	609a      	str	r2, [r3, #8]
      break;
 800331e:	e03b      	b.n	8003398 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	461a      	mov	r2, r3
 800332e:	f000 f8db 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2150      	movs	r1, #80	; 0x50
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f934 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800333e:	e02b      	b.n	8003398 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	461a      	mov	r2, r3
 800334e:	f000 f8fa 	bl	8003546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2160      	movs	r1, #96	; 0x60
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f924 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800335e:	e01b      	b.n	8003398 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	461a      	mov	r2, r3
 800336e:	f000 f8bb 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2140      	movs	r1, #64	; 0x40
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f914 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800337e:	e00b      	b.n	8003398 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 f90b 	bl	80035a6 <TIM_ITRx_SetConfig>
        break;
 8003390:	e002      	b.n	8003398 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003392:	bf00      	nop
 8003394:	e000      	b.n	8003398 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <TIM_Base_SetConfig+0x114>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d00f      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3d      	ldr	r2, [pc, #244]	; (80034cc <TIM_Base_SetConfig+0x118>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3c      	ldr	r2, [pc, #240]	; (80034d0 <TIM_Base_SetConfig+0x11c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a3b      	ldr	r2, [pc, #236]	; (80034d4 <TIM_Base_SetConfig+0x120>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <TIM_Base_SetConfig+0x124>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d108      	bne.n	8003406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <TIM_Base_SetConfig+0x114>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01f      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d01b      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <TIM_Base_SetConfig+0x118>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d017      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <TIM_Base_SetConfig+0x11c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <TIM_Base_SetConfig+0x120>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00f      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <TIM_Base_SetConfig+0x124>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00b      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a28      	ldr	r2, [pc, #160]	; (80034dc <TIM_Base_SetConfig+0x128>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <TIM_Base_SetConfig+0x12c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a26      	ldr	r2, [pc, #152]	; (80034e4 <TIM_Base_SetConfig+0x130>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d108      	bne.n	8003460 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <TIM_Base_SetConfig+0x114>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00f      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <TIM_Base_SetConfig+0x124>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a11      	ldr	r2, [pc, #68]	; (80034dc <TIM_Base_SetConfig+0x128>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <TIM_Base_SetConfig+0x12c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0xf8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <TIM_Base_SetConfig+0x130>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d103      	bne.n	80034b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	615a      	str	r2, [r3, #20]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40013400 	.word	0x40013400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003546:	b480      	push	{r7}
 8003548:	b087      	sub	sp, #28
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0210 	bic.w	r2, r3, #16
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	031b      	lsls	r3, r3, #12
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80035bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f043 0307 	orr.w	r3, r3, #7
 80035cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	609a      	str	r2, [r3, #8]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	021a      	lsls	r2, r3, #8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	431a      	orrs	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4313      	orrs	r3, r2
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	609a      	str	r2, [r3, #8]
}
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e068      	b.n	800370a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a2e      	ldr	r2, [pc, #184]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a2d      	ldr	r2, [pc, #180]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d108      	bne.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003672:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003684:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01d      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036aa:	d018      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a13      	ldr	r2, [pc, #76]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d10c      	bne.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40013400 	.word	0x40013400
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40000c00 	.word	0x40000c00
 800372c:	40014000 	.word	0x40014000

08003730 <__libc_init_array>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4d0d      	ldr	r5, [pc, #52]	; (8003768 <__libc_init_array+0x38>)
 8003734:	2600      	movs	r6, #0
 8003736:	4c0d      	ldr	r4, [pc, #52]	; (800376c <__libc_init_array+0x3c>)
 8003738:	1b64      	subs	r4, r4, r5
 800373a:	10a4      	asrs	r4, r4, #2
 800373c:	42a6      	cmp	r6, r4
 800373e:	d109      	bne.n	8003754 <__libc_init_array+0x24>
 8003740:	4d0b      	ldr	r5, [pc, #44]	; (8003770 <__libc_init_array+0x40>)
 8003742:	2600      	movs	r6, #0
 8003744:	4c0b      	ldr	r4, [pc, #44]	; (8003774 <__libc_init_array+0x44>)
 8003746:	f000 f81f 	bl	8003788 <_init>
 800374a:	1b64      	subs	r4, r4, r5
 800374c:	10a4      	asrs	r4, r4, #2
 800374e:	42a6      	cmp	r6, r4
 8003750:	d105      	bne.n	800375e <__libc_init_array+0x2e>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	f855 3b04 	ldr.w	r3, [r5], #4
 8003758:	3601      	adds	r6, #1
 800375a:	4798      	blx	r3
 800375c:	e7ee      	b.n	800373c <__libc_init_array+0xc>
 800375e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003762:	3601      	adds	r6, #1
 8003764:	4798      	blx	r3
 8003766:	e7f2      	b.n	800374e <__libc_init_array+0x1e>
 8003768:	08003808 	.word	0x08003808
 800376c:	08003808 	.word	0x08003808
 8003770:	08003808 	.word	0x08003808
 8003774:	0800380c 	.word	0x0800380c

08003778 <memset>:
 8003778:	4402      	add	r2, r0
 800377a:	4603      	mov	r3, r0
 800377c:	4293      	cmp	r3, r2
 800377e:	d100      	bne.n	8003782 <memset+0xa>
 8003780:	4770      	bx	lr
 8003782:	f803 1b01 	strb.w	r1, [r3], #1
 8003786:	e7f9      	b.n	800377c <memset+0x4>

08003788 <_init>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	bf00      	nop
 800378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378e:	bc08      	pop	{r3}
 8003790:	469e      	mov	lr, r3
 8003792:	4770      	bx	lr

08003794 <_fini>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr

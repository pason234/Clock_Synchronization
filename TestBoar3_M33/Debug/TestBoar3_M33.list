
TestBoar3_M33.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f44  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a0  080031a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031a0  080031a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031a0  080031a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080031b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080031b4  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a66  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182e  00000000  00000000  00029aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0002b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002bb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002679b  00000000  00000000  0002c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d14  00000000  00000000  00052b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f557e  00000000  00000000  0005b82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150dad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000220c  00000000  00000000  00150e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08003120 	.word	0x08003120

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08003120 	.word	0x08003120

08000234 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_9


void CS_Select (void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023e:	4802      	ldr	r0, [pc, #8]	; (8000248 <CS_Select+0x14>)
 8000240:	f000 ffcc 	bl	80011dc <HAL_GPIO_WritePin>
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	42020400 	.word	0x42020400

0800024c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000256:	4802      	ldr	r0, [pc, #8]	; (8000260 <CS_UnSelect+0x14>)
 8000258:	f000 ffc0 	bl	80011dc <HAL_GPIO_WritePin>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	42020400 	.word	0x42020400

08000264 <CE_Enable>:


void CE_Enable (void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026e:	4802      	ldr	r0, [pc, #8]	; (8000278 <CE_Enable+0x14>)
 8000270:	f000 ffb4 	bl	80011dc <HAL_GPIO_WritePin>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	42020400 	.word	0x42020400

0800027c <CE_Disable>:

void CE_Disable (void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	4802      	ldr	r0, [pc, #8]	; (8000290 <CE_Disable+0x14>)
 8000288:	f000 ffa8 	bl	80011dc <HAL_GPIO_WritePin>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	42020400 	.word	0x42020400

08000294 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	460a      	mov	r2, r1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002b2:	f7ff ffbf 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002b6:	f107 010c 	add.w	r1, r7, #12
 80002ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002be:	2202      	movs	r2, #2
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <nrf24_WriteReg+0x40>)
 80002c2:	f002 f898 	bl	80023f6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002c6:	f7ff ffc1 	bl	800024c <CS_UnSelect>
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000028 	.word	0x20000028

080002d8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
 80002e4:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	f043 0320 	orr.w	r3, r3, #32
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002f0:	f7ff ffa0 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80002f4:	f107 0114 	add.w	r1, r7, #20
 80002f8:	2364      	movs	r3, #100	; 0x64
 80002fa:	2201      	movs	r2, #1
 80002fc:	4808      	ldr	r0, [pc, #32]	; (8000320 <nrf24_WriteRegMulti+0x48>)
 80002fe:	f002 f87a 	bl	80023f6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	b29a      	uxth	r2, r3
 8000306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030a:	68b9      	ldr	r1, [r7, #8]
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <nrf24_WriteRegMulti+0x48>)
 800030e:	f002 f872 	bl	80023f6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000312:	f7ff ff9b 	bl	800024c <CS_UnSelect>
}
 8000316:	bf00      	nop
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028

08000324 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800032e:	2300      	movs	r3, #0
 8000330:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000332:	f7ff ff7f 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000336:	1df9      	adds	r1, r7, #7
 8000338:	2364      	movs	r3, #100	; 0x64
 800033a:	2201      	movs	r2, #1
 800033c:	4808      	ldr	r0, [pc, #32]	; (8000360 <nrf24_ReadReg+0x3c>)
 800033e:	f002 f85a 	bl	80023f6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000342:	f107 010f 	add.w	r1, r7, #15
 8000346:	2364      	movs	r3, #100	; 0x64
 8000348:	2201      	movs	r2, #1
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <nrf24_ReadReg+0x3c>)
 800034c:	f002 f9c1 	bl	80026d2 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000350:	f7ff ff7c 	bl	800024c <CS_UnSelect>

	return data;
 8000354:	7bfb      	ldrb	r3, [r7, #15]
}
 8000356:	4618      	mov	r0, r3
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000028 	.word	0x20000028

08000364 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800036e:	f7ff ff61 	bl	8000234 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000372:	1df9      	adds	r1, r7, #7
 8000374:	2364      	movs	r3, #100	; 0x64
 8000376:	2201      	movs	r2, #1
 8000378:	4804      	ldr	r0, [pc, #16]	; (800038c <nrfsendCmd+0x28>)
 800037a:	f002 f83c 	bl	80023f6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800037e:	f7ff ff65 	bl	800024c <CS_UnSelect>
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000028 	.word	0x20000028

08000390 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2b07      	cmp	r3, #7
 800039e:	d104      	bne.n	80003aa <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80003a0:	2100      	movs	r1, #0
 80003a2:	2007      	movs	r0, #7
 80003a4:	f7ff ff76 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80003a8:	e090      	b.n	80004cc <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b17      	cmp	r3, #23
 80003ae:	d104      	bne.n	80003ba <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003b0:	2111      	movs	r1, #17
 80003b2:	2017      	movs	r0, #23
 80003b4:	f7ff ff6e 	bl	8000294 <nrf24_WriteReg>
}
 80003b8:	e088      	b.n	80004cc <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80003ba:	2108      	movs	r1, #8
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ff69 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80003c2:	213f      	movs	r1, #63	; 0x3f
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff ff65 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80003ca:	2103      	movs	r1, #3
 80003cc:	2002      	movs	r0, #2
 80003ce:	f7ff ff61 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80003d2:	2103      	movs	r1, #3
 80003d4:	2003      	movs	r0, #3
 80003d6:	f7ff ff5d 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80003da:	2103      	movs	r1, #3
 80003dc:	2004      	movs	r0, #4
 80003de:	f7ff ff59 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80003e2:	2102      	movs	r1, #2
 80003e4:	2005      	movs	r0, #5
 80003e6:	f7ff ff55 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80003ea:	210e      	movs	r1, #14
 80003ec:	2006      	movs	r0, #6
 80003ee:	f7ff ff51 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80003f2:	2100      	movs	r1, #0
 80003f4:	2007      	movs	r0, #7
 80003f6:	f7ff ff4d 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80003fa:	2100      	movs	r1, #0
 80003fc:	2008      	movs	r0, #8
 80003fe:	f7ff ff49 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000402:	2100      	movs	r1, #0
 8000404:	2009      	movs	r0, #9
 8000406:	f7ff ff45 	bl	8000294 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800040a:	4a32      	ldr	r2, [pc, #200]	; (80004d4 <nrf24_reset+0x144>)
 800040c:	f107 0318 	add.w	r3, r7, #24
 8000410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000414:	6018      	str	r0, [r3, #0]
 8000416:	3304      	adds	r3, #4
 8000418:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800041a:	f107 0318 	add.w	r3, r7, #24
 800041e:	2205      	movs	r2, #5
 8000420:	4619      	mov	r1, r3
 8000422:	200a      	movs	r0, #10
 8000424:	f7ff ff58 	bl	80002d8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000428:	4a2b      	ldr	r2, [pc, #172]	; (80004d8 <nrf24_reset+0x148>)
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000432:	6018      	str	r0, [r3, #0]
 8000434:	3304      	adds	r3, #4
 8000436:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	2205      	movs	r2, #5
 800043e:	4619      	mov	r1, r3
 8000440:	200b      	movs	r0, #11
 8000442:	f7ff ff49 	bl	80002d8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000446:	21c3      	movs	r1, #195	; 0xc3
 8000448:	200c      	movs	r0, #12
 800044a:	f7ff ff23 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800044e:	21c4      	movs	r1, #196	; 0xc4
 8000450:	200d      	movs	r0, #13
 8000452:	f7ff ff1f 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000456:	21c5      	movs	r1, #197	; 0xc5
 8000458:	200e      	movs	r0, #14
 800045a:	f7ff ff1b 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800045e:	21c6      	movs	r1, #198	; 0xc6
 8000460:	200f      	movs	r0, #15
 8000462:	f7ff ff17 	bl	8000294 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000466:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <nrf24_reset+0x144>)
 8000468:	f107 0308 	add.w	r3, r7, #8
 800046c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000470:	6018      	str	r0, [r3, #0]
 8000472:	3304      	adds	r3, #4
 8000474:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	2205      	movs	r2, #5
 800047c:	4619      	mov	r1, r3
 800047e:	2010      	movs	r0, #16
 8000480:	f7ff ff2a 	bl	80002d8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000484:	2100      	movs	r1, #0
 8000486:	2011      	movs	r0, #17
 8000488:	f7ff ff04 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800048c:	2100      	movs	r1, #0
 800048e:	2012      	movs	r0, #18
 8000490:	f7ff ff00 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000494:	2100      	movs	r1, #0
 8000496:	2013      	movs	r0, #19
 8000498:	f7ff fefc 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800049c:	2100      	movs	r1, #0
 800049e:	2014      	movs	r0, #20
 80004a0:	f7ff fef8 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2015      	movs	r0, #21
 80004a8:	f7ff fef4 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80004ac:	2100      	movs	r1, #0
 80004ae:	2016      	movs	r0, #22
 80004b0:	f7ff fef0 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80004b4:	2111      	movs	r1, #17
 80004b6:	2017      	movs	r0, #23
 80004b8:	f7ff feec 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80004bc:	2100      	movs	r1, #0
 80004be:	201c      	movs	r0, #28
 80004c0:	f7ff fee8 	bl	8000294 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80004c4:	2100      	movs	r1, #0
 80004c6:	201d      	movs	r0, #29
 80004c8:	f7ff fee4 	bl	8000294 <nrf24_WriteReg>
}
 80004cc:	bf00      	nop
 80004ce:	3720      	adds	r7, #32
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	08003138 	.word	0x08003138
 80004d8:	08003140 	.word	0x08003140

080004dc <NRF24_Init>:




void NRF24_Init (void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80004e0:	f7ff fecc 	bl	800027c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff ff53 	bl	8000390 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80004ea:	2100      	movs	r1, #0
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fed1 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80004f2:	2100      	movs	r1, #0
 80004f4:	2001      	movs	r0, #1
 80004f6:	f7ff fecd 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80004fa:	2100      	movs	r1, #0
 80004fc:	2002      	movs	r0, #2
 80004fe:	f7ff fec9 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000502:	2103      	movs	r1, #3
 8000504:	2003      	movs	r0, #3
 8000506:	f7ff fec5 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800050a:	2100      	movs	r1, #0
 800050c:	2004      	movs	r0, #4
 800050e:	f7ff fec1 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000512:	2100      	movs	r1, #0
 8000514:	2005      	movs	r0, #5
 8000516:	f7ff febd 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800051a:	210e      	movs	r1, #14
 800051c:	2006      	movs	r0, #6
 800051e:	f7ff feb9 	bl	8000294 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000522:	f7ff fe9f 	bl	8000264 <CE_Enable>

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}

0800052a <NRF24_TxMode>:

// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b084      	sub	sp, #16
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	460b      	mov	r3, r1
 8000534:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000536:	f7ff fea1 	bl	800027c <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	4619      	mov	r1, r3
 800053e:	2005      	movs	r0, #5
 8000540:	f7ff fea8 	bl	8000294 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8000544:	2205      	movs	r2, #5
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	2010      	movs	r0, #16
 800054a:	f7ff fec5 	bl	80002d8 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff fee8 	bl	8000324 <nrf24_ReadReg>
 8000554:	4603      	mov	r3, r0
 8000556:	73fb      	strb	r3, [r7, #15]
    config = config | (1<<1);   // write 1 in the PWR_UP bit
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	73fb      	strb	r3, [r7, #15]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4619      	mov	r1, r3
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff fe95 	bl	8000294 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800056a:	f7ff fe7b 	bl	8000264 <CE_Enable>
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fb2e 	bl	8000bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f8b9 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f945 	bl	8000814 <MX_GPIO_Init>
  MX_SPI1_Init();
 800058a:	f000 f905 	bl	8000798 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 800058e:	f7ff ffa5 	bl	80004dc <NRF24_Init>
  uint8_t TxAddress[] = {0xEE,0xDD,0xCC,0xBB,0xAA};
 8000592:	4a53      	ldr	r2, [pc, #332]	; (80006e0 <main+0x168>)
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059c:	6018      	str	r0, [r3, #0]
 800059e:	3304      	adds	r3, #4
 80005a0:	7019      	strb	r1, [r3, #0]
  NRF24_TxMode(TxAddress, 10);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	210a      	movs	r1, #10
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffbe 	bl	800052a <NRF24_TxMode>
  //Ringbuf_init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uwTick=1000;
 80005ae:	4b4d      	ldr	r3, [pc, #308]	; (80006e4 <main+0x16c>)
 80005b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b4:	601a      	str	r2, [r3, #0]
  uint32_t tmp_uwTick = uwTick;
 80005b6:	4b4b      	ldr	r3, [pc, #300]	; (80006e4 <main+0x16c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	61fb      	str	r3, [r7, #28]
  uint8_t send = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	76fb      	strb	r3, [r7, #27]
  uint8_t init = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	76bb      	strb	r3, [r7, #26]
  uint8_t cmdtosend = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	72fb      	strb	r3, [r7, #11]
  //char TxData[10];
  uint8_t TxData[4];
  while (1)
  {
	  if (tmp_uwTick!=uwTick && send && init) {
 80005c8:	4b46      	ldr	r3, [pc, #280]	; (80006e4 <main+0x16c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	69fa      	ldr	r2, [r7, #28]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d03f      	beq.n	8000652 <main+0xda>
 80005d2:	7efb      	ldrb	r3, [r7, #27]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d03c      	beq.n	8000652 <main+0xda>
 80005d8:	7ebb      	ldrb	r3, [r7, #26]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d039      	beq.n	8000652 <main+0xda>
		  HAL_SPI_Transmit(&hspi1, TxData, 4, 1);
 80005de:	1d39      	adds	r1, r7, #4
 80005e0:	2301      	movs	r3, #1
 80005e2:	2204      	movs	r2, #4
 80005e4:	4840      	ldr	r0, [pc, #256]	; (80006e8 <main+0x170>)
 80005e6:	f001 ff06 	bl	80023f6 <HAL_SPI_Transmit>
		  CS_UnSelect();
 80005ea:	f7ff fe2f 	bl	800024c <CS_UnSelect>
		  HAL_Delay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fb6c 	bl	8000ccc <HAL_Delay>
		  uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80005f4:	2017      	movs	r0, #23
 80005f6:	f7ff fe95 	bl	8000324 <nrf24_ReadReg>
 80005fa:	4603      	mov	r3, r0
 80005fc:	74fb      	strb	r3, [r7, #19]
		  // check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
		  if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3)))){
 80005fe:	7cfb      	ldrb	r3, [r7, #19]
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	2b00      	cmp	r3, #0
 8000606:	d019      	beq.n	800063c <main+0xc4>
 8000608:	7cfb      	ldrb	r3, [r7, #19]
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	2b00      	cmp	r3, #0
 8000610:	d114      	bne.n	800063c <main+0xc4>
			  cmdtosend = FLUSH_TX;
 8000612:	23e1      	movs	r3, #225	; 0xe1
 8000614:	72fb      	strb	r3, [r7, #11]
			  nrfsendCmd(cmdtosend);
 8000616:	7afb      	ldrb	r3, [r7, #11]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fea3 	bl	8000364 <nrfsendCmd>
		  	  nrf24_reset (FIFO_STATUS);
 800061e:	2017      	movs	r0, #23
 8000620:	f7ff feb6 	bl	8000390 <nrf24_reset>
		  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	4830      	ldr	r0, [pc, #192]	; (80006ec <main+0x174>)
 800062a:	f000 fdd7 	bl	80011dc <HAL_GPIO_WritePin>
		  	  send = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	76fb      	strb	r3, [r7, #27]
		  	  HAL_Delay(2000);
 8000632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000636:	f000 fb49 	bl	8000ccc <HAL_Delay>
 800063a:	e00a      	b.n	8000652 <main+0xda>
		  } else {
			  HAL_Delay(1000);
 800063c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000640:	f000 fb44 	bl	8000ccc <HAL_Delay>
			  send = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	76fb      	strb	r3, [r7, #27]
			  init = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	76bb      	strb	r3, [r7, #26]
			  tmp_uwTick = uwTick;
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <main+0x16c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	61fb      	str	r3, [r7, #28]
		  }
	  }
	  if (uwTick%1000==0) {
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <main+0x16c>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <main+0x178>)
 8000658:	fba3 1302 	umull	r1, r3, r3, r2
 800065c:	099b      	lsrs	r3, r3, #6
 800065e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000662:	fb01 f303 	mul.w	r3, r1, r3
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d107      	bne.n	800067c <main+0x104>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	4820      	ldr	r0, [pc, #128]	; (80006f4 <main+0x17c>)
 8000672:	f000 fdcb 	bl	800120c <HAL_GPIO_TogglePin>
		  HAL_Delay(2);
 8000676:	2002      	movs	r0, #2
 8000678:	f000 fb28 	bl	8000ccc <HAL_Delay>
	  }
	  if (tmp_uwTick!=uwTick && send && !init){ //this one in first
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <main+0x16c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	69fa      	ldr	r2, [r7, #28]
 8000682:	429a      	cmp	r2, r3
 8000684:	d0a0      	beq.n	80005c8 <main+0x50>
 8000686:	7efb      	ldrb	r3, [r7, #27]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d09d      	beq.n	80005c8 <main+0x50>
 800068c:	7ebb      	ldrb	r3, [r7, #26]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d19a      	bne.n	80005c8 <main+0x50>
		  CS_Select();
 8000692:	f7ff fdcf 	bl	8000234 <CS_Select>
		  cmdtosend = W_TX_PAYLOAD;
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	72fb      	strb	r3, [r7, #11]
		  HAL_SPI_Transmit(&hspi1, &cmdtosend, 1, 100);
 800069a:	f107 010b 	add.w	r1, r7, #11
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	2201      	movs	r2, #1
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <main+0x170>)
 80006a4:	f001 fea7 	bl	80023f6 <HAL_SPI_Transmit>
		  for (int i=0; i<4; i++){
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	e00f      	b.n	80006ce <main+0x156>
			  TxData[i] = ((uwTick+1) >> 8*i) & 0b11111111;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <main+0x16c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	fa22 f303 	lsr.w	r3, r2, r3
 80006bc:	b2d9      	uxtb	r1, r3
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	4413      	add	r3, r2
 80006c4:	460a      	mov	r2, r1
 80006c6:	701a      	strb	r2, [r3, #0]
		  for (int i=0; i<4; i++){
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	3301      	adds	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	ddec      	ble.n	80006ae <main+0x136>
		  }
		  tmp_uwTick=uwTick; //wait for 1 milli to officialy send out
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <main+0x16c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	61fb      	str	r3, [r7, #28]
		  init = 1; //init done, need to send out
 80006da:	2301      	movs	r3, #1
 80006dc:	76bb      	strb	r3, [r7, #26]
	  if (tmp_uwTick!=uwTick && send && init) {
 80006de:	e773      	b.n	80005c8 <main+0x50>
 80006e0:	08003148 	.word	0x08003148
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	20000028 	.word	0x20000028
 80006ec:	42020400 	.word	0x42020400
 80006f0:	10624dd3 	.word	0x10624dd3
 80006f4:	42020000 	.word	0x42020000

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b098      	sub	sp, #96	; 0x60
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2248      	movs	r2, #72	; 0x48
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fd02 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fd9e 	bl	800125c <HAL_PWREx_ControlVoltageScaling>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000726:	f000 f8d9 	bl	80008dc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072a:	2302      	movs	r3, #2
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000744:	2337      	movs	r3, #55	; 0x37
 8000746:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000748:	2307      	movs	r3, #7
 800074a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0318 	add.w	r3, r7, #24
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fe0f 	bl	800137c <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000764:	f000 f8ba 	bl	80008dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2303      	movs	r3, #3
 800076e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2105      	movs	r1, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fadd 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800078c:	f000 f8a6 	bl	80008dc <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3760      	adds	r7, #96	; 0x60
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_SPI1_Init+0x74>)
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <MX_SPI1_Init+0x78>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_SPI1_Init+0x74>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_SPI1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x74>)
 80007b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x74>)
 80007c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x74>)
 80007ce:	2218      	movs	r2, #24
 80007d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_SPI1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x74>)
 80007e6:	2207      	movs	r2, #7
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x74>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_SPI1_Init+0x74>)
 80007f8:	f001 fd5a 	bl	80022b0 <HAL_SPI_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000802:	f000 f86b 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000028 	.word	0x20000028
 8000810:	40013000 	.word	0x40013000

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <MX_GPIO_Init+0xbc>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_GPIO_Init+0xbc>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000878:	4816      	ldr	r0, [pc, #88]	; (80008d4 <MX_GPIO_Init+0xc0>)
 800087a:	f000 fcaf 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000884:	4814      	ldr	r0, [pc, #80]	; (80008d8 <MX_GPIO_Init+0xc4>)
 8000886:	f000 fca9 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800088a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_GPIO_Init+0xc0>)
 80008a4:	f000 fb1a 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80008a8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_GPIO_Init+0xc4>)
 80008c2:	f000 fb0b 	bl	8000edc <HAL_GPIO_Init>

}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	42020000 	.word	0x42020000
 80008d8:	42020400 	.word	0x42020400

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his 2 implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_MspInit+0x44>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6613      	str	r3, [r2, #96]	; 0x60
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x44>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6593      	str	r3, [r2, #88]	; 0x58
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800091e:	f000 fcf9 	bl	8001314 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_SPI_MspInit+0x7c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d127      	bne.n	80009a2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800095c:	6613      	str	r3, [r2, #96]	; 0x60
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000982:	23e0      	movs	r3, #224	; 0xe0
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000992:	2305      	movs	r3, #5
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_SPI_MspInit+0x84>)
 800099e:	f000 fa9d 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40013000 	.word	0x40013000
 80009b0:	40021000 	.word	0x40021000
 80009b4:	42020000 	.word	0x42020000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//if (timeout>0) timeout--;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f942 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000a36:	4b4f      	ldr	r3, [pc, #316]	; (8000b74 <SystemCoreClockUpdate+0x144>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d107      	bne.n	8000a52 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <SystemCoreClockUpdate+0x144>)
 8000a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e005      	b.n	8000a5e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000a52:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <SystemCoreClockUpdate+0x144>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	091b      	lsrs	r3, r3, #4
 8000a58:	f003 030f 	and.w	r3, r3, #15
 8000a5c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000a5e:	4a46      	ldr	r2, [pc, #280]	; (8000b78 <SystemCoreClockUpdate+0x148>)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a68:	4b42      	ldr	r3, [pc, #264]	; (8000b74 <SystemCoreClockUpdate+0x144>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f003 030c 	and.w	r3, r3, #12
 8000a70:	2b0c      	cmp	r3, #12
 8000a72:	d866      	bhi.n	8000b42 <SystemCoreClockUpdate+0x112>
 8000a74:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <SystemCoreClockUpdate+0x4c>)
 8000a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7a:	bf00      	nop
 8000a7c:	08000ab1 	.word	0x08000ab1
 8000a80:	08000b43 	.word	0x08000b43
 8000a84:	08000b43 	.word	0x08000b43
 8000a88:	08000b43 	.word	0x08000b43
 8000a8c:	08000ab9 	.word	0x08000ab9
 8000a90:	08000b43 	.word	0x08000b43
 8000a94:	08000b43 	.word	0x08000b43
 8000a98:	08000b43 	.word	0x08000b43
 8000a9c:	08000ac1 	.word	0x08000ac1
 8000aa0:	08000b43 	.word	0x08000b43
 8000aa4:	08000b43 	.word	0x08000b43
 8000aa8:	08000b43 	.word	0x08000b43
 8000aac:	08000ac9 	.word	0x08000ac9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemCoreClockUpdate+0x14c>)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	6013      	str	r3, [r2, #0]
      break;
 8000ab6:	e048      	b.n	8000b4a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <SystemCoreClockUpdate+0x14c>)
 8000aba:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <SystemCoreClockUpdate+0x150>)
 8000abc:	601a      	str	r2, [r3, #0]
      break;
 8000abe:	e044      	b.n	8000b4a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <SystemCoreClockUpdate+0x14c>)
 8000ac2:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <SystemCoreClockUpdate+0x154>)
 8000ac4:	601a      	str	r2, [r3, #0]
      break;
 8000ac6:	e040      	b.n	8000b4a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <SystemCoreClockUpdate+0x144>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemCoreClockUpdate+0x144>)
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	f003 030f 	and.w	r3, r3, #15
 8000adc:	3301      	adds	r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d003      	beq.n	8000aee <SystemCoreClockUpdate+0xbe>
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d006      	beq.n	8000afa <SystemCoreClockUpdate+0xca>
 8000aec:	e00b      	b.n	8000b06 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000aee:	4a24      	ldr	r2, [pc, #144]	; (8000b80 <SystemCoreClockUpdate+0x150>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	613b      	str	r3, [r7, #16]
          break;
 8000af8:	e00b      	b.n	8000b12 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <SystemCoreClockUpdate+0x154>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	613b      	str	r3, [r7, #16]
          break;
 8000b04:	e005      	b.n	8000b12 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	613b      	str	r3, [r7, #16]
          break;
 8000b10:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <SystemCoreClockUpdate+0x144>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	fb02 f303 	mul.w	r3, r2, r3
 8000b22:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <SystemCoreClockUpdate+0x144>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0e5b      	lsrs	r3, r3, #25
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <SystemCoreClockUpdate+0x14c>)
 8000b3e:	6013      	str	r3, [r2, #0]
      break;
 8000b40:	e003      	b.n	8000b4a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <SystemCoreClockUpdate+0x14c>)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	6013      	str	r3, [r2, #0]
      break;
 8000b48:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <SystemCoreClockUpdate+0x144>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <SystemCoreClockUpdate+0x158>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <SystemCoreClockUpdate+0x14c>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	fa22 f303 	lsr.w	r3, r2, r3
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SystemCoreClockUpdate+0x14c>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40021000 	.word	0x40021000
 8000b78:	08003160 	.word	0x08003160
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	00f42400 	.word	0x00f42400
 8000b84:	007a1200 	.word	0x007a1200
 8000b88:	08003150 	.word	0x08003150

08000b8c <Reset_Handler>:
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopForever+0x2>
 8000b90:	f7ff ff3c 	bl	8000a0c <SystemInit>
 8000b94:	2100      	movs	r1, #0
 8000b96:	e003      	b.n	8000ba0 <LoopCopyDataInit>

08000b98 <CopyDataInit>:
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <LoopForever+0x6>)
 8000b9a:	585b      	ldr	r3, [r3, r1]
 8000b9c:	5043      	str	r3, [r0, r1]
 8000b9e:	3104      	adds	r1, #4

08000ba0 <LoopCopyDataInit>:
 8000ba0:	480a      	ldr	r0, [pc, #40]	; (8000bcc <LoopForever+0xa>)
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <LoopForever+0xe>)
 8000ba4:	1842      	adds	r2, r0, r1
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3f6      	bcc.n	8000b98 <CopyDataInit>
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopForever+0x12>)
 8000bac:	e002      	b.n	8000bb4 <LoopFillZerobss>

08000bae <FillZerobss>:
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f842 3b04 	str.w	r3, [r2], #4

08000bb4 <LoopFillZerobss>:
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <LoopForever+0x16>)
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d3f9      	bcc.n	8000bae <FillZerobss>
 8000bba:	f002 fa85 	bl	80030c8 <__libc_init_array>
 8000bbe:	f7ff fcdb 	bl	8000578 <main>

08000bc2 <LoopForever>:
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
 8000bc4:	20040000 	.word	0x20040000
 8000bc8:	080031a8 	.word	0x080031a8
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	2000000c 	.word	0x2000000c
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000090 	.word	0x20000090

08000bdc <ADC1_2_IRQHandler>:
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>

08000bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000be8:	2004      	movs	r0, #4
 8000bea:	f000 f945 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000bee:	f7ff ff1f 	bl	8000a30 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 f80e 	bl	8000c14 <HAL_InitTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	71fb      	strb	r3, [r7, #7]
 8000c02:	e001      	b.n	8000c08 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c04:	f7ff fe70 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c08:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d023      	beq.n	8000c70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_InitTick+0x70>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_InitTick+0x6c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f93f 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10f      	bne.n	8000c6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b07      	cmp	r3, #7
 8000c4e:	d809      	bhi.n	8000c64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f000 f919 	bl	8000e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_InitTick+0x74>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e007      	b.n	8000c74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e004      	b.n	8000c74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e001      	b.n	8000c74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	2000008c 	.word	0x2000008c

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	2000008c 	.word	0x2000008c

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0152      	lsls	r2, r2, #5
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0152      	lsls	r2, r2, #5
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	bf28      	it	cs
 8000dea:	2303      	movcs	r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3303      	adds	r3, #3
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b04      	subs	r3, #4
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	2107      	movs	r1, #7
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff47 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff5e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff90 	bl	8000dcc <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5f 	bl	8000d78 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffb2 	bl	8000e34 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eea:	e158      	b.n	800119e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 814a 	beq.w	8001198 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d00b      	beq.n	8000f24 <HAL_GPIO_Init+0x48>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f18:	2b11      	cmp	r3, #17
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b12      	cmp	r3, #18
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0xea>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	6939      	ldr	r1, [r7, #16]
 800100a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0203 	and.w	r2, r3, #3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80a4 	beq.w	8001198 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001050:	4a5a      	ldr	r2, [pc, #360]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3318      	adds	r3, #24
 8001058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_GPIO_Init+0x2e4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d025      	beq.n	80010c8 <HAL_GPIO_Init+0x1ec>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a51      	ldr	r2, [pc, #324]	; (80011c4 <HAL_GPIO_Init+0x2e8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d01f      	beq.n	80010c4 <HAL_GPIO_Init+0x1e8>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a50      	ldr	r2, [pc, #320]	; (80011c8 <HAL_GPIO_Init+0x2ec>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d019      	beq.n	80010c0 <HAL_GPIO_Init+0x1e4>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4f      	ldr	r2, [pc, #316]	; (80011cc <HAL_GPIO_Init+0x2f0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d013      	beq.n	80010bc <HAL_GPIO_Init+0x1e0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4e      	ldr	r2, [pc, #312]	; (80011d0 <HAL_GPIO_Init+0x2f4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d00d      	beq.n	80010b8 <HAL_GPIO_Init+0x1dc>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a4d      	ldr	r2, [pc, #308]	; (80011d4 <HAL_GPIO_Init+0x2f8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x1d8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a4c      	ldr	r2, [pc, #304]	; (80011d8 <HAL_GPIO_Init+0x2fc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d101      	bne.n	80010b0 <HAL_GPIO_Init+0x1d4>
 80010ac:	2306      	movs	r3, #6
 80010ae:	e00c      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010b0:	2307      	movs	r3, #7
 80010b2:	e00a      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010b4:	2305      	movs	r3, #5
 80010b6:	e008      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010b8:	2304      	movs	r3, #4
 80010ba:	e006      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010bc:	2303      	movs	r3, #3
 80010be:	e004      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e002      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <HAL_GPIO_Init+0x1ee>
 80010c8:	2300      	movs	r3, #0
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	f002 0203 	and.w	r2, r2, #3
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	4093      	lsls	r3, r2
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80010da:	4938      	ldr	r1, [pc, #224]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3318      	adds	r3, #24
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010e8:	4b34      	ldr	r3, [pc, #208]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 80010ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800110e:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 8001118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800113c:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_GPIO_Init+0x2e0>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f47f ae9f 	bne.w	8000eec <HAL_GPIO_Init+0x10>
  }
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	4002f400 	.word	0x4002f400
 80011c0:	42020000 	.word	0x42020000
 80011c4:	42020400 	.word	0x42020400
 80011c8:	42020800 	.word	0x42020800
 80011cc:	42020c00 	.word	0x42020c00
 80011d0:	42021000 	.word	0x42021000
 80011d4:	42021400 	.word	0x42021400
 80011d8:	42021800 	.word	0x42021800

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43d9      	mvns	r1, r3
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	400b      	ands	r3, r1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <HAL_PWREx_GetVoltageRange+0x18>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40007000 	.word	0x40007000

0800125c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800126c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800126e:	f000 f861 	bl	8001334 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001272:	4603      	mov	r3, r0
 8001274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001278:	d101      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e03e      	b.n	80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800128a:	d101      	bne.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e035      	b.n	80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	d101      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	e02f      	b.n	80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80012a4:	4917      	ldr	r1, [pc, #92]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	095b      	lsrs	r3, r3, #5
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	09db      	lsrs	r3, r3, #7
 80012ba:	2232      	movs	r2, #50	; 0x32
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	4a13      	ldr	r2, [pc, #76]	; (8001310 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	3301      	adds	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012cc:	e002      	b.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e0:	d102      	bne.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f2      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f4:	d101      	bne.n	80012fa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e000      	b.n	80012fc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40007000 	.word	0x40007000
 8001308:	20000000 	.word	0x20000000
 800130c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001310:	cccccccd 	.word	0xcccccccd

08001314 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001322:	6093      	str	r3, [r2, #8]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40007000 	.word	0x40007000

08001334 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	e00a      	b.n	8001368 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d103      	bne.n	8001364 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800135c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	e001      	b.n	8001368 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40007000 	.word	0x40007000

0800137c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	f000 bcd0 	b.w	8001d30 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001390:	4ba3      	ldr	r3, [pc, #652]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800139a:	4ba1      	ldr	r3, [pc, #644]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80e9 	beq.w	8001584 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <HAL_RCC_OscConfig+0x4a>
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	f040 8083 	bne.w	80014c6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d17f      	bne.n	80014c6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c6:	4b96      	ldr	r3, [pc, #600]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_RCC_OscConfig+0x64>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f000 bca8 	b.w	8001d30 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	4b8e      	ldr	r3, [pc, #568]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <HAL_RCC_OscConfig+0x7e>
 80013f0:	4b8b      	ldr	r3, [pc, #556]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f8:	e005      	b.n	8001406 <HAL_RCC_OscConfig+0x8a>
 80013fa:	4b89      	ldr	r3, [pc, #548]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80013fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001406:	4293      	cmp	r3, r2
 8001408:	d224      	bcs.n	8001454 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fe70 	bl	80020f4 <RCC_SetFlashLatencyFromMSIRange>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	f000 bc88 	b.w	8001d30 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001420:	4b7f      	ldr	r3, [pc, #508]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a7e      	ldr	r2, [pc, #504]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b7c      	ldr	r3, [pc, #496]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	4979      	ldr	r1, [pc, #484]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143e:	4b78      	ldr	r3, [pc, #480]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4974      	ldr	r1, [pc, #464]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
 8001452:	e026      	b.n	80014a2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001454:	4b72      	ldr	r3, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a71      	ldr	r2, [pc, #452]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	496c      	ldr	r1, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001472:	4b6b      	ldr	r3, [pc, #428]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	4967      	ldr	r1, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10a      	bne.n	80014a2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fe2f 	bl	80020f4 <RCC_SetFlashLatencyFromMSIRange>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	f000 bc47 	b.w	8001d30 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014a2:	f000 fe13 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x2a8>)
 80014aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ac:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fbaf 	bl	8000c14 <HAL_InitTick>
 80014b6:	4603      	mov	r3, r0
 80014b8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d060      	beq.n	8001582 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	f000 bc35 	b.w	8001d30 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d039      	beq.n	8001542 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014ce:	4b54      	ldr	r3, [pc, #336]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a53      	ldr	r2, [pc, #332]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014da:	f7ff fbeb 	bl	8000cb4 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e0:	e00f      	b.n	8001502 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014e2:	f7ff fbe7 	bl	8000cb4 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d908      	bls.n	8001502 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014f0:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f000 bc17 	b.w	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0e9      	beq.n	80014e2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150e:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a43      	ldr	r2, [pc, #268]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	493e      	ldr	r1, [pc, #248]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152c:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	4939      	ldr	r1, [pc, #228]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
 8001540:	e020      	b.n	8001584 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001542:	4b37      	ldr	r3, [pc, #220]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a36      	ldr	r2, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154e:	f7ff fbb1 	bl	8000cb4 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001554:	e00e      	b.n	8001574 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001556:	f7ff fbad 	bl	8000cb4 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d907      	bls.n	8001574 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e3dd      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001574:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ea      	bne.n	8001556 <HAL_RCC_OscConfig+0x1da>
 8001580:	e000      	b.n	8001584 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001582:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d07e      	beq.n	800168e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b08      	cmp	r3, #8
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x226>
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d10e      	bne.n	80015ba <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d10b      	bne.n	80015ba <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d06e      	beq.n	800168c <HAL_RCC_OscConfig+0x310>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d16a      	bne.n	800168c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e3ba      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x256>
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a15      	ldr	r2, [pc, #84]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e01d      	b.n	800160e <HAL_RCC_OscConfig+0x292>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x27a>
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80015e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e00b      	b.n	800160e <HAL_RCC_OscConfig+0x292>
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 80015fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_RCC_OscConfig+0x2a4>)
 8001608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d020      	beq.n	8001658 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff fb4d 	bl	8000cb4 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x2ce>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fb42 	bl	8000cb4 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d907      	bls.n	800164a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	4b9f      	ldr	r3, [pc, #636]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e372      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164a:	4b9b      	ldr	r3, [pc, #620]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0ea      	beq.n	800162c <HAL_RCC_OscConfig+0x2b0>
 8001656:	e01a      	b.n	800168e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb2c 	bl	8000cb4 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	e00e      	b.n	800167e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fb28 	bl	8000cb4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d907      	bls.n	800167e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800166e:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e358      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167e:	4b8e      	ldr	r3, [pc, #568]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ea      	bne.n	8001660 <HAL_RCC_OscConfig+0x2e4>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d06c      	beq.n	8001774 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d005      	beq.n	80016ac <HAL_RCC_OscConfig+0x330>
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	d119      	bne.n	80016da <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d116      	bne.n	80016da <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ac:	4b82      	ldr	r3, [pc, #520]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x348>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e335      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	4979      	ldr	r1, [pc, #484]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d8:	e04c      	b.n	8001774 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d029      	beq.n	8001736 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e2:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a74      	ldr	r2, [pc, #464]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fae1 	bl	8000cb4 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f4:	e00e      	b.n	8001714 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff fadd 	bl	8000cb4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d907      	bls.n	8001714 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e30d      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ea      	beq.n	80016f6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	4962      	ldr	r1, [pc, #392]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e01e      	b.n	8001774 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5f      	ldr	r2, [pc, #380]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 800173c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fab7 	bl	8000cb4 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001748:	e00e      	b.n	8001768 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fab3 	bl	8000cb4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d907      	bls.n	8001768 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e2e3      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1ea      	bne.n	800174a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d05f      	beq.n	8001840 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d038      	beq.n	80017fa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d108      	bne.n	80017a2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001790:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001796:	4a48      	ldr	r2, [pc, #288]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001798:	f023 0310 	bic.w	r3, r3, #16
 800179c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80017a0:	e007      	b.n	80017b2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80017a2:	4b45      	ldr	r3, [pc, #276]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80017a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a8:	4a43      	ldr	r2, [pc, #268]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b8:	4a3f      	ldr	r2, [pc, #252]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff fa77 	bl	8000cb4 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c8:	e00f      	b.n	80017ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fa73 	bl	8000cb4 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b07      	cmp	r3, #7
 80017d6:	d908      	bls.n	80017ea <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e2a2      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0e8      	beq.n	80017ca <HAL_RCC_OscConfig+0x44e>
 80017f8:	e022      	b.n	8001840 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 80017fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001800:	4a2d      	ldr	r2, [pc, #180]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fa53 	bl	8000cb4 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001810:	e00f      	b.n	8001832 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff fa4f 	bl	8000cb4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b07      	cmp	r3, #7
 800181e:	d908      	bls.n	8001832 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e27e      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e8      	bne.n	8001812 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8131 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	4a15      	ldr	r2, [pc, #84]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6593      	str	r3, [r2, #88]	; 0x58
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_RCC_OscConfig+0x53c>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_RCC_OscConfig+0x540>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d122      	bne.n	80018cc <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_RCC_OscConfig+0x540>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <HAL_RCC_OscConfig+0x540>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff fa0f 	bl	8000cb4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001898:	e012      	b.n	80018c0 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff fa0b 	bl	8000cb4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d90b      	bls.n	80018c0 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <HAL_RCC_OscConfig+0x540>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d105      	bne.n	80018c0 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e23b      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c0:	4bb8      	ldr	r3, [pc, #736]	; (8001ba4 <HAL_RCC_OscConfig+0x828>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0e6      	beq.n	800189a <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01f      	beq.n	8001918 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018e4:	4bb0      	ldr	r3, [pc, #704]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	4aaf      	ldr	r2, [pc, #700]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018f4:	4bac      	ldr	r3, [pc, #688]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	4aab      	ldr	r2, [pc, #684]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001904:	e018      	b.n	8001938 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001906:	4ba8      	ldr	r3, [pc, #672]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190c:	4aa6      	ldr	r2, [pc, #664]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001916:	e00f      	b.n	8001938 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001918:	4ba3      	ldr	r3, [pc, #652]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	4aa2      	ldr	r2, [pc, #648]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001928:	4b9f      	ldr	r3, [pc, #636]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192e:	4a9e      	ldr	r2, [pc, #632]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001930:	f023 0304 	bic.w	r3, r3, #4
 8001934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d068      	beq.n	8001a12 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff f9b8 	bl	8000cb4 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001946:	e011      	b.n	800196c <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff f9b4 	bl	8000cb4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d908      	bls.n	800196c <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195a:	4b93      	ldr	r3, [pc, #588]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 800195c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1e1      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196c:	4b8e      	ldr	r3, [pc, #568]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0e6      	beq.n	8001948 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001982:	2b00      	cmp	r3, #0
 8001984:	d022      	beq.n	80019cc <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001986:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	4a86      	ldr	r2, [pc, #536]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 800198e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001996:	e011      	b.n	80019bc <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001998:	f7ff f98c 	bl	8000cb4 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d908      	bls.n	80019bc <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019aa:	4b7f      	ldr	r3, [pc, #508]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 80019ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e1b9      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019bc:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0e6      	beq.n	8001998 <HAL_RCC_OscConfig+0x61c>
 80019ca:	e068      	b.n	8001a9e <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019cc:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	4a75      	ldr	r2, [pc, #468]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 80019d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019dc:	e011      	b.n	8001a02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff f969 	bl	8000cb4 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d908      	bls.n	8001a02 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019f0:	4b6d      	ldr	r3, [pc, #436]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e196      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a02:	4b69      	ldr	r3, [pc, #420]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e6      	bne.n	80019de <HAL_RCC_OscConfig+0x662>
 8001a10:	e045      	b.n	8001a9e <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff f94f 	bl	8000cb4 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a18:	e011      	b.n	8001a3e <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff f94b 	bl	8000cb4 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d908      	bls.n	8001a3e <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e178      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1e6      	bne.n	8001a1a <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001a4c:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d021      	beq.n	8001a9e <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a5a:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a60:	4a51      	ldr	r2, [pc, #324]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a6a:	e011      	b.n	8001a90 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f922 	bl	8000cb4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d908      	bls.n	8001a90 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e14f      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a90:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1e6      	bne.n	8001a6c <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a3f      	ldr	r2, [pc, #252]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d04a      	beq.n	8001b52 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d023      	beq.n	8001b0c <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ac4:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aca:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f8ee 	bl	8000cb4 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ada:	e00f      	b.n	8001afc <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001adc:	f7ff f8ea 	bl	8000cb4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d908      	bls.n	8001afc <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e119      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0e8      	beq.n	8001adc <HAL_RCC_OscConfig+0x760>
 8001b0a:	e022      	b.n	8001b52 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b0c:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b12:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f8ca 	bl	8000cb4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b22:	e00f      	b.n	8001b44 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b24:	f7ff f8c6 	bl	8000cb4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d908      	bls.n	8001b44 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0f5      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1e8      	bne.n	8001b24 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80e9 	beq.w	8001d2e <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	f000 80a3 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d16a      	bne.n	8001c48 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a0c      	ldr	r2, [pc, #48]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f899 	bl	8000cb4 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b84:	e012      	b.n	8001bac <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7ff f895 	bl	8000cb4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d90b      	bls.n	8001bac <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_RCC_OscConfig+0x82c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0c5      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bac:	4b62      	ldr	r3, [pc, #392]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e6      	bne.n	8001b86 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	4b5f      	ldr	r3, [pc, #380]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <HAL_RCC_OscConfig+0x9c0>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bd2:	0212      	lsls	r2, r2, #8
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bda:	0852      	lsrs	r2, r2, #1
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	0552      	lsls	r2, r2, #21
 8001be0:	4311      	orrs	r1, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001be6:	0852      	lsrs	r2, r2, #1
 8001be8:	3a01      	subs	r2, #1
 8001bea:	0652      	lsls	r2, r2, #25
 8001bec:	4311      	orrs	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bf2:	06d2      	lsls	r2, r2, #27
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	4950      	ldr	r1, [pc, #320]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c08:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a4a      	ldr	r2, [pc, #296]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f84e 	bl	8000cb4 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	e00e      	b.n	8001c3a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f84a 	bl	8000cb4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d907      	bls.n	8001c3a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e07a      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0ea      	beq.n	8001c1c <HAL_RCC_OscConfig+0x8a0>
 8001c46:	e072      	b.n	8001d2e <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a3a      	ldr	r2, [pc, #232]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c54:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a34      	ldr	r2, [pc, #208]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c66:	f023 0303 	bic.w	r3, r3, #3
 8001c6a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a31      	ldr	r2, [pc, #196]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c72:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f81a 	bl	8000cb4 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c82:	e00e      	b.n	8001ca2 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff f816 	bl	8000cb4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d907      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e046      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ea      	bne.n	8001c84 <HAL_RCC_OscConfig+0x908>
 8001cae:	e03e      	b.n	8001d2e <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e039      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_RCC_OscConfig+0x9bc>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d12c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d123      	bne.n	8001d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cec:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d11b      	bne.n	8001d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d113      	bne.n	8001d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d109      	bne.n	8001d2a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	3b01      	subs	r3, #1
 8001d24:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	019f800c 	.word	0x019f800c

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e10d      	b.n	8001f74 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b88      	ldr	r3, [pc, #544]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b85      	ldr	r3, [pc, #532]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 020f 	bic.w	r2, r3, #15
 8001d6e:	4983      	ldr	r1, [pc, #524]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b81      	ldr	r3, [pc, #516]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0f5      	b.n	8001f74 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 8094 	beq.w	8001ebe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d134      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	4b78      	ldr	r3, [pc, #480]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0e2      	b.n	8001f74 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001dae:	f000 fa05 	bl	80021bc <RCC_GetSysClockFreqFromPLLSource>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4a73      	ldr	r2, [pc, #460]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d956      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001dbc:	4b70      	ldr	r3, [pc, #448]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dc8:	4b6d      	ldr	r3, [pc, #436]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dd0:	4a6b      	ldr	r2, [pc, #428]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e045      	b.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03f      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d13b      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dfa:	4a61      	ldr	r2, [pc, #388]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e030      	b.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e10:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d115      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0a9      	b.n	8001f74 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e28:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d109      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e09d      	b.n	8001f74 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e38:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e095      	b.n	8001f74 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e48:	f000 f8a2 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d909      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e56:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e5e:	4a48      	ldr	r2, [pc, #288]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4942      	ldr	r1, [pc, #264]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e7c:	f7fe ff1a 	bl	8000cb4 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e013      	b.n	8001eac <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7fe ff16 	bl	8000cb4 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d90a      	bls.n	8001eac <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e063      	b.n	8001f74 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eac:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 020c 	and.w	r2, r3, #12
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d1e2      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	492a      	ldr	r1, [pc, #168]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a25      	ldr	r2, [pc, #148]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eee:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d210      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 020f 	bic.w	r2, r3, #15
 8001f06:	491d      	ldr	r1, [pc, #116]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e029      	b.n	8001f74 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4911      	ldr	r1, [pc, #68]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4909      	ldr	r1, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f5e:	f000 f8b5 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_RCC_ClockConfig+0x248>)
 8001f66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_RCC_ClockConfig+0x24c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fe51 	bl	8000c14 <HAL_InitTick>
 8001f72:	4603      	mov	r3, r0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	40021000 	.word	0x40021000
 8001f84:	04c4b400 	.word	0x04c4b400
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa8:	4b44      	ldr	r3, [pc, #272]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d121      	bne.n	8002002 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d11e      	bne.n	8002002 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fc4:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e005      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001fec:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x130>)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d102      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x134>)
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e004      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d101      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002016:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d146      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800201e:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3301      	adds	r3, #1
 8002034:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d003      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0xb4>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d00d      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0xce>
 8002042:	e019      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 800204e:	68d2      	ldr	r2, [r2, #12]
 8002050:	0a12      	lsrs	r2, r2, #8
 8002052:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
        break;
 800205c:	e019      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800205e:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002068:	68d2      	ldr	r2, [r2, #12]
 800206a:	0a12      	lsrs	r2, r2, #8
 800206c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
        break;
 8002076:	e00c      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002082:	68d2      	ldr	r2, [r2, #12]
 8002084:	0a12      	lsrs	r2, r2, #8
 8002086:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
        break;
 8002090:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RCC_GetSysClockFreq+0x12c>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	0e5b      	lsrs	r3, r3, #25
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	3301      	adds	r3, #1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020ac:	69bb      	ldr	r3, [r7, #24]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08003160 	.word	0x08003160
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200

080020cc <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80020d0:	f7ff ff5e 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetHCLKFreq+0x20>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	4903      	ldr	r1, [pc, #12]	; (80020f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08003150 	.word	0x08003150

080020f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002100:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800210c:	f7ff f898 	bl	8001240 <HAL_PWREx_GetVoltageRange>
 8002110:	6138      	str	r0, [r7, #16]
 8002112:	e014      	b.n	800213e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800211a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211e:	6593      	str	r3, [r2, #88]	; 0x58
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800212c:	f7ff f888 	bl	8001240 <HAL_PWREx_GetVoltageRange>
 8002130:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214a:	d10b      	bne.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b80      	cmp	r3, #128	; 0x80
 8002150:	d919      	bls.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2ba0      	cmp	r3, #160	; 0xa0
 8002156:	d902      	bls.n	800215e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002158:	2302      	movs	r3, #2
 800215a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800215c:	e013      	b.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800215e:	2301      	movs	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002162:	e010      	b.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b80      	cmp	r3, #128	; 0x80
 8002168:	d902      	bls.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800216a:	2303      	movs	r3, #3
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e00a      	b.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b80      	cmp	r3, #128	; 0x80
 8002174:	d102      	bne.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002176:	2302      	movs	r3, #2
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e004      	b.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b70      	cmp	r3, #112	; 0x70
 8002180:	d101      	bne.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 020f 	bic.w	r2, r3, #15
 800218e:	490a      	ldr	r1, [pc, #40]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40022000 	.word	0x40022000

080021bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80021c6:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d118      	bne.n	8002204 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021d2:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d107      	bne.n	80021ee <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80021e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e005      	b.n	80021fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80021fa:	4a2a      	ldr	r2, [pc, #168]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 030f 	and.w	r3, r3, #15
 8002218:	3301      	adds	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d003      	beq.n	800222a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d00d      	beq.n	8002244 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8002228:	e019      	b.n	800225e <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800222a:	4a1f      	ldr	r2, [pc, #124]	; (80022a8 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002234:	68d2      	ldr	r2, [r2, #12]
 8002236:	0a12      	lsrs	r2, r2, #8
 8002238:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	613b      	str	r3, [r7, #16]
      break;
 8002242:	e019      	b.n	8002278 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002244:	4a19      	ldr	r2, [pc, #100]	; (80022ac <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800224e:	68d2      	ldr	r2, [r2, #12]
 8002250:	0a12      	lsrs	r2, r2, #8
 8002252:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	613b      	str	r3, [r7, #16]
      break;
 800225c:	e00c      	b.n	8002278 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002268:	68d2      	ldr	r2, [r2, #12]
 800226a:	0a12      	lsrs	r2, r2, #8
 800226c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	613b      	str	r3, [r7, #16]
      break;
 8002276:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0e5b      	lsrs	r3, r3, #25
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	3301      	adds	r3, #1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002292:	683b      	ldr	r3, [r7, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08003160 	.word	0x08003160
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200

080022b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e095      	b.n	80023ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022d2:	d009      	beq.n	80022e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
 80022da:	e005      	b.n	80022e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fb14 	bl	8000930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800231e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002328:	d902      	bls.n	8002330 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	e002      	b.n	8002336 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002334:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800233e:	d007      	beq.n	8002350 <HAL_SPI_Init+0xa0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002348:	d002      	beq.n	8002350 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002392:	ea42 0103 	orr.w	r1, r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	0c1b      	lsrs	r3, r3, #16
 80023ac:	f003 0204 	and.w	r2, r3, #4
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80023cc:	ea42 0103 	orr.w	r1, r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b088      	sub	sp, #32
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_SPI_Transmit+0x22>
 8002414:	2302      	movs	r3, #2
 8002416:	e158      	b.n	80026ca <HAL_SPI_Transmit+0x2d4>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002420:	f7fe fc48 	bl	8000cb4 <HAL_GetTick>
 8002424:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d002      	beq.n	800243c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	77fb      	strb	r3, [r7, #31]
    goto error;
 800243a:	e13d      	b.n	80026b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_SPI_Transmit+0x52>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800244c:	e134      	b.n	80026b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002498:	d10f      	bne.n	80024ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d007      	beq.n	80024d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024e0:	d94b      	bls.n	800257a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_SPI_Transmit+0xfa>
 80024ea:	8afb      	ldrh	r3, [r7, #22]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d13e      	bne.n	800256e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	881a      	ldrh	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	1c9a      	adds	r2, r3, #2
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002514:	e02b      	b.n	800256e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d112      	bne.n	800254a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	881a      	ldrh	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	1c9a      	adds	r2, r3, #2
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002548:	e011      	b.n	800256e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800254a:	f7fe fbb3 	bl	8000cb4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d803      	bhi.n	8002562 <HAL_SPI_Transmit+0x16c>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d102      	bne.n	8002568 <HAL_SPI_Transmit+0x172>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800256c:	e0a4      	b.n	80026b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ce      	bne.n	8002516 <HAL_SPI_Transmit+0x120>
 8002578:	e07c      	b.n	8002674 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_SPI_Transmit+0x192>
 8002582:	8afb      	ldrh	r3, [r7, #22]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d170      	bne.n	800266a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d912      	bls.n	80025b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	881a      	ldrh	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	1c9a      	adds	r2, r3, #2
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b02      	subs	r3, #2
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025b6:	e058      	b.n	800266a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	330c      	adds	r3, #12
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80025de:	e044      	b.n	800266a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d12b      	bne.n	8002646 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d912      	bls.n	800261e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	1c9a      	adds	r2, r3, #2
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b02      	subs	r3, #2
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800261c:	e025      	b.n	800266a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	330c      	adds	r3, #12
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002644:	e011      	b.n	800266a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002646:	f7fe fb35 	bl	8000cb4 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d803      	bhi.n	800265e <HAL_SPI_Transmit+0x268>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d102      	bne.n	8002664 <HAL_SPI_Transmit+0x26e>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002668:	e026      	b.n	80026b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1b5      	bne.n	80025e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fcdf 	bl	800303c <SPI_EndRxTxTransaction>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	77fb      	strb	r3, [r7, #31]
 80026b4:	e000      	b.n	80026b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80026b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80026c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b088      	sub	sp, #32
 80026d6:	af02      	add	r7, sp, #8
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ee:	d112      	bne.n	8002716 <HAL_SPI_Receive+0x44>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10e      	bne.n	8002716 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2204      	movs	r2, #4
 80026fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002700:	88fa      	ldrh	r2, [r7, #6]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f910 	bl	8002932 <HAL_SPI_TransmitReceive>
 8002712:	4603      	mov	r3, r0
 8002714:	e109      	b.n	800292a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_SPI_Receive+0x52>
 8002720:	2302      	movs	r3, #2
 8002722:	e102      	b.n	800292a <HAL_SPI_Receive+0x258>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800272c:	f7fe fac2 	bl	8000cb4 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d002      	beq.n	8002744 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800273e:	2302      	movs	r3, #2
 8002740:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002742:	e0e9      	b.n	8002918 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_SPI_Receive+0x7e>
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002754:	e0e0      	b.n	8002918 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2204      	movs	r2, #4
 800275a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	88fa      	ldrh	r2, [r7, #6]
 800276e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027a0:	d908      	bls.n	80027b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e007      	b.n	80027c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027cc:	d10f      	bne.n	80027ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d007      	beq.n	800280c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800280a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002814:	d867      	bhi.n	80028e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002816:	e030      	b.n	800287a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d117      	bne.n	8002856 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f103 020c 	add.w	r2, r3, #12
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002854:	e011      	b.n	800287a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002856:	f7fe fa2d 	bl	8000cb4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d803      	bhi.n	800286e <HAL_SPI_Receive+0x19c>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d102      	bne.n	8002874 <HAL_SPI_Receive+0x1a2>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002878:	e04e      	b.n	8002918 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1c8      	bne.n	8002818 <HAL_SPI_Receive+0x146>
 8002886:	e034      	b.n	80028f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d115      	bne.n	80028c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	b292      	uxth	r2, r2
 80028a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80028c0:	e011      	b.n	80028e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028c2:	f7fe f9f7 	bl	8000cb4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d803      	bhi.n	80028da <HAL_SPI_Receive+0x208>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d102      	bne.n	80028e0 <HAL_SPI_Receive+0x20e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028e4:	e018      	b.n	8002918 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ca      	bne.n	8002888 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fb48 	bl	8002f8c <SPI_EndRxTransaction>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	75fb      	strb	r3, [r7, #23]
 8002914:	e000      	b.n	8002918 <HAL_SPI_Receive+0x246>
  }

error :
 8002916:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002928:	7dfb      	ldrb	r3, [r7, #23]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b08a      	sub	sp, #40	; 0x28
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002940:	2301      	movs	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x26>
 8002954:	2302      	movs	r3, #2
 8002956:	e1fb      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x41e>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002960:	f7fe f9a8 	bl	8000cb4 <HAL_GetTick>
 8002964:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800296c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800297c:	7efb      	ldrb	r3, [r7, #27]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d00e      	beq.n	80029a0 <HAL_SPI_TransmitReceive+0x6e>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002988:	d106      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x66>
 8002992:	7efb      	ldrb	r3, [r7, #27]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d003      	beq.n	80029a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002998:	2302      	movs	r3, #2
 800299a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800299e:	e1cd      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x80>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x80>
 80029ac:	887b      	ldrh	r3, [r7, #2]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80029b8:	e1c0      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d003      	beq.n	80029ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2205      	movs	r2, #5
 80029ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	887a      	ldrh	r2, [r7, #2]
 80029de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	887a      	ldrh	r2, [r7, #2]
 80029e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	887a      	ldrh	r2, [r7, #2]
 80029fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a10:	d802      	bhi.n	8002a18 <HAL_SPI_TransmitReceive+0xe6>
 8002a12:	8a3b      	ldrh	r3, [r7, #16]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d908      	bls.n	8002a2a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	e007      	b.n	8002a3a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a38:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d007      	beq.n	8002a58 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a60:	d97c      	bls.n	8002b5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_SPI_TransmitReceive+0x13e>
 8002a6a:	8a7b      	ldrh	r3, [r7, #18]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d169      	bne.n	8002b44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	1c9a      	adds	r2, r3, #2
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a94:	e056      	b.n	8002b44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d11b      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x1aa>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <HAL_SPI_TransmitReceive+0x1aa>
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d113      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	881a      	ldrh	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	1c9a      	adds	r2, r3, #2
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d11c      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x1f2>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	b292      	uxth	r2, r2
 8002b02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	1c9a      	adds	r2, r3, #2
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b20:	2301      	movs	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b24:	f7fe f8c6 	bl	8000cb4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d807      	bhi.n	8002b44 <HAL_SPI_TransmitReceive+0x212>
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d003      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002b42:	e0fb      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1a3      	bne.n	8002a96 <HAL_SPI_TransmitReceive+0x164>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d19d      	bne.n	8002a96 <HAL_SPI_TransmitReceive+0x164>
 8002b5a:	e0df      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_SPI_TransmitReceive+0x23a>
 8002b64:	8a7b      	ldrh	r3, [r7, #18]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f040 80cb 	bne.w	8002d02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d912      	bls.n	8002b9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	1c9a      	adds	r2, r3, #2
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b02      	subs	r3, #2
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b9a:	e0b2      	b.n	8002d02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	7812      	ldrb	r2, [r2, #0]
 8002ba8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bc2:	e09e      	b.n	8002d02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d134      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x30a>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d02f      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x30a>
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d12c      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d912      	bls.n	8002c12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	881a      	ldrh	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	1c9a      	adds	r2, r3, #2
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b02      	subs	r3, #2
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c10:	e012      	b.n	8002c38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	7812      	ldrb	r2, [r2, #0]
 8002c1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d148      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x3aa>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d042      	beq.n	8002cdc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d923      	bls.n	8002caa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	1c9a      	adds	r2, r3, #2
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b02      	subs	r3, #2
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d81f      	bhi.n	8002cd8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	e016      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f103 020c 	add.w	r2, r3, #12
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	7812      	ldrb	r2, [r2, #0]
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cdc:	f7fd ffea 	bl	8000cb4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d803      	bhi.n	8002cf4 <HAL_SPI_TransmitReceive+0x3c2>
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d102      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x3c8>
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002d00:	e01c      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f47f af5b 	bne.w	8002bc4 <HAL_SPI_TransmitReceive+0x292>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f47f af54 	bne.w	8002bc4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f98b 	bl	800303c <SPI_EndRxTxTransaction>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	661a      	str	r2, [r3, #96]	; 0x60
 8002d38:	e000      	b.n	8002d3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002d3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3728      	adds	r7, #40	; 0x28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d68:	f7fd ffa4 	bl	8000cb4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d78:	f7fd ff9c 	bl	8000cb4 <HAL_GetTick>
 8002d7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d7e:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	015b      	lsls	r3, r3, #5
 8002d84:	0d1b      	lsrs	r3, r3, #20
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d8e:	e054      	b.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d050      	beq.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d98:	f7fd ff8c 	bl	8000cb4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d902      	bls.n	8002dae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d13d      	bne.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc6:	d111      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd0:	d004      	beq.n	8002ddc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dda:	d107      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df4:	d10f      	bne.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e017      	b.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d19b      	bne.n	8002d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e76:	f7fd ff1d 	bl	8000cb4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e86:	f7fd ff15 	bl	8000cb4 <HAL_GetTick>
 8002e8a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e8c:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00da      	lsls	r2, r3, #3
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	0d1b      	lsrs	r3, r3, #20
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ea4:	e062      	b.n	8002f6c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002eac:	d109      	bne.n	8002ec2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002ec0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d050      	beq.n	8002f6c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eca:	f7fd fef3 	bl	8000cb4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d902      	bls.n	8002ee0 <SPI_WaitFifoStateUntilTimeout+0x78>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d13d      	bne.n	8002f5c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002eee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef8:	d111      	bne.n	8002f1e <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f02:	d004      	beq.n	8002f0e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0c:	d107      	bne.n	8002f1e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f26:	d10f      	bne.n	8002f48 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e010      	b.n	8002f7e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d194      	bne.n	8002ea6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3720      	adds	r7, #32
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa0:	d111      	bne.n	8002fc6 <SPI_EndRxTransaction+0x3a>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002faa:	d004      	beq.n	8002fb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d107      	bne.n	8002fc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff fec1 	bl	8002d58 <SPI_WaitFlagStateUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e023      	b.n	8003034 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff4:	d11d      	bne.n	8003032 <SPI_EndRxTransaction+0xa6>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffe:	d004      	beq.n	800300a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d113      	bne.n	8003032 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2200      	movs	r2, #0
 8003012:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff ff26 	bl	8002e68 <SPI_WaitFifoStateUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003026:	f043 0220 	orr.w	r2, r3, #32
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e000      	b.n	8003034 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7ff ff07 	bl	8002e68 <SPI_WaitFifoStateUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e027      	b.n	80030c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff fe6c 	bl	8002d58 <SPI_WaitFlagStateUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	f043 0220 	orr.w	r2, r3, #32
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e014      	b.n	80030c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2200      	movs	r2, #0
 800309e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fee0 	bl	8002e68 <SPI_WaitFifoStateUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e000      	b.n	80030c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <__libc_init_array>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	4d0d      	ldr	r5, [pc, #52]	; (8003100 <__libc_init_array+0x38>)
 80030cc:	2600      	movs	r6, #0
 80030ce:	4c0d      	ldr	r4, [pc, #52]	; (8003104 <__libc_init_array+0x3c>)
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	42a6      	cmp	r6, r4
 80030d6:	d109      	bne.n	80030ec <__libc_init_array+0x24>
 80030d8:	4d0b      	ldr	r5, [pc, #44]	; (8003108 <__libc_init_array+0x40>)
 80030da:	2600      	movs	r6, #0
 80030dc:	4c0b      	ldr	r4, [pc, #44]	; (800310c <__libc_init_array+0x44>)
 80030de:	f000 f81f 	bl	8003120 <_init>
 80030e2:	1b64      	subs	r4, r4, r5
 80030e4:	10a4      	asrs	r4, r4, #2
 80030e6:	42a6      	cmp	r6, r4
 80030e8:	d105      	bne.n	80030f6 <__libc_init_array+0x2e>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f0:	3601      	adds	r6, #1
 80030f2:	4798      	blx	r3
 80030f4:	e7ee      	b.n	80030d4 <__libc_init_array+0xc>
 80030f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fa:	3601      	adds	r6, #1
 80030fc:	4798      	blx	r3
 80030fe:	e7f2      	b.n	80030e6 <__libc_init_array+0x1e>
 8003100:	080031a0 	.word	0x080031a0
 8003104:	080031a0 	.word	0x080031a0
 8003108:	080031a0 	.word	0x080031a0
 800310c:	080031a4 	.word	0x080031a4

08003110 <memset>:
 8003110:	4402      	add	r2, r0
 8003112:	4603      	mov	r3, r0
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	f803 1b01 	strb.w	r1, [r3], #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <_init>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr

0800312c <_fini>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	bf00      	nop
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr
